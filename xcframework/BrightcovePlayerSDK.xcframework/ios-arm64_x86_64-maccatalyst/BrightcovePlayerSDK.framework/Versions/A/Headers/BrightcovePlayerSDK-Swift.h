#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef BRIGHTCOVEPLAYERSDK_SWIFT_H
#define BRIGHTCOVEPLAYERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X)
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X)
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X)
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreFoundation;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <BrightcovePlayerSDK/BrightcovePlayerSDK.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BrightcovePlayerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// This object represents an ad.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK6BCOVAd")
@interface BCOVAd : NSObject
/// Is this ad skippable. Boolean NSNumber.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeySkippable;)
+ (NSString * _Nonnull)PropertyKeySkippable SWIFT_WARN_UNUSED_RESULT;
/// Skip time. NSNumber seconds after which you can skip the ad.
/// Ignored unless kBCOVAdPropertyKeySkippable is “YES”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeySkipTime;)
+ (NSString * _Nonnull)PropertyKeySkipTime SWIFT_WARN_UNUSED_RESULT;
/// Array of NSStrings representing Clickthrough URLs
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyClickthroughURLs;)
+ (NSString * _Nonnull)PropertyKeyClickthroughURLs SWIFT_WARN_UNUSED_RESULT;
/// Array of NSStrings representing Tracking URLs
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyTrackingURLs;)
+ (NSString * _Nonnull)PropertyKeyTrackingURLs SWIFT_WARN_UNUSED_RESULT;
/// The title of the ad.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The id of the ad.
@property (nonatomic, readonly, copy) NSString * _Nonnull adId;
/// The begin time of the ad.
@property (nonatomic, readonly) CMTime beginTime;
/// The duration of the ad.
@property (nonatomic, readonly) CMTime duration;
/// The properties of the ad.
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
/// This is the designated initializer. It creates an ad.
/// \param title The title of the ad.
///
/// \param adId The id of the ad.
///
/// \param beginTime The time in the video in which the ad will play.
///
/// \param duration The duration of the ad.
///
/// \param properties The properties of the ad.
///
///
/// returns:
/// An initialized ad.
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title adId:(NSString * _Nonnull)adId beginTime:(CMTime)beginTime duration:(CMTime)duration properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
/// Returns true if <code>ad</code> is equivalent to this instance.
/// \param ad The ad to test for equivalence with this instance.
///
///
/// returns:
/// Whether <code>ad</code> is equivalent to this instance.
- (BOOL)isEqualToAd:(BCOVAd * _Nonnull)ad SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This object represents a sequence of ads intended to be viewed in sequence,
/// at the same point in the video.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK14BCOVAdSequence")
@interface BCOVAdSequence : NSObject
/// The begin time of the sequence.
@property (nonatomic, readonly) CMTime beginTime;
/// The duration of the sequence.
@property (nonatomic, readonly) CMTime duration;
/// /The ads that make up the sequence.
@property (nonatomic, readonly, copy) NSArray<BCOVAd *> * _Nonnull ads;
/// The properties of the sequence.
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
/// This is the designated initializer. It creates an ad sequence.
/// \param ads The ads that make up the sequence.
///
/// \param properties The properties of the ad sequence.
///
///
/// returns:
/// An initialized ad sequence.
- (nonnull instancetype)initWithAds:(NSArray<BCOVAd *> * _Nonnull)ads properties:(NSDictionary * _Nonnull)properties OBJC_DESIGNATED_INITIALIZER;
/// Returns true  if <code>adSequence</code> is equivalent to this instance.
/// \param adSequence The ad sequence to test for equivalence with this instance.
///
///
/// returns:
/// Whether <code>adSequence</code> is equivalent to this instance.
- (BOOL)isEqualToAdSequence:(BCOVAdSequence * _Nonnull)adSequence SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BCOVBasicSessionProviderOptions;

/// The basic playback session provider provides core functionality to yield
/// playback sessions corresponding to an enumeration of BCOVVideo objects.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK24BCOVBasicSessionProvider")
@interface BCOVBasicSessionProvider : NSObject <BCOVPlaybackSessionProvider>
/// Returns a basic session provider initialized with the specified options.
/// \param options The options for the session provider to return.
///
///
/// returns:
/// A basic playback session provider configured with the specified options.
- (nonnull instancetype)initWithOptions:(BCOVBasicSessionProviderOptions * _Nullable)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BCOVVideo;
@class BCOVSource;

/// Optional configuration for basic session providers.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK31BCOVBasicSessionProviderOptions")
@interface BCOVBasicSessionProviderOptions : NSObject
/// The default policy selects the first source with a deliveryType of “HLS”. If no
/// source is found, it falls back to first source with a deliveryType of
/// “MP4”. If neither are found, it returns nil.
@property (nonatomic, copy) BCOVSource * _Nullable (^ _Nonnull sourceSelectionPolicy)(BCOVVideo * _Nullable);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The basic source selection policy decides which source to select from a BCOVVideo object.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK30BCOVBasicSourceSelectionPolicy")
@interface BCOVBasicSourceSelectionPolicy : NSObject <NSCopying>
/// Select the first video in HLS with the specified scheme.
/// If no such source is found, the first HLS source with any scheme is returned.
/// If no HLS sources are present, the first MP4 is returned.
/// If none of the above is found, the first source of any kind is returned.
/// This is the default source selection policy (using BCOVSource.URLSchemeHTTPS as the scheme).
/// \param scheme The preferred scheme (BCOVSource.URLSchemeHTTP or BCOVSource.URLSchemeHTTPS) of the source URL.
///
///
/// returns:
/// A source selection policy that prefers HLS with the specified scheme.
+ (BCOVBasicSessionProviderSourceSelectionPolicy _Nonnull)sourceSelectionHLSWithScheme:(NSString * _Nonnull)scheme SWIFT_WARN_UNUSED_RESULT;
/// Select the first video in HLS, regardless of scheme.
/// If no HLS source is found, select the first source with a deliveryType of
/// “MP4”. If neither is found, the first source of any kind is returned.
///
/// returns:
/// A source selection policy that prefers HLS over MP4.
+ (BCOVBasicSessionProviderSourceSelectionPolicy _Nonnull)sourceSelectionHLS SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BCOVComponentIdentity;

/// Objects which must be registered with the BCOVPlayerSDKManager in order to
/// activate their functionality should conform to the BCOVComponent protocol.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK13BCOVComponent_")
@protocol BCOVComponent <NSObject>
/// Uniquely identifies this component with the returned component identity.
@property (nonatomic, readonly, strong) id <BCOVComponentIdentity> _Nonnull bcov_componentIdentity;
@optional
/// This method allows the BCOVPlayerSDKManager to supply contextual information
/// to this component when it is registered.
/// \param componentContext The contextual information to be communicated to this component.
///
- (void)bcov_setComponentContext:(NSDictionary * _Nonnull)componentContext;
@end


/// Identifies a BCOVComponent to the BCOVPlayerSDKManager.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK21BCOVComponentIdentity_")
@protocol BCOVComponentIdentity <NSObject>
/// A concrete class which uniquely identifies an object that conforms to the
/// BCOVComponent protocol.
@property (nonatomic, readonly) Class _Nonnull componentClass;
/// An identifier which uniquely identifies a specific version of an object that
/// conforms to the BCOVComponent protocol. This identifier should be updated
/// whenever a new version of the component is released, to help in identifying
/// which specific components have been registered with the BCOVPlayerSDKManager.
@property (nonatomic, readonly, copy) NSString * _Nonnull versionIdentifier;
@end

@class BCOVMutableCuePoint;
@class BCOVCuePoint;

/// Value class representing a cue point in the Brightcove Player SDK ecosystem.
/// A cue point is used to specify a position on the timeline of a piece of
/// content that can be used for any purpose (often for programmatic control
/// over when advertisements should be shown). When playback reaches a cue point,
/// the playback session sends an event on its <code>cuePoints</code> signal that includes
/// the BCOVCuePoint value.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK20BCOVCuePointProtocol_")
@protocol BCOVCuePointProtocol <NSObject>
/// The time at which the cue point occurs on the timeline of the BCOVVideo
/// which owns it.
@property (nonatomic, readonly) CMTime position;
/// An identifier for the kind of this cue point. There is no predetermined
/// enumeration of values for this property. The value to use may be required
/// by certain Brightcove Player SDK for iOS plugins, or it can be used for
/// some other client-specific purpose. The core SDK does not use this value.
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// Additional properties of the cue point. The keys and values are unspecified,
/// specific keys or values may be required by certain Brightcove Player SDK for
/// iOS plugins, or it can be used for some other client-specific purpose. The
/// core SDK does not use this value.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nonnull properties;
/// Returns a modified version of this cue point. Because BCOVCuePoint objects
/// are immutable, an entirely new BCOVCuePoint must be created even if only
/// a single change is needed. Therefore, this method provides a convenient way
/// to obtain a temporary mutable copy of this instance and modify it (within
/// <code>updateBlock</code>).
/// Do not attempt to save a reference to the mutable cue point passed to
/// <code>updateBlock</code>, as the behavior of doing this is undefined. Instead, make
/// whatever modifications are necessary in the block and then capture the cue
/// point object returned from this method.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     updateBlock A block which is passed a mutable copy of this cue point.
///   </li>
/// </ul>
///
/// returns:
/// The copy of this cue point modified by <code>updateBlock</code>.
- (BCOVCuePoint * _Nonnull)update:(SWIFT_NOESCAPE void (^ _Nonnull)(BCOVMutableCuePoint * _Nonnull))updateBlock SWIFT_WARN_UNUSED_RESULT;
@end


/// Implementation of BCOVCuePointProtocol.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK12BCOVCuePoint")
@interface BCOVCuePoint : NSObject <BCOVCuePointProtocol, NSCopying, NSMutableCopying>
/// Cue point type representing the start of an ad slot
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TypeAdSlot;)
+ (NSString * _Nonnull)TypeAdSlot SWIFT_WARN_UNUSED_RESULT;
/// Cue point type representing a companion ad
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TypeAdCompanion;)
+ (NSString * _Nonnull)TypeAdCompanion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyName;)
+ (NSString * _Nonnull)PropertyKeyName SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly) CMTime position;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nonnull properties;
/// The cue point position immediately before the first time interval of the
/// video which owns it. This is generally used to implement pre-roll ad
/// functionality.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CMTime PositionTypeBefore;)
+ (CMTime)PositionTypeBefore SWIFT_WARN_UNUSED_RESULT;
/// The cue point position immediately after the last time interval of the
/// video which owns it. This is generally used to implement post-roll ad
/// functionality.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CMTime PositionTypeAfter;)
+ (CMTime)PositionTypeAfter SWIFT_WARN_UNUSED_RESULT;
/// Constructs a new cue point with the specified type and position.
/// \param type The type of the new cue point.
/// -position The position of the new cue point.
///
///
/// returns:
/// A new cue point with the specified type and position.
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type position:(CMTime)position OBJC_DESIGNATED_INITIALIZER;
/// Constructs a new cue point with the specified type, position, and properties.
/// \param type The type of the new cue point.
///
/// \param position The position of the new cue point.
///
/// \param properties The properties of the new cue point.
///
///
/// returns:
/// A new cue point with the specified type, position, and properties.
- (nonnull instancetype)initWithType:(NSString * _Nullable)type position:(CMTime)position properties:(NSDictionary<NSString *, NSObject *> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
- (BCOVCuePoint * _Nonnull)update:(SWIFT_NOESCAPE void (^ _Nonnull)(BCOVMutableCuePoint * _Nonnull))updateBlock SWIFT_WARN_UNUSED_RESULT;
/// Returns an NSComparisionResult indicating whether this cue point’s position
/// is earlier, the same, or later than the position of <code>cuePoint</code>. Only
/// positions are compared.
/// \param cuePoint The cue point whose position is to be compared with this instance.
///
///
/// returns:
/// Whether this cue point’s position is earlier, the same, or later.
- (enum NSComparisonResult)compare:(BCOVCuePoint * _Nonnull)cuePoint SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if this instance’s position is <code>position</code>.
/// \param position The position to test this instance’s position against.
///
///
/// returns:
/// Whether this instance has the specified position.
- (BOOL)hasPosition:(CMTime)position SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if <code>cuePoint</code> is equivalent to this instance.
/// \param cuePoint The cue point to test for equivalence with this instance.
///
///
/// returns:
/// Whether <code>cuePoint</code> is equivalent to this instance.
- (BOOL)isEqualToCuePoint:(BCOVCuePoint * _Nullable)cuePoint SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
/// Returns a cue point with the specified type and properties whose position is
/// kBCOVCuePointPositionTypeAfter.
/// \param type The type of the cue point to return.
///
/// \param properties The properties of the cue point to return.
///
///
/// returns:
/// The “after” cue point with the specified type and properties.
+ (BCOVCuePoint * _Nonnull)afterCuePointOfType:(NSString * _Nullable)type properties:(NSDictionary<NSString *, NSObject *> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
/// Returns a cue point with the specified type and properties whose position is
/// kBCOVCuePointPositionTypeBefore.
/// \param type The type of the cue point to return.
///
/// \param properties The properties of the cue point to return.
///
///
/// returns:
/// The “before” cue point with the specified type and properties.
+ (BCOVCuePoint * _Nonnull)beforeCuePointOfType:(NSString * _Nullable)type properties:(NSDictionary<NSString *, NSObject *> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
/// Returns a cue point with the specified type and properties whose position in
/// seconds is at <code>positionInSeconds</code>.
/// \param type The type of the cue point to return.
///
/// \param positionInSeconds The position (in seconds) of this cue point into the timeline of the video which owns it.
///
/// \param properties The properties of the cue point to return.
///
///
/// returns:
/// The cue point with the specified type, position, and properties.
+ (BCOVCuePoint * _Nullable)cuePointWithType:(NSString * _Nullable)type positionInSeconds:(NSTimeInterval)positionInSeconds properties:(NSDictionary<NSString *, NSObject *> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A collection of cue points, each element ordered by its position according
/// to the natural ordering of CMTime values.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK22BCOVCuePointCollection")
@interface BCOVCuePointCollection : NSObject
/// Constructs and returns a BCOVCuePointCollection from the cue points in the
/// specified array. The returned collection will be ordered according to the
/// positions of the cue points. The ordering of multiple cue points with
/// the same position is not guaranteed.
/// \param cuePoints The new cue point collection’s cue points.
///
///
/// returns:
/// The new cue point collection with the specified cue points.
- (nonnull instancetype)initWithArray:(NSArray<BCOVCuePoint *> * _Nullable)cuePoints;
/// Constructs and returns a BCOVCuePointCollection with a single cue point.
/// \param cuePoint The new cue point collection’s cue point.
///
///
/// returns:
/// The new cue point collection with the specified cue point.
- (nonnull instancetype)initWithCuePoint:(BCOVCuePoint * _Nullable)cuePoint;
/// Returns this collection’s cue point objects in an array. The elements of the
/// array will have the same order as the ordering of cue points in this
/// collection.
///
/// returns:
/// This collection’s cue points in an array.
@property (nonatomic, readonly, copy) NSArray<BCOVCuePoint *> * _Nonnull array;
/// Returns the number of cue points in this collection.
///
/// returns:
/// The number of cue points in this collection.
@property (nonatomic, readonly) NSInteger count;
/// Returns all cue points in this collection after the specified time.
/// \param time The time after which corresponding cue points should be returned.
///
///
/// returns:
/// All cue points in this collection after the specified time.
- (BCOVCuePointCollection * _Nonnull)cuePointsAfterTime:(CMTime)time SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection before the specified time.
/// \param time The time before which corresponding cue points should be returned.
///
///
/// returns:
/// All cue points in this collection before the specified time.
- (BCOVCuePointCollection * _Nonnull)cuePointsBeforeTime:(CMTime)time SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection at exactly the specified time.
/// \param time The time at which corresponding cue points should be returned.
///
///
/// returns:
/// All cue points in this collection at exactly the specified time.
- (BCOVCuePointCollection * _Nonnull)cuePointsAtTime:(CMTime)time SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection at or after the specified time.
/// \param time The time at or after which corresponding cue points should be returned.
///
///
/// returns:
/// All cue points in this collection at or after the specified time.
- (BCOVCuePointCollection * _Nonnull)cuePointsAtOrAfterTime:(CMTime)time SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection at or before the specified time.
/// \param time The time at or before which corresponding cue points should be eturned.
///
///
/// returns:
/// All cue points in this collection at or before the specified time.
- (BCOVCuePointCollection * _Nonnull)cuePointsAtOrBeforeTime:(CMTime)time SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection between the specified times.
/// \param lowerBound The lower boundary, at or below which cue points should not be returned.
///
/// \param upperBound The upper boundary, at or above which cue points should not be returned.
///
///
/// returns:
/// All cue points in this collection between the specified times.
- (BCOVCuePointCollection * _Nonnull)cuePointsAfterTime:(CMTime)lowerBound beforeTime:(CMTime)upperBound SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection between the specified times,
/// inclusive of the upper bound.
/// \param lowerBound The lower boundary, at or below which cue points should not be returned.
///
/// \param upperBound The upper boundary, above which cue points should not be returned.
///
///
/// returns:
/// All cue points in this collection between the specified times.
- (BCOVCuePointCollection * _Nullable)cuePointsAfterTime:(CMTime)lowerBound atOrBeforeTime:(CMTime)upperBound SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection between the specified times,
/// inclusive of the lower bound.
/// \param lowerBound The lower boundary, below which cue points should not be returned.
///
/// \param upperBound The upper boundary, at or above which cue points should not be returned.
///
///
/// returns:
/// All cue points in this collection between the specified times.
- (BCOVCuePointCollection * _Nonnull)cuePointsAtOrAfterTime:(CMTime)lowerBound beforeTime:(CMTime)upperBound SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection, at or between the specified times.
/// \param lowerBound The lower boundary, below which cue points should not be returned.
///
/// \param upperBound The upper boundary, above which cue points should not be returned.
///
///
/// returns:
/// All cue points in this collection, at or between the specified times.
- (BCOVCuePointCollection * _Nonnull)cuePointsAtOrAfterTime:(CMTime)lowerBound atOrBeforeTime:(CMTime)upperBound SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection of the specified type.
/// \param type The type of cue points to be returned.
///
///
/// returns:
/// All cue points in this collection, of the specified type.
- (BCOVCuePointCollection * _Nonnull)cuePointsOfType:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if this instance has the same cue points in the same order as <code>collection</code>.
/// \param collection The collection with which to compare this instance.
///
///
/// returns:
/// Whether this instance is equivalent to <code>collection</code>.
- (BOOL)isEqualToCollection:(BCOVCuePointCollection * _Nullable)collection SWIFT_WARN_UNUSED_RESULT;
/// Returns the cue point at the specified index, or nil if the specified index
/// is greater than the highest index into the collection.
/// \param index The index into this collection of the desired cue point.
///
///
/// returns:
/// The cue point at the specified index, or nil if this collection does not have a cue point at that index.
- (BCOVCuePoint * _Nullable)objectAtIndexedSubscript:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// A boolean value to ignore cuepoints. This may be useful
/// if ads are being played in the current AVPlayer instance
/// and you want to ignore progress events temporarily until
/// the primary video is swapped back in.
@property (nonatomic) BOOL ignoreCuePoints;
/// Returns a new cue point collection containing the specified cue points.
/// \param cuePoints An array of cue point objects to include in the collection.
///
///
/// returns:
/// A new cue point collection containing the specified cue points.
+ (BCOVCuePointCollection * _Nonnull)collectionWithArray:(NSArray<BCOVCuePoint *> * _Nonnull)cuePoints SWIFT_WARN_UNUSED_RESULT;
/// Returns a singleton cue point collection containing no cue points.
///
/// returns:
/// A singleton cue point collection containing no cue points.
+ (BCOVCuePointCollection * _Nonnull)emptyCollection SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BCOVCuePointCollection (SWIFT_EXTENSION(BrightcovePlayerSDK)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface BCOVCuePointCollection (SWIFT_EXTENSION(BrightcovePlayerSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
@end


@interface BCOVCuePointCollection (SWIFT_EXTENSION(BrightcovePlayerSDK))
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end



typedef SWIFT_ENUM(NSInteger, BCOVEconomics, open) {
  BCOVEconomicsAdSupported = 0,
  BCOVEconomicsFree = 1,
  BCOVEconomicsPublisherPays = 2,
  BCOVEconomicsPayMedia = 3,
};

@class NSError;

SWIFT_CLASS("_TtC19BrightcovePlayerSDK19BCOVErrorTranslator")
@interface BCOVErrorTranslator : NSObject
/// Returns a human readable error code from an <code>NSError</code>
/// The Brightcove iOS SDK has a number <code>NSError</code> objects that are created
/// in various instances, each one within a specific error domain with a specific error code.
/// This class can be used to translate one of these <code>NSError</code> object’s error code into a
/// human readable string.
/// \param error The NSError object to translate.
///
///
/// returns:
/// A readable error code. May be <code>nil</code> if the <code>NSError</code> is not an internal Brightcove error.
+ (NSString * _Nullable)readableErrorCodeForError:(NSError * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, BCOVFPSAuthProxyErrorCode, open) {
/// Request for Application Certificate failed.
  BCOVFPSAuthProxyErrorCodeApplicationCertificateRequestFailed = 69401,
/// Request for Key failed.
  BCOVFPSAuthProxyErrorCodeContentKeyRequestFailed = 69402,
/// Key request generation failed.
  BCOVFPSAuthProxyErrorCodeContentKeyGenerationFailed = 69403,
  BCOVFPSAuthProxyErrorCodeNoKeyRequestURLForRendition = 69404,
};

@class AVAssetResourceLoadingRequest;
@class NSData;
@class AVContentKeyRequest;
@class NSURLResponse;
@class NSDate;

/// Implement this protocol when interacting with a custom FPS license server.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK25BCOVFPSAuthorizationProxy_")
@protocol BCOVFPSAuthorizationProxy <NSObject>
@optional
/// Optional method.
/// This method is only called when downloading a video when the license has not
/// been preloaded prior to downloading.
/// Implement this method to handle retrieving the content identifier from the loading request.
/// This is called for each asset.
/// No guarantee is made as to the thread that this is called on.
/// You should return the content identifier corresponding to this loading request.
/// This is typically extracted from the “skd://…” URL in loadingRequest.request.URL.
/// The content identifier will be passed to [AVAssetResourceLoadingRequest
/// streamingContentKeyRequestDataForApp:contentIdentifier:options:error:]
/// to retrieve the SPC.
/// If this method is not provided, the default method will be used. The default method
/// removes “skd://” from loadingRequest.request.URL to generate the content identifier.
/// \param loadingRequest The skd:// loading request made for the asset.
///
///
/// returns:
/// The content identifier in a Data object.
- (NSData * _Nullable)contentIdentifierFromLoadingRequest:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest SWIFT_WARN_UNUSED_RESULT;
@required
/// Implement this method to handle retrieving the content identifier from the content key request.
/// This is called for each asset.
/// No guarantee is made as to the thread that this is called on.
/// You should return the content identifier corresponding to this content key request.
/// This is typically extracted from the “skd://…” value in keyRequest.identifier.
/// The content identifier will be passed to [AVContentKeySession makeStreamingContentKeyRequestDataForApp:
/// contentIdentifier:options:completionHandler] to retrieve the SPC.
/// \param keyRequest The AVContentKeyRequest for the asset.
///
///
/// returns:
/// The content identifier in a Data object.
- (NSData * _Nullable)contentIdentifierFromKeyRequest:(AVContentKeyRequest * _Nullable)keyRequest SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to handle retrieving the content key for a video that
/// is being downloaded for offline playback. This is called for each asset.
/// No guarantee is made as to the thread that this is called on.
/// \param contentKeyIdentifier The “skd://…” loading request URL string made for the asset.
///
/// \param keyRequest The key request data returned by [AVAssetResourceLoadingRequest streamingContentKeyRequestDataForApp:contentIdentifier:options:error:].
///
/// \param source The BCOVSource used to make this request.
///
/// \param options The parameters originally passed to <code>-BCOVOfflineVideoManager requestVideoDownload:mediaSelections:parameters:completion:</code>
///
/// \param completionHandler The completion handler to return the content key. If returning an error, you must leave the contentkey and response parameters nil.
///
- (void)encryptedContentKeyForContentKeyIdentifier:(NSString * _Nonnull)contentKeyIdentifier contentKeyRequest:(NSData * _Nullable)keyRequest source:(BCOVSource * _Nullable)source options:(NSDictionary * _Nullable)options completionHandler:(void (^ _Nonnull)(NSURLResponse * _Nullable, NSData * _Nullable, NSDate * _Nullable, NSError * _Nullable))completionHandler;
@end

@class NSURL;
@class NSURLSession;

/// Class responsible for interacting with Brightcove FairPlay services.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK26BCOVFPSBrightcoveAuthProxy")
@interface BCOVFPSBrightcoveAuthProxy : NSObject <BCOVFPSAuthorizationProxy>
/// Error domain for FairPlay Auth Proxy related errors.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorDomain;)
+ (NSString * _Nonnull)ErrorDomain SWIFT_WARN_UNUSED_RESULT;
/// Key for retreiving response data from an NSError object’s userInfo dictionary.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ResponseData;)
+ (NSString * _Nonnull)ResponseData SWIFT_WARN_UNUSED_RESULT;
/// The base url for FairPlay related license requests. The default URL points to
/// fps.brightcove.com.
/// If set to nil, the default URL pointing at fps.brightcove.com will be re-created.
@property (nonatomic, copy) NSURL * _Nullable fpsBaseURL;
/// The key request URL for FairPlay related key requests.
/// Normally set to nil, in which case the key request URL
/// will be retrieved from the Video Cloud Playback API response.
@property (nonatomic, copy) NSURL * _Nullable keyRequestURL;
/// URLSession shared across all network calls to the BCOVFPSBrightcoveAuthProxy.
/// This object is created when the Playback Service is initialized.
/// If you wish to use your own URLSession you can set it here.
/// If set to nil, the default URLSession will be re-created.
@property (nonatomic, strong) NSURLSession * _Nullable sharedURLSession;
/// Creates a BCOVFPSAuthorizationProxy to interacts with fps.brightcove.com.
/// \param pubId The publisher id. Must not be nil.
///
/// \param appId The application id registered with fps.brightcove.com. May be nil
/// if not using fps.brightcove.com.
///
///
/// returns:
/// An initialized proxy.
- (nonnull instancetype)initWithPublisherId:(NSString * _Nullable)pubId applicationId:(NSString * _Nullable)appId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Retrieves the Application Certificate. This should be done as soon as possible
/// and should be cached for no longer than 6 hours.
/// \param completionHandler Executed when the request is completed. If applicationCetificate
/// is nil, the error will be populated. The block
/// will be executed on the main thread.
///
- (void)retrieveApplicationCertificate:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completionHandler;
@end


@interface BCOVFPSBrightcoveAuthProxy (SWIFT_EXTENSION(BrightcovePlayerSDK))
- (NSData * _Nullable)contentIdentifierFromLoadingRequest:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)contentIdentifierFromKeyRequest:(AVContentKeyRequest * _Nullable)keyRequest SWIFT_WARN_UNUSED_RESULT;
- (void)encryptedContentKeyForContentKeyIdentifier:(NSString * _Nonnull)contentKeyIdentifier contentKeyRequest:(NSData * _Nullable)keyRequest source:(BCOVSource * _Nullable)source options:(NSDictionary * _Nullable)options completionHandler:(void (^ _Nonnull)(NSURLResponse * _Nullable, NSData * _Nullable, NSDate * _Nullable, NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS("_TtC19BrightcovePlayerSDK16BCOVFPSConstants")
@interface BCOVFPSConstants : NSObject
/// Error domain for FairPlay related errors.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorDomain;)
+ (NSString * _Nonnull)ErrorDomain SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, BCOVFPSErrorCode, open) {
/// Error occured requesting content key.
  BCOVFPSErrorCodeStreamingContentKeyRequest = 69401,
/// Error occured requesting application certificate.
  BCOVFPSErrorCodeApplicationCertificateRequest = 69404,
};


SWIFT_CLASS("_TtC19BrightcovePlayerSDK19BCOVFairPlayLicense")
@interface BCOVFairPlayLicense : NSObject
/// A Boolean boxed in an NSValue.
/// If <code>true</code>, the downloaded FairPlay content will be assigned
/// a license that does not expire.
/// If absent or <code>false</code>, the <code>BCOVFairPlayLicense/RentalDurationKey</code> must be set.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PurchaseKey;)
+ (NSString * _Nonnull)PurchaseKey SWIFT_WARN_UNUSED_RESULT;
/// Specifies the rental duration of the FairPlay license, in seconds.
/// The number should be a positive integer greater than zero.
/// The rental period begins as soon as the download request is made.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull RentalDurationKey;)
+ (NSString * _Nonnull)RentalDurationKey SWIFT_WARN_UNUSED_RESULT;
/// Specifies the duration of the FairPlay License, in seconds,
/// after playback has started.
/// The number should be a positive integer greater than zero.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PlayDurationKey;)
+ (NSString * _Nonnull)PlayDurationKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19BrightcovePlayerSDK19BCOVFairPlayManager")
@interface BCOVFairPlayManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorDomain;)
+ (NSString * _Nonnull)ErrorDomain SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Attempts to preload content keys for FairPlay protected videos. Typically
/// a content key for a FairPlay protected video is processed when the video
/// begins playback. By preloading the content key you can improve the playback
/// startup experience for your users.
/// This is only applicable to online videos and will not have any effect on offline videos.
/// \param videos The source of BCOVVideo objects for which content keys
/// will be processed.
///
+ (void)preloadContentKeysForVideos:(NSArray<BCOVVideo *> * _Nonnull)videos;
@end



SWIFT_CLASS("_TtC19BrightcovePlayerSDK31BCOVFairPlayOnlineLicenseHelper")
@interface BCOVFairPlayOnlineLicenseHelper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVContentKeySession;

@interface BCOVFairPlayOnlineLicenseHelper (SWIFT_EXTENSION(BrightcovePlayerSDK)) <AVContentKeySessionDelegate>
- (void)contentKeySession:(AVContentKeySession * _Nonnull)session didProvideContentKeyRequest:(AVContentKeyRequest * _Nonnull)keyRequest;
- (void)contentKeySession:(AVContentKeySession * _Nonnull)session didProvideRenewingContentKeyRequest:(AVContentKeyRequest * _Nonnull)keyRequest;
- (BOOL)contentKeySession:(AVContentKeySession * _Nonnull)session shouldRetryContentKeyRequest:(AVContentKeyRequest * _Nonnull)keyRequest reason:(AVContentKeyRequestRetryReason _Nonnull)retryReason SWIFT_WARN_UNUSED_RESULT;
- (void)contentKeySession:(AVContentKeySession * _Nonnull)session contentKeyRequest:(AVContentKeyRequest * _Nonnull)keyRequest didFailWithError:(NSError * _Nonnull)err;
@end


/// The Global Configuration contains properties which are utilized throughout
/// the Native Player SDK. If your app requires custom configuration,
/// set the necessary properties of the Global Configuration BEFORE using any
/// of the services of the Native Player SDK.
/// BCOVGlobalConfiguration is a global singleton object. Reference it using:
/// let config = BCOVGlobalConfiguration.shareConfig
SWIFT_CLASS("_TtC19BrightcovePlayerSDK23BCOVGlobalConfiguration")
@interface BCOVGlobalConfiguration : NSObject
/// Returns the shared Global Configuration singleton.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BCOVGlobalConfiguration * _Nonnull sharedConfig;)
+ (BCOVGlobalConfiguration * _Nonnull)sharedConfig SWIFT_WARN_UNUSED_RESULT;
/// Allow playback when device is on cellular data.
/// Changing this value during playback will not stop playback of the current video
/// if the device changes over to cellular data.
/// Example Usage:
/// BCOVGlobalConfiguration.sharedConfig.allowsCellularPlayback = false;
/// Default value is true.
@property (nonatomic) BOOL allowsCellularPlayback;
/// Sets a custom, fully qualified domain name (FQDN) for Catalog API, Metrics and
/// Analytics collection services. This method is to be used specifically for
/// reliable content delivery in China and requires particular account arrangements.
/// Setting this property in any other situation will result in unknown behavior.
@property (nonatomic, copy) NSString * _Nullable chinaProxyDomain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIView;

SWIFT_CLASS("_TtC19BrightcovePlayerSDK27BCOVInteractivityAnnotation")
@interface BCOVInteractivityAnnotation : NSObject
@property (nonatomic, strong) UIView * _Nullable annotationView;
@property (nonatomic) BCOVInteractivityAnnotationType type;
@property (nonatomic) BCOVInteractivityAnnotationState state;
@property (nonatomic) BCOVInteractivityAnnotationTransition transition;
/// Properties from API
@property (nonatomic, copy) NSString * _Nullable annotationId;
@property (nonatomic) NSTimeInterval startTime;
@property (nonatomic) NSTimeInterval duration;
@property (nonatomic, copy) NSString * _Nullable rawType;
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nonnull left;
@property (nonatomic, copy) NSString * _Nonnull top;
@property (nonatomic, copy) NSString * _Nonnull width;
@property (nonatomic, copy) NSString * _Nonnull height;
@property (nonatomic, copy) NSString * _Nullable url;
@property (nonatomic, copy) NSString * _Nullable precondition;
@property (nonatomic, copy) NSString * _Nullable command;
@property (nonatomic, copy) NSString * _Nullable mode;
@property (nonatomic, copy) NSDictionary * _Nullable commandData;
@property (nonatomic, copy) NSDictionary * _Nullable onClick;
@property (nonatomic, copy) NSString * _Nullable gotoTrack;
@property (nonatomic, copy) NSString * _Nullable backgroundColor;
+ (NSArray<BCOVInteractivityAnnotation *> * _Nonnull)annotationsFromJSONArray:(NSArray<NSDictionary *> * _Nonnull)jsonArray SWIFT_WARN_UNUSED_RESULT;
+ (BCOVInteractivityAnnotation * _Nonnull)initWithJSON:(NSDictionary * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
@end

@class UIImageView;
@class UILabel;
@class NSCoder;
@class UIFocusUpdateContext;
@class UIFocusAnimationCoordinator;

SWIFT_CLASS("_TtC19BrightcovePlayerSDK24BCOVInteractivityControl")
@interface BCOVInteractivityControl : UIControl
/// The annotation associatd with this control
@property (nonatomic, weak) BCOVInteractivityAnnotation * _Nullable annotation;
/// The UIImageView used for image annotations
@property (nonatomic, strong) UIImageView * _Nullable imageView;
/// The UILabel used for text annotations
@property (nonatomic, strong) UILabel * _Nullable textLabel;
@property (nonatomic, strong) UIView * _Nullable floatingView;
@property (nonatomic, readonly) BOOL canBecomeFocused;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)didUpdateFocusInContext:(UIFocusUpdateContext * _Nonnull)context withAnimationCoordinator:(UIFocusAnimationCoordinator * _Nonnull)coordinator;
@end

@protocol BCOVInteractivityHandlerDelegate;
@class BCOVInteractivityProject;
@protocol BCOVPlaybackController;

SWIFT_CLASS("_TtC19BrightcovePlayerSDK24BCOVInteractivityHandler")
@interface BCOVInteractivityHandler : NSObject
@property (nonatomic, weak) id <BCOVInteractivityHandlerDelegate> _Nullable delegate;
/// The current <code>BCOVInteractivityProject</code>
@property (nonatomic, readonly, strong) BCOVInteractivityProject * _Nullable interactivityProject;
- (nonnull instancetype)initWithAccountId:(NSString * _Nonnull)accountId projectId:(NSString * _Nonnull)projectId containerView:(UIView * _Nonnull)containerView playbackController:(id <BCOVPlaybackController> _Nonnull)playbackController OBJC_DESIGNATED_INITIALIZER;
/// Enable a precondition that show any annotations configured with the precondition
/// \param precondition The precondition string
///
- (void)enablePrecondition:(NSString * _Nonnull)precondition;
/// Disable a precondition that hide any annotations configured with the precondition
/// \param precondition The precondition string
///
- (void)disablePrecondition:(NSString * _Nonnull)precondition;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol BCOVPlaybackSession;

/// Conform to this protocol to receive basic ad information for each session.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK30BCOVPlaybackSessionAdsConsumer_")
@protocol BCOVPlaybackSessionAdsConsumer <NSObject>
@optional
/// Called when playback enters a new ad sequence within a playback session.
/// \param session The playback session within which the ad transition occurred.
///
/// \param adSequence The ad sequence being entered.
///
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didEnterAdSequence:(BCOVAdSequence * _Nonnull)adSequence;
/// Called when playback exits an ad sequence within a playback session.
/// \param session The playback session within which the ad transition occurred.
///
/// \param adSequence The ad sequence being exited.
///
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didExitAdSequence:(BCOVAdSequence * _Nonnull)adSequence;
/// Called when playback exists an ad within a playback session.
/// \param session The playback session within which the ad transition occurred.
///
/// \param ad The ad being entered.
///
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didEnterAd:(BCOVAd * _Nonnull)ad;
/// Called when playback enters a new ad within a playback session.
/// \param session The playback session within which the ad transition occurred.
///
/// \param ad The ad being exited.
///
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didExitAd:(BCOVAd * _Nonnull)ad;
/// Called with the playback session’s ad playback progress.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     session The playback session within which the ad transition occurred.
///   </li>
///   <li>
///     ad The ad that is progressing.
///   </li>
///   <li>
///     progress The progress time of the ad.
///   </li>
/// </ul>
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session ad:(BCOVAd * _Nonnull)ad didProgressTo:(NSTimeInterval)progress;
/// Called when an ad paused.
/// \param session The playback session within which the ad transition occurred.
///
/// \param ad The ad being paused.
///
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didPauseAd:(BCOVAd * _Nonnull)ad;
/// Called when an ad resumed.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     session The playback session within which the ad transition occurred.
///   </li>
///   <li>
///     ad The ad being resumed.
///   </li>
/// </ul>
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didResumeAd:(BCOVAd * _Nonnull)ad;
@end


/// Conform to this protocol to receive basic playback information for each video in
/// addition to advertising.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK27BCOVPlaybackSessionConsumer_")
@protocol BCOVPlaybackSessionConsumer <BCOVPlaybackSessionAdsConsumer, BCOVPlaybackSessionBasicConsumer, BCOVPlaybackSessionBumperConsumer>
@end

@class BCOVPlaybackSessionLifecycleEvent;

@interface BCOVInteractivityHandler (SWIFT_EXTENSION(BrightcovePlayerSDK)) <BCOVPlaybackSessionConsumer>
- (void)didAdvanceToPlaybackSession:(id <BCOVPlaybackSession> _Nonnull)session;
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didProgressTo:(NSTimeInterval)progress;
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didReceiveLifecycleEvent:(BCOVPlaybackSessionLifecycleEvent * _Nonnull)lifecycleEvent;
@end

@class UIFont;
@class UIColor;

SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK32BCOVInteractivityHandlerDelegate_")
@protocol BCOVInteractivityHandlerDelegate <NSObject>
@optional
/// This delegate method is called if the GET request for fetching the
/// Interactivity project is successful.
/// \param project The <code>BCOVInteractivityProject</code> that was created.
///
- (void)projectWasCreated:(BCOVInteractivityProject * _Nonnull)project;
/// This delegate method is called if the GET request for fetching the
/// Interactivity project fails.
/// \param error The error that was returned.
///
- (void)projectRequestFailed:(NSError * _Nonnull)error;
/// The animation timing for a given transition class.
/// Currently only the “Fade” transition is supported.
/// The default value is <code>0.35</code>
/// \param transition The transition type for the annotation.
///
- (NSTimeInterval)animationTimeForTransition:(BCOVInteractivityAnnotationTransition)transition SWIFT_WARN_UNUSED_RESULT;
/// The desired font for a text annotation.
/// Unlike a web browser a UIFont size isn’t uniform across iPhone, iPad and tvOS.
/// We use <code>systemFontOfSize:weight:</code> with the font size being 0.018%
/// of AVPlayerLayer’s videoRect width and a weight of <code>UIFontWeightMedium</code>
/// You can use this delegate method to ovewrite the default UIFont.
/// If using a custom font make sure to follow Apple’s guidelines on embedding fonts.
/// https://developer.apple.com/documentation/uikit/text_display_and_fonts/adding_a_custom_font_to_your_app
/// \param annotation The Annotation to be styled.
///
- (UIFont * _Nonnull)fontForTextAnnotation:(BCOVInteractivityAnnotation * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// The desired background color for a text annotation.
/// Currently we only support the “MULLINS SPECIAL” (black) and “White” themes.
/// If any other theme is selected the styling for “White” will be used.
/// For “MULLINS SPECIAL” we use RBG(68, 68, 68) with an 0.4 alpha component.
/// For “White” we use UIColor.white with an 0.5 alpha component.
/// You can use this delegate method to set a custom background color for
/// the text annotation.
/// \param annotation The Annotation to be styled.
///
- (UIColor * _Nonnull)backgroundColorForTextAnnotation:(BCOVInteractivityAnnotation * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// The desired text color for a text annotation.
/// Currently we only support the “MULLINS SPECIAL” (black) and “White” themes.
/// If any other theme is selected the styling for “White” will be used.
/// For “MULLINS SPECIAL” we use UIColor.whiteColor.
/// For “White” we use UIColor.black.
/// You can use this delegate method to set a custom text color for
/// the text annotation.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     annotation The Annotation to be styled.
///   </li>
/// </ul>
- (UIColor * _Nonnull)textColorForTextAnnotation:(BCOVInteractivityAnnotation * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// This delegate method is called when a user taps the view of an BCOVInteractivityAnnotation
/// which has been configured with a command.
/// You can access the command and command data with the annotation’s
/// <code>command</code> and <code>commandData</code> properties.
/// You can then use those values to add additional behavior.
/// \param annotation The Annotation that was tapped.
///
- (void)annotationWasTapped:(BCOVInteractivityAnnotation * _Nonnull)annotation SWIFT_AVAILABILITY(ios,introduced=12);
/// This delegate method is called when a Time Triggered annotation becomes active
/// You can access the command and command data with the annotation’s
/// <code>command</code> and <code>commandData</code> properties.
/// You can then use those values to add additional behavior.
/// \param annotation The Annotation that was triggered.
///
- (void)annotationWasTriggered:(BCOVInteractivityAnnotation * _Nonnull)annotation;
@end


SWIFT_CLASS("_TtC19BrightcovePlayerSDK24BCOVInteractivityProject")
@interface BCOVInteractivityProject : NSObject
+ (BCOVInteractivityProject * _Nullable)projectWithJSON:(NSDictionary * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nullable projectId;
@property (nonatomic, copy) NSString * _Nullable sessionId;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSArray<BCOVInteractivityAnnotation *> * _Nullable annotations;
@property (nonatomic, weak) BCOVInteractivityHandler * _Nullable handler;
- (NSArray<BCOVInteractivityAnnotation *> * _Nullable)annotationsAtTime:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// When these properties are modified, the changes will take effect on the next
/// delivered session. To apply these properties to all sessions, modify them before
/// the call to -[BCOVPlaybackController setVideos:].
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK20BCOVMutableAnalytics_")
@protocol BCOVMutableAnalytics <NSObject>
/// When these properties are modified, the changes will take effect on the next
/// delivered session. To apply these properties to all sessions, modify them before
/// the call to -[BCOVPlaybackController setVideos:].
@property (nonatomic, copy) NSString * _Nullable account;
/// This property must be a URI with a valid structure and must contain
/// an authority.
/// The default value for this property, if it is not overridden, will be
/// “bcsdk://” followed by the bundle identifier.
/// Refer to http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax
/// for more information on and examples of URI syntax.
/// In particular, a destination without a hierarchical part (e.g. just a scheme)
/// is considered invalid, as is any value without a scheme.
@property (nonatomic, copy) NSString * _Nullable destination;
/// This property must be a URI with a valid structure and must contain an
/// authority.
/// The default value is nil.
/// Refer to http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax
/// for more information on and examples of URI syntax.
/// In particular, a source without a hierarchical part (e.g. just a scheme)
/// is considered invalid, as is any value without a scheme.
@property (nonatomic, copy) NSString * _Nullable source;
/// This property toggles client side unique identifier generation. If enabled,
/// the sdk will identify uniques using the device’s vendor identifier. If
/// disabled, the sdk will provide no uniques value and analytics will rely on
/// server-side driven heuristics to determine uniques.
/// The default value is <code>true</code>.
@property (nonatomic) BOOL uniqueIdentifierEnabled;
/// The authentication token used for analytics authorization.
@property (nonatomic, copy) NSString * _Nullable authToken;
/// The application ID used for analytics.
@property (nonatomic, copy) NSString * _Nullable applicationId;
/// The player ID used for analytics.
@property (nonatomic, copy) NSString * _Nullable player;
/// The player name used for analytics.
@property (nonatomic, copy) NSString * _Nullable playerName;
@end


/// Sub-protocol of BCOVCuePoint, used only in its <code>-update</code> method.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK19BCOVMutableCuePoint")
@interface BCOVMutableCuePoint : BCOVCuePoint
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic) CMTime position;
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nonnull properties;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type position:(CMTime)position OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(NSString * _Nullable)type position:(CMTime)position properties:(NSDictionary<NSString *, NSObject *> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end

@class BCOVMutablePlaylist;
@class BCOVPlaylist;

/// Value class representing a playlist in the Brightcove Player SDK ecosystem.
/// A playlist is an ordered collection of videos, as well as additional optional
/// metadata about the collection in the form of properties.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK20BCOVPlaylistProtocol_")
@protocol BCOVPlaylistProtocol <NSObject>
/// The BCOVVideo instances which comprise this playlist.
@property (nonatomic, readonly, copy) NSArray<BCOVVideo *> * _Nonnull videos;
/// Additional properties or metadata related to this playlist.
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
/// Returns an array of error-free BCOVVideo objects, stripping out
/// any BCOVVideo objects that contain an error.
@property (nonatomic, readonly, copy) NSArray<BCOVVideo *> * _Nonnull allPlayableVideos;
/// Returns an array of error-free BCOVVideo objects, stripping out
/// any BCOVVideo objects that contain an error.
@property (nonatomic, readonly, copy) NSArray<BCOVVideo *> * _Nonnull allFailedVideos;
/// Returns a modified version of this playlist. Because BCOVPlaylist objects
/// are immutable, an entirely new BCOVPlaylist must be created even if only
/// a single change is needed. Therefore, this method provides a convenient way
/// to obtain a temporary mutable copy of this instance and modify it (within
/// <code>updateBlock</code>).
/// Do not attempt to save a reference to the mutable playlist passed to
/// <code>updateBlock</code>, as the behavior of doing this is undefined. Instead, make
/// whatever modifications are necessary in the block and then capture the
/// playlist object returned from this method.
/// \param updateBlock A block which is passed a mutable copy of this playlist.
///
///
/// returns:
/// The copy of this cue point modified by <code>updateBlock</code>.
- (BCOVPlaylist * _Nonnull)update:(SWIFT_NOESCAPE void (^ _Nonnull)(BCOVMutablePlaylist * _Nonnull))updateBlock SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of error-free BCOVVideo objects, stripping out
/// any BCOVVideo objects that contain an error.
/// \param videos The array of vidoes to be filtered
///
///
/// returns:
/// Returns an array of error-free BCOVVideo objects
+ (NSArray<BCOVVideo *> * _Nonnull)allPlayableVideosFrom:(NSArray<BCOVVideo *> * _Nonnull)videos SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of BCOVVideo objects that contain errors, stripping out
/// any BCOVVideo objects that do not contain an error.
/// \param videos The array of vidoes to be filtered
///
///
/// returns:
/// an array of BCOVVideo objects that contain errors
+ (NSArray<BCOVVideo *> * _Nonnull)allFailedVideosFrom:(NSArray<BCOVVideo *> * _Nonnull)videos SWIFT_WARN_UNUSED_RESULT;
@end


/// Implementation of the BCOVPlaylist protocol.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK12BCOVPlaylist")
@interface BCOVPlaylist : NSObject <BCOVPlaylistProtocol, NSCopying, NSMutableCopying>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertiesKeyAccountId;)
+ (NSString * _Nonnull)PropertiesKeyAccountId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertiesKeyDescription;)
+ (NSString * _Nonnull)PropertiesKeyDescription SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertiesKeyId;)
+ (NSString * _Nonnull)PropertiesKeyId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertiesKeyName;)
+ (NSString * _Nonnull)PropertiesKeyName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertiesKeyReferenceId;)
+ (NSString * _Nonnull)PropertiesKeyReferenceId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertiesKeyType;)
+ (NSString * _Nonnull)PropertiesKeyType SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSArray<BCOVVideo *> * _Nonnull videos;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
@property (nonatomic, readonly, copy) NSArray<BCOVVideo *> * _Nonnull allPlayableVideos;
@property (nonatomic, readonly, copy) NSArray<BCOVVideo *> * _Nonnull allFailedVideos;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// Constructs a new playlist with the specified videos and properties.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     videos The video contents of this playlist.
///   </li>
///   <li>
///     properties The metadata or other properties related to this playlist.
///   </li>
/// </ul>
///
/// returns:
/// A new playlist with the specified videos.
- (nonnull instancetype)initWithVideos:(NSArray<BCOVVideo *> * _Nonnull)videos properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
/// Constructs a new playlist with the specified videos.
/// \param videos The video contents of this playlist.
///
///
/// returns:
/// A new playlist with the specified videos.
- (nonnull instancetype)initWithVideos:(NSArray<BCOVVideo *> * _Nonnull)videos;
/// Constructs a new playlist with the specified video and properties.
/// \param video The video contents of this playlist.
///
/// \param properties The metadata or other properties related to this playlist.
///
///
/// returns:
/// A new playlist with the specified video and properties.
- (nonnull instancetype)initWithVideo:(BCOVVideo * _Nonnull)video properties:(NSDictionary * _Nonnull)properties;
/// Constructs a new playlist with the specified video.
/// \param video The video contents of this playlist.
///
///
/// returns:
/// A new playlist with the specified video.
- (nonnull instancetype)initWithVideo:(BCOVVideo * _Nonnull)video;
/// Returns the video at the specified index, or nil if the specified index
/// is greater than the highest index into the playlist.
/// \param index The index into this collection of the desired video.
///
///
/// returns:
/// The video at the specified index, or nil if this playlist
/// does not have a video at that index.
- (BCOVVideo * _Nullable)objectAtIndexedSubscript:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if <code>playlist</code> is equivalent to this instance.
/// \param playlist The playlist to test for equivalence with this instance.
///
///
/// returns:
/// Whether <code>playlist</code> is equivalent to this instance.
- (BOOL)isEqualToPlaylist:(BCOVPlaylist * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
/// Returns the number of this instance’s videos.
///
/// returns:
/// The number of videos in this instance.
@property (nonatomic, readonly) NSInteger count;
+ (NSArray<BCOVVideo *> * _Nonnull)allPlayableVideosFrom:(NSArray<BCOVVideo *> * _Nonnull)videos SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<BCOVVideo *> * _Nonnull)allFailedVideosFrom:(NSArray<BCOVVideo *> * _Nonnull)videos SWIFT_WARN_UNUSED_RESULT;
- (BCOVPlaylist * _Nonnull)update:(SWIFT_NOESCAPE void (^ _Nonnull)(BCOVMutablePlaylist * _Nonnull))updateBlock SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// Sub-protocol of BCOVPlaylist, used only in its <code>-update</code> method.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK19BCOVMutablePlaylist")
@interface BCOVMutablePlaylist : BCOVPlaylist
@property (nonatomic, copy) NSArray<BCOVVideo *> * _Nonnull videos;
@property (nonatomic, copy) NSDictionary * _Nonnull properties;
- (nonnull instancetype)initWithVideos:(NSArray<BCOVVideo *> * _Nonnull)videos properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end

@class BCOVMutableSource;

/// A specific “source” or rendition within a BCOVVideo object. While Brightcove
/// organizes content into entities called videos, the actual media URLs at
/// which the content can be accessed is encapsulated by a source. In addition
/// to the URL, a source may have an optional delivery type which can be used
/// to help disambiguate it from other sources, and a set of properties distinct
/// from the properties on the video which owns it.
/// Note that it is valid for a video to contain multiple sources with the same
/// delivery type, in which case the sources must be disambiguated by some other
/// means (such as with different values in their respective properties).
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK18BCOVSourceProtocol_")
@protocol BCOVSourceProtocol <NSObject>
/// The URL at which this source instance’s media is accessible.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// The delivery method describing this source in relation to other sources in the same video.
@property (nonatomic, readonly, copy) NSString * _Nullable deliveryMethod;
/// The metadata or properties related to this source instance.
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
/// Returns a modified version of this source. Because BCOVSource objects
/// are immutable, an entirely new BCOVSource must be created even if only
/// a single change is needed. Therefore, this method provides a convenient way
/// to obtain a temporary mutable copy of this instance and modify it (within
/// <code>updateBlock</code>).
/// Do not attempt to save a reference to the mutable source passed to
/// <code>updateBlock</code>, as the behavior of doing this is undefined. Instead, make
/// whatever modifications are necessary in the block and then capture the source
/// object returned from this method.
/// \param updateBlock A block which is passed a mutable copy of this source.
///
///
/// returns:
/// The copy of this source modified by <code>updateBlock</code>.
- (BCOVSource * _Nonnull)update:(SWIFT_NOESCAPE void (^ _Nonnull)(BCOVMutableSource * _Nonnull))updateBlock SWIFT_WARN_UNUSED_RESULT;
@end


/// Implementation of  BCOVSourceProtocol.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK10BCOVSource")
@interface BCOVSource : NSObject <BCOVSourceProtocol, NSCopying, NSMutableCopying>
/// The URL scheme for HTTP.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull URLSchemeHTTP;)
+ (NSString * _Nonnull)URLSchemeHTTP SWIFT_WARN_UNUSED_RESULT;
/// The URL scheme for HTTPS.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull URLSchemeHTTPS;)
+ (NSString * _Nonnull)URLSchemeHTTPS SWIFT_WARN_UNUSED_RESULT;
/// The delivery method for HLS (HTTP Live Streaming) media.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeliveryHLS;)
+ (NSString * _Nonnull)DeliveryHLS SWIFT_WARN_UNUSED_RESULT;
/// The delivery method for MP4 (typically progressive download) media.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeliveryMP4;)
+ (NSString * _Nonnull)DeliveryMP4 SWIFT_WARN_UNUSED_RESULT;
/// The delivery method for DASH media.
/// DASH is not a supported playback format on iOS.
/// This constant can help you identify DASH sources if you need to
/// parse JSON responses from the Playback API manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeliveryDASH;)
+ (NSString * _Nonnull)DeliveryDASH SWIFT_WARN_UNUSED_RESULT;
/// The delivery method for Once media.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeliveryOnce;)
+ (NSString * _Nonnull)DeliveryOnce SWIFT_WARN_UNUSED_RESULT;
/// The delivery method for Bolt + SSAI.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeliveryBoltSSAI;)
+ (NSString * _Nonnull)DeliveryBoltSSAI SWIFT_WARN_UNUSED_RESULT;
/// The key used in the source properties to declare the DRM type of this source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeySystems;)
+ (NSString * _Nonnull)PropertyKeySystems SWIFT_WARN_UNUSED_RESULT;
/// The key system used by a FairPlay source, if retrieved through Brightcove Player API.
/// BCOVSource.properties:
/// …
/// key_systems: {
/// “com.apple.fps.1_0”: {
/// “key_request_url”: “https://fps.brightcove.com/v1/fairplay_session_”
/// }
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyFairPlayV1;)
+ (NSString * _Nonnull)PropertyFairPlayV1 SWIFT_WARN_UNUSED_RESULT;
/// The key for the key request URL used by a FairPlay source, if retrieved through Brightcove Player API.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyRequestURL;)
+ (NSString * _Nonnull)PropertyKeyRequestURL SWIFT_WARN_UNUSED_RESULT;
/// The key for the key request URLs used by a FairPlay source, if retrieved through Brightcove Player API.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyRequestURLs;)
+ (NSString * _Nonnull)PropertyKeyRequestURLs SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyEXTXVersion;)
+ (NSString * _Nonnull)PropertyKeyEXTXVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyType;)
+ (NSString * _Nonnull)PropertyKeyType SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyVMAP;)
+ (NSString * _Nonnull)PropertyKeyVMAP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyAuthToken;)
+ (NSString * _Nonnull)PropertyKeyAuthToken SWIFT_WARN_UNUSED_RESULT;
/// Constructs a new source with the specified URL
/// \param url The URL at which the new source’s media can be accessed.
///
///
/// returns:
/// A new source with the specified URL
- (nonnull instancetype)initWithURL:(NSURL * _Nullable)url;
/// Constructs a new source with the specified URL, delivery method, and
/// properties.
/// \param url The URL at which the new source’s media can be accessed.
///
/// \param deliveryMethod The delivery method of the new source.
///
/// \param properties The metadata or properties related to the new source.
///
///
/// returns:
/// A new source with the specified URL, delivery method, and properties.
- (nonnull instancetype)initWithURL:(NSURL * _Nullable)url deliveryMethod:(NSString * _Nullable)deliveryMethod properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
/// Returns <code>true</code> if <code>source</code> is equivalent to this instance.
/// \param source The source to test for equivalence with this instance.
///
///
/// returns:
/// Whether <code>source</code> is equivalent to this instance.
- (BOOL)isEqualToSource:(BCOVSource * _Nullable)source SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable deliveryMethod;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
- (BCOVSource * _Nonnull)update:(SWIFT_NOESCAPE void (^ _Nonnull)(BCOVMutableSource * _Nonnull))updateBlock SWIFT_WARN_UNUSED_RESULT;
@end


/// Sub-class of BCOVSource, used only in its <code>-update</code> method.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK17BCOVMutableSource")
@interface BCOVMutableSource : BCOVSource
@property (nonatomic, copy) NSURL * _Nullable url;
@property (nonatomic, copy) NSString * _Nullable deliveryMethod;
@property (nonatomic, copy) NSDictionary * _Nonnull properties;
- (nonnull instancetype)initWithURL:(NSURL * _Nullable)url deliveryMethod:(NSString * _Nullable)deliveryMethod properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end

@class BCOVMutableVideo;

/// A video in the Brightcove Player SDK ecosystem. Brightcove organizes content
/// into entities called videos, which may have zero or more sources containing
/// information specific to accessing the content. The video provides a container
/// for referencing these sources in the aggregate, and a place for metadata
/// about the video or the collection of sources in the form of properties. Also,
/// a video may have a cue point collection, which is a set of cue points that
/// describe specific locations in the video’s content timeline.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK17BCOVVideoProtocol_")
@protocol BCOVVideoProtocol <NSObject>
/// The cue points associated to this video. These cue points apply equally to
/// the content at each of this video’s sources.
@property (nonatomic, readonly, strong) BCOVCuePointCollection * _Nullable cuePoints;
/// Metadata or properties related to this video or its sources in the aggregate.
/// You can find constants for the keys that this SDK uses with this dictionary
/// near the top of this class definition.
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
/// The economics field that comes from Video Cloud.
/// BCOVEconomics.AdSupported is the default, and means that the ads should be displayed.
/// BCOVEconomics.Free means that no ads should be shown during video playback.
@property (nonatomic, readonly) enum BCOVEconomics economics;
/// The sources which comprise the actual destinations at which this video’s
/// content can be accessed.
@property (nonatomic, readonly, copy) NSArray<BCOVSource *> * _Nonnull sources;
/// The URL at which this video’s VTT thumbnails source is available.
/// This value overrides any thumbnails VTT track that the SDK uses
/// from a PAPI response.
/// The value will be <code>nil</code> if you have not set a value.
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailVTTURL;
/// Returns a modified version of this source. Because BCOVVideo objects
/// are immutable, an entirely new BCOVVideo must be created even if only
/// a single change is needed. Therefore, this method provides a convenient way
/// to obtain a temporary mutable copy of this instance and modify it (within
/// <code>updateBlock</code>).
/// Do not attempt to save a reference to the mutable video passed to
/// <code>updateBlock</code>, as the behavior of doing this is undefined. Instead, make
/// whatever modifications are necessary in the block and then capture the video
/// object returned from this method.
/// \param updateBlock A block which is passed a mutable copy of this video.
///
///
/// returns:
/// The copy of this video modified by <code>updateBlock</code>.
- (BCOVVideo * _Nonnull)update:(SWIFT_NOESCAPE void (^ _Nonnull)(BCOVMutableVideo * _Nonnull))updateBlock SWIFT_WARN_UNUSED_RESULT;
@end

@class NSLocale;

/// Implementation of the BCOVVideo protocol.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK9BCOVVideo")
@interface BCOVVideo : NSObject <BCOVVideoProtocol, NSCopying, NSMutableCopying>
/// The properties dictionary on a BCOVVideo object can contain
/// any of the following keys. These can be used when
/// manually initializing a BCOVVideo, like initWithSource:cuePoints:properties
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyAccountId;)
+ (NSString * _Nonnull)PropertyKeyAccountId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyDescription;)
+ (NSString * _Nonnull)PropertyKeyDescription SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyDuration;)
+ (NSString * _Nonnull)PropertyKeyDuration SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyEconomics;)
+ (NSString * _Nonnull)PropertyKeyEconomics SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyId;)
+ (NSString * _Nonnull)PropertyKeyId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyLongDescription;)
+ (NSString * _Nonnull)PropertyKeyLongDescription SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyName;)
+ (NSString * _Nonnull)PropertyKeyName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyPoster;)
+ (NSString * _Nonnull)PropertyKeyPoster SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyPosterSources;)
+ (NSString * _Nonnull)PropertyKeyPosterSources SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyProjection;)
+ (NSString * _Nonnull)PropertyKeyProjection SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyReferenceId;)
+ (NSString * _Nonnull)PropertyKeyReferenceId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyTags;)
+ (NSString * _Nonnull)PropertyKeyTags SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyTextTracks;)
+ (NSString * _Nonnull)PropertyKeyTextTracks SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyThumbnail;)
+ (NSString * _Nonnull)PropertyKeyThumbnail SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyThumbnailSources;)
+ (NSString * _Nonnull)PropertyKeyThumbnailSources SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyVariants;)
+ (NSString * _Nonnull)PropertyKeyVariants SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyManifestURLTTL;)
+ (NSString * _Nonnull)PropertyKeyManifestURLTTL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyPolicyKey;)
+ (NSString * _Nonnull)PropertyKeyPolicyKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyCatalogResponseTime;)
+ (NSString * _Nonnull)PropertyKeyCatalogResponseTime SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) BCOVCuePointCollection * _Nullable cuePoints;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
@property (nonatomic, readonly, copy) NSArray<BCOVSource *> * _Nonnull sources;
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailVTTURL;
@property (nonatomic) enum BCOVEconomics economics;
/// Returns <code>true</code> if this video object can be downloaded for offline playback
@property (nonatomic, readonly) BOOL canBeDownloaded;
/// Returns YES if this video object has a source using FairPlay encryption
/// This applies to videos retrieved from Dynamic Delivery accounts only.
@property (nonatomic, readonly) BOOL usesFairPlay;
/// Returns YES if this instance refers to an offline video.
/// Use the <code>playableOffline</code> property to determine if the
/// video is playable offline.
@property (nonatomic, readonly) BOOL offline;
/// Returns <code>false</code> if the video has not completed downloading,
/// or if the video has been purged and needs to be re-downloaded.
/// This happens automatically if iOS needs to reclaim storage space
/// for proper functioning of the device.
/// On some versions of iOS <code>playableOffline</code> may return <code>false</code> if the offline video is already
/// loaded up in an instance of AVPlayer. Calling <code>removeAllItems</code>
/// on the current instance of <code>AVQueuePlayer</code> prior to checking
/// should result in the expected value of <code>true</code> being returned.
@property (nonatomic, readonly) BOOL playableOffline;
/// A string representation of an error code for an unplayable video
@property (nonatomic, readonly, copy) NSString * _Nullable errorCode;
/// A string representation of an error sub code for an unplayable video
@property (nonatomic, readonly, copy) NSString * _Nullable errorSubCode;
/// A error emssage string for an unplayable video
@property (nonatomic, readonly, copy) NSString * _Nullable errorMessage;
/// Returns <code>false</code> if <code>errorCode</code>, <code>errorSubCode</code> and <code>errorMessage</code> are all nil
/// otherwise if any of those properties have a vaile will return <code>true</code>
@property (nonatomic, readonly) BOOL hasError;
/// Constructs a new video with the specified sources, cue points, and
/// properties.
/// When using this initializer you can take advantage of the
/// BCOVVideo.PropertyKey constants to create the properties dictionary. You can find
/// constants for the keys that this SDK uses with this dictionary near the top of this header file.
/// \param sources The sources of this video.
///
/// \param cuePoints The cue points associated to this video.
///
/// \param properties The metadata or properties associated to this video.
///
///
/// returns:
/// A new video with the specified sources, cue points, and properties.
- (nonnull instancetype)initWithSources:(NSArray<BCOVSource *> * _Nullable)sources cuePoints:(BCOVCuePointCollection * _Nullable)cuePoints properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
/// Constructs a new video with a single specified source, the specified cue
/// points, and the specified properties.
/// When using this initializer you can take advantage of the
/// kBCOVVideoPropertyKey constants to create the properties dictionary. You can find
/// constants for the keys that this SDK uses with this dictionary near the top of this header file.
/// \param source The sole source of this video.
///
/// \param cuePoints The cue points associated to this video.
///
/// \param properties The metadata or properties associated to this video.
///
///
/// returns:
/// A new video with a single source, as well as the specified cue points and properties.
- (nonnull instancetype)initWithSource:(BCOVSource * _Nullable)source cuePoints:(BCOVCuePointCollection * _Nullable)cuePoints properties:(NSDictionary * _Nullable)properties;
/// Constructs a new video with with error information.
/// When attempting to retreive a video the server may an
/// error. The error may be caused due to various restrictions  other reasons.
/// The information is stored on the BCOVideo object for informative purposes.
/// \param errorCode The error code
///
/// \param errorSubCode The error sub-code
///
/// \param errorMessage The error message
///
/// \param properties The metadata or properties associated to this video.
///
///
/// returns:
/// A new video with error information attributes
- (nonnull instancetype)initWithErrorCode:(NSString * _Nullable)errorCode errorSubCode:(NSString * _Nullable)errorSubCode errorMessage:(NSString * _Nullable)errorMessage properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
/// Returns <code>true</code> if <code>video</code> is equivalent to this instance.
/// \param video The video to test for equivalence with this instance.
///
///
/// returns:
/// Whether <code>video</code> is equivalent to this instance.
- (BOOL)isEqualToVideo:(BCOVVideo * _Nullable)video SWIFT_WARN_UNUSED_RESULT;
/// Returns a new video with a single source containing the specified URL.
/// \param url The URL of the source to be created and associated to the new video.
///
///
/// returns:
/// A new video with a source containing the specified URL.
+ (BCOVVideo * _Nonnull)videoWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Returns a new video with a single source containing the specified URL
/// and a delivery method as BCOVSource.DeliveryHLS.
/// \param url The URL of the source to be created and associated to the new video.
///
///
/// returns:
/// A new video with a source containing the specified URL.
+ (BCOVVideo * _Nonnull)videoWithHLSSourceURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Returns a new video with a single source containing the specified URL.
/// \param url The URL of the source to be created and associated to the new video.
///
/// \param deliveryMethod The delivery method for this source. See BCOVSource for options.
///
///
/// returns:
/// A new video with a source containing the specified URL.
+ (BCOVVideo * _Nonnull)videoWithURL:(NSURL * _Nonnull)url deliveryMethod:(NSString * _Nullable)deliveryMethod SWIFT_WARN_UNUSED_RESULT;
- (BCOVVideo * _Nonnull)update:(SWIFT_NOESCAPE void (^ _Nonnull)(BCOVMutableVideo * _Nonnull))updateBlock SWIFT_WARN_UNUSED_RESULT;
/// Pass nil to get the video name for the device locale or
/// the preferred description if the device locale is not available.
/// \param locale The desired locale to use for variant matching
///
///
/// returns:
/// The value for the specified locale or the preferred description
- (NSString * _Nullable)localizedNameForLocale:(NSLocale * _Nullable)locale SWIFT_WARN_UNUSED_RESULT;
/// Pass nil to get the short description for the device locale or
/// the preferred description if the device locale is not available.
/// \param locale The desired locale to use for variant matching
///
///
/// returns:
/// The value for the specified locale or the preferred description
- (NSString * _Nullable)localizedShortDescriptionForLocale:(NSLocale * _Nullable)locale SWIFT_WARN_UNUSED_RESULT;
/// Pass nil to get the long description for the device locale or
/// the preferred description if the device locale is not available.
/// \param locale The desired locale to use for variant matching
///
///
/// returns:
/// The value for the specified locale or the preferred description
- (NSString * _Nullable)localizedLongDescriptionForLocale:(NSLocale * _Nullable)locale SWIFT_WARN_UNUSED_RESULT;
/// Loops through language variants on this video and attempt to match it
/// with one of the languages provided.
/// The first match found will be returned.
/// If no result is found a <code>nil</code> value is returned.
/// \param preferredLanguages Array of preferred languages with which
/// to attempt a match. Use with <code>NSLocale.preferredLanguages</code>
///
- (NSDictionary * _Nullable)variantForPreferredLanguages:(NSArray<NSString *> * _Nonnull)preferredLanguages SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19BrightcovePlayerSDK16BCOVMutableVideo")
@interface BCOVMutableVideo : BCOVVideo
@property (nonatomic, strong) BCOVCuePointCollection * _Nullable cuePoints;
@property (nonatomic, copy) NSDictionary * _Nonnull properties;
@property (nonatomic, copy) NSArray<BCOVSource *> * _Nonnull sources;
@property (nonatomic, copy) NSURL * _Nullable thumbnailVTTURL;
- (nonnull instancetype)initWithSources:(NSArray<BCOVSource *> * _Nullable)sources cuePoints:(BCOVCuePointCollection * _Nullable)cuePoints properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithErrorCode:(NSString * _Nullable)errorCode errorSubCode:(NSString * _Nullable)errorSubCode errorMessage:(NSString * _Nullable)errorMessage properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end


/// The following keys are used to access values in the the
/// BCOVVideo’s properties dictionary
SWIFT_CLASS("_TtC19BrightcovePlayerSDK16BCOVOfflineVideo")
@interface BCOVOfflineVideo : NSObject
/// Offline video token properties dictionary key
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TokenPropertyKey;)
+ (NSString * _Nonnull)TokenPropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the time that the offline
/// video FairPlay license was requested.
/// This time is stored as the number of seconds since the
/// standard <code>Date</code> reference date.
/// You can generate a <code>Date</code> object from this as follows:
/// \code
/// Date(timeIntervalSinceReferenceDate: number)
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LicenseRequestTimePropertyKey;)
+ (NSString * _Nonnull)LicenseRequestTimePropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the time that the offline
/// video FairPlay license will expire. After this time, you can no longer
/// begin playback on the associated video.
/// This time is stored as the floating point number of seconds since the
/// standard <code>Date</code> reference date.
/// You can generate a <code>Date</code> object from this as follows:
/// \code
/// Date(timeIntervalSinceReferenceDate: number)
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LicenseAbsoluteExpirationTimePropertyKey;)
+ (NSString * _Nonnull)LicenseAbsoluteExpirationTimePropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the time that the video
/// first started playback. If a playDuration value was used for the
/// video’s license then you can use this value in addition to the
/// value from <code>BCOVFairPlayLicense/PlayDurationKey</code> to determine
/// when the dual-expiry license will expire.
/// This time is stored as the floating point number of seconds since the
/// standard <code>Date</code> reference date.
/// You can generate a <code>Date</code> object from this as follows:
/// \code
/// Date(timeIntervalSinceReferenceDate: number)
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull InitialPlaybackTimeKey;)
+ (NSString * _Nonnull)InitialPlaybackTimeKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the time that the offline
/// video download was initially requested.
/// This time is stored as the floating point number of seconds since the
/// standard <code>Date</code> reference date.
/// You can generate a <code>Date</code> object from this as follows:
/// \code
/// Date(timeIntervalSinceReferenceDate: number)
///
/// \endcodeThis value is useful when sorting by the time each download process started.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DownloadStartTimePropertyKey;)
+ (NSString * _Nonnull)DownloadStartTimePropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the time that the offline
/// video download completed (whether normally, cancelled, or failed).
/// This time is stored as the floating point number of seconds since the
/// standard <code>Date</code> reference date.
/// You can generate a <code>Date</code> object from this as follows:
/// \code
/// Date(timeIntervalSinceReferenceDate: number)
///
/// \endcodeThis value is useful when sorting by the time each download completes.
/// This value is zero until the download completes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DownloadEndTimePropertyKey;)
+ (NSString * _Nonnull)DownloadEndTimePropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the URL of the original online video
/// that was downloaded to storage for this BCOVVideo object, as an <code>String</code>.
/// Note that this URL may have expired, so this is primarily useful as a reference.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull OnlineSourceURLPropertyKey;)
+ (NSString * _Nonnull)OnlineSourceURLPropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the name of the
/// downloaded thumbnail image file in device storage, as an <code>String</code>.
/// This name is used to generate the full path of the file at runtime.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ThumbnailNamePropertyKey;)
+ (NSString * _Nonnull)ThumbnailNamePropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the full path to the
/// downloaded thumbnail image file in device storage, as an <code>String</code>.
/// Even if the path is present, the image file may not be present.
/// Due to app sandboxing, this path will likely change each time
/// the app is launched, so you should not store the full path.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ThumbnailFilePathPropertyKey;)
+ (NSString * _Nonnull)ThumbnailFilePathPropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the name of the
/// downloaded poster image file in device storage, as an <code>String</code>.
/// This name is used to generate the full path of the file at runtime.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PosterNamePropertyKey;)
+ (NSString * _Nonnull)PosterNamePropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the full path to the
/// downloaded poster image file in device storage, as an <code>String</code>.
/// Even if the path is present, the image file may not be present.
/// Due to app sandboxing, this path will likely change each time
/// the app is launched, so you should not store the full path.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PosterFilePathPropertyKey;)
+ (NSString * _Nonnull)PosterFilePathPropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the relative file path
/// of the downloaded HLS video bundle in device storage, as an <code>String</code>.
/// This path is used to generate the full path of the file at runtime.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull RelativeFilePathPropertyKey;)
+ (NSString * _Nonnull)RelativeFilePathPropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the full path to the
/// downloaded HLS video bundle in device storage, as an <code>String</code>.
/// Due to app sandboxing, this path will likely change each time
/// the app is launched, so you should not store the full path.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FilePathPropertyKey;)
+ (NSString * _Nonnull)FilePathPropertyKey SWIFT_WARN_UNUSED_RESULT;
/// The BCOVSourceMediaType of this offline video.
/// Will either be BCOVSourceMediaTypeAudio or BCOVSourceMediaTypeAudioVideo
/// and stored as an <code>NSNumber</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MediaType;)
+ (NSString * _Nonnull)MediaType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BCOVOfflineVideoManagerDelegate;
@class AVMediaSelection;
@class AVAssetDownloadConfiguration;
@class BCOVOfflineVideoStatus;
@class AVURLAsset;
@class AVMediaSelectionGroup;
@class AVMediaSelectionOption;

/// BCOVOfflineVideoManager
/// This singleton class handles most aspects of video file downloading
SWIFT_CLASS("_TtC19BrightcovePlayerSDK23BCOVOfflineVideoManager")
@interface BCOVOfflineVideoManager : NSObject
/// Error domain for the Offline Video Manager.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorDomain;)
+ (NSString * _Nonnull)ErrorDomain SWIFT_WARN_UNUSED_RESULT;
/// NSNotification name for a warning sent when analytics files related to
/// offline playback have reached 500 MiB. This can happen if a user
/// plays lots of offline video (over 1000 hours) but has not been online
/// in a long time.
/// Analytics will not continue to grow beyond this point, but in order for
/// you to collect accurate data about your app usage, you may want to encourage
/// the user to go back online so that analytics data can be transferred.
/// If analytics storage remains full, older, less-important events (like
/// engagement events) will be dropped to make room for video view events.
/// Register for this warning using the NSNotificationCenter.defaultCenter.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AnalyticsStorageFullWarningNotification;)
+ (NSString * _Nonnull)AnalyticsStorageFullWarningNotification SWIFT_WARN_UNUSED_RESULT;
/// NSDictionary key used to set an option passed to
/// <code>initializeOfflineVideoManager(withDelegate:options:)</code>.
/// If set to <code>true</code>, connections will be allowed over cellular networks.
/// If <code>false</code>, cellular connections will not be allowed.
/// Default value is <code>false</code>.
/// Corresponds directly to NSURLSessionConfiguration’s allowCellularAccess property.
/// Changing this value will not have an effect on active downloads; only downloads
/// initialized after the value has been changed will be affected.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AllowsCellularDownloadKey;)
+ (NSString * _Nonnull)AllowsCellularDownloadKey SWIFT_WARN_UNUSED_RESULT;
/// NSDictionary key used to set an option passed to
/// <code>initializeOfflineVideoManager(withDelegate:options:)</code>.
/// If set to <code>true</code>, playback of offline content is allowed to access the internet
/// over a cellular connection.
/// If <code>false</code>, cellular connections will not be allowed during playback.
/// Network activity can be triggered if you request a media option that has not
/// been downloaded.
/// Corresponds directly to AVURLAsset option’s AVURLAssetAllowsCellularAccessKey property.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AllowsCellularPlaybackKey;)
+ (NSString * _Nonnull)AllowsCellularPlaybackKey SWIFT_WARN_UNUSED_RESULT;
/// NSDictionary key used to set an option passed to
/// <code>initializeOfflineVideoManager(withDelegate:options:)</code>.
/// If set to <code>true</code>, analytics data related to playback of offline content
/// will be transmitted over cellular networks.
/// If <code>false</code>, cellular connections will not be used for transmission of
/// analytics data.
/// The default value is <code>true</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AllowsCellularAnalyticsKey;)
+ (NSString * _Nonnull)AllowsCellularAnalyticsKey SWIFT_WARN_UNUSED_RESULT;
/// NSDictionary key used to set an option passed to
/// <code>initializeOfflineVideoManager(withDelegate:options:)</code>.
/// You can pass an NSNumber with this key to set the maximum storage space
/// allowed for holding offline analytics data.
/// If a user doesn’t come online for a while, analytics data will collect
/// until this limit is reached. Once reached, only video_view events will
/// be stored, and other events will start being dropped.
/// The default value is 524288000 (500 MiB).
/// The minimum settable value is 1.0 MiB.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AnalyticsStorageLimitKey;)
+ (NSString * _Nonnull)AnalyticsStorageLimitKey SWIFT_WARN_UNUSED_RESULT;
/// The following keys are used to specify values in the parameters dictionary
/// passed to <code>requestVideoDownload(_:mediaSelections:parameters:completion:)</code>
/// When this <code>Int</code> value is set, the Offline Video Manager will download a rendition
/// with the largest bitrate less than or equal to this value.
/// If no rendition can be found with a bitrate that is smaller than or equal to
/// this bitrate, the lowest rendition will be downloaded.
/// If this value is zero or not specified, the lowest rendition with video will be downloaded.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull RequestedBitrateKey;)
+ (NSString * _Nonnull)RequestedBitrateKey SWIFT_WARN_UNUSED_RESULT;
/// This is an String that determines the name of the video
/// displayed in the “Downloaded Videos” section of the
/// iOS Settings/iPad+iPhone Storage/Downloaded Videos view
/// seen in iOS 11+.
/// If this option is not set, the <code>name</code> properties
/// on the video will be used instead.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DisplayNameKey;)
+ (NSString * _Nonnull)DisplayNameKey SWIFT_WARN_UNUSED_RESULT;
/// Proxy object that handles specific subtasks of FairPlay key exchange
/// as defined by the BCOVFPSAuthorizationProxy protocol.
@property (nonatomic, strong) id <BCOVFPSAuthorizationProxy> _Nonnull authProxy;
/// Delegate for this BCOVOfflineVideoManager.
@property (nonatomic, strong) id <BCOVOfflineVideoManagerDelegate> _Nullable delegate;
/// Returns an array of all the offline video tokens.
/// Each token refers to a video download in device storage,
/// including videos that are currently being downloaded,
/// and videos that were cancelled, paused, or failed.
@property (nonatomic, readonly, copy) NSArray<BCOVOfflineVideoToken> * _Nonnull offlineVideoTokens;
/// The shared instance used to access the singleton BCOVOfflineVideoManager object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BCOVOfflineVideoManager * _Nullable sharedManager;)
+ (BCOVOfflineVideoManager * _Nullable)sharedManager SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize the Offline Video Manager.
/// This should be the first call to the Offline Video Manager.
/// You can call this method again to update the delegate and options.
/// \param delegate The delegate object conforming to the BCOVOfflineVideoManagerDelegate protocol.
///
/// \param options An NSDictionary of options.  The only valid dictionary entries are
/// <code>BCOVOfflineVideoManager/AllowsCellularDownloadKey</code>,
/// <code>BCOVOfflineVideoManager/AllowsCellularPlaybackKey</code>,
/// <code>BCOVOfflineVideoManager/AllowsCellularAnalyticsKey</code>, and
/// <code>BCOVOfflineVideoManager/AnalyticsStorageLimitKey</code>.
///
+ (void)initializeOfflineVideoManagerWithDelegate:(id <BCOVOfflineVideoManagerDelegate> _Nonnull)delegate options:(NSDictionary * _Nullable)options;
/// Initiate a request for a video download.
/// If you are using FairPlay videos with Video Cloud Dynamic Delivery, FairPlay
/// application certificates will be downloaded automatically and used as needed.
/// If you are using legacy Video Cloud FairPlay videos, you should add any
/// needed application certificates to the BCOVOfflineVideoManger before
/// initiating a download, using <code>addFairPlayApplicationCertificate(_:identifier:)</code>.
/// \param video BCOVVideo to be downloaded. The video should have an HLS
/// source with an HTTPS scheme, and may use FairPlay encryption.
///
/// \param mediaSelections An array of AVMediaSelections to be downloaded, in addition
/// to the main video. The available AVMediaSelections for a BCOVVideo can be retrieved by calling
/// <code>urlAsset(forVideo:)</code> followed by <code>-[AVAsset preferredMediaSelection]</code> or <code>-[AVAsset allMediaSelections]</code>.
///
/// \param parameters NSDictionary of parameters used in this download request.
/// May be nil if the license was preloaded using the <code>preloadFairPlayLicense(_:parameters:completion:)</code> method.
/// Valid parameters are:
/// <code>BCOVOfflineVideoManager/RequestedBitrateKey</code>, <code>BCOVFairPlayLicense/PurchaseKey</code>,
/// <code>BCOVFairPlayLicense/RentalDurationKey</code>.
///
/// \param completionHandler A block that receives the new offlineVideoToken after the request
/// is successfully made. If there is an error, offlineVideoToken will
/// be nil, and error will report any NSError.
///
- (void)requestVideoDownload:(BCOVVideo * _Nonnull)video mediaSelections:(NSArray<AVMediaSelection *> * _Nullable)mediaSelections parameters:(NSDictionary * _Nullable)parameters completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
/// Initiate a request for a video download.
/// If you are using FairPlay videos with Video Cloud Dynamic Delivery, FairPlay
/// application certificates will be downloaded automatically and used as needed.
/// If you are using legacy Video Cloud FairPlay videos, you should add any
/// needed application certificates to the BCOVOfflineVideoManger before
/// initiating a download, using <code>addFairPlayApplicationCertificate(_:identifier:)</code>.
/// \param video BCOVVideo to be downloaded. The video should have an HLS
/// source with an HTTPS scheme, and may use FairPlay encryption.
///
/// \param downloadConfiguration Blah blah.
///
/// \param inParameters NSDictionary of parameters used in this download request.
/// May be nil. Valid parameters are:
/// <code>BCOVOfflineVideoManager/RequestedBitrateKey</code>, <code>BCOVFairPlayLicense/PurchaseKey</code>,
/// <code>BCOVFairPlayLicense/RentalDurationKey</code>.
///
/// \param completionHandler A block that receives the new offlineVideoToken after the request
/// is successfully made. If there is an error, offlineVideoToken will
/// be nil, and error will report any NSError.
///
- (void)requestVideoDownload:(BCOVVideo * _Nonnull)video downloadConfiguration:(AVAssetDownloadConfiguration * _Nonnull)downloadConfiguration parameters:(NSDictionary * _Nullable)inParameters completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler SWIFT_AVAILABILITY(ios,introduced=15.0);
/// Returns an array of the status of all video downloads,
/// including videos that are currently being downloaded,
/// and videos that were cancelled, paused, or failed.
/// All objects in the array are copies, so although you can modify an object,
/// it will have no effect on the download manager.
/// This method provides information about each download, like the download status,
/// start time, progress percent, underlying AVAssetDownloadTask,
/// and error (if any when complete).
///
/// returns:
/// an array of the status of all video downloads,
/// including videos that are currently being downloaded,
/// and videos that were cancelled, paused, or failed.
- (NSArray<BCOVOfflineVideoStatus *> * _Nonnull)offlineVideoStatus SWIFT_WARN_UNUSED_RESULT;
/// Returns a copy of the BCOVOfflineVideoStatus object for a specific video download.
/// BCOVOfflineVideoStatus provides information about the download, like the download status,
/// start time, progress percent, underlying AVAggregateAssetDownloadTask, and error (if any when complete).
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
///
/// returns:
/// a copy of the BCOVOfflineVideoStatus object for a specific video download.
- (BCOVOfflineVideoStatus * _Nullable)offlineVideoStatusForToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken SWIFT_WARN_UNUSED_RESULT;
/// Pause a current video download task.
/// \param offlineVideoToken Offline video token used to identify the download task.
///
- (void)pauseVideoDownload:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken;
/// Resume a suspended video download task
/// \param offlineVideoToken Offline video token used to identify the download task.
///
- (void)resumeVideoDownload:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken;
/// Cancel a video download task
/// \param offlineVideoToken Offline video token used to identify the download task.
///
- (void)cancelVideoDownload:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken;
/// Delete all files in local storage related to this offline video token.
/// offlineVideoToken will be considered invalid after this call.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
- (void)deleteOfflineVideo:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken;
/// Estimate the size of a video download in megabytes.
/// This method calls the completion handler with an estimate of the video size
/// of the largest rendition in the HLS manifest, in megabytes.
/// If there are any problems retrieving the value, <code>error</code> will be set,
/// and <code>megabytes</code> will be zero.
/// The completion handler is not called on any specific thread.
/// You should switch to the main thread if you need to perform
/// any UI work. It may be called synchronously or asynchronously.
/// \param video The BCOVVideo object from Video Cloud. The video object should
/// contain a valid HLS source.
///
/// \param options NSDictionary of options used in this request. Use the
/// <code>BCOVOfflineVideoManager/RequestedBitrateKey</code> to specify the bitrate you plan to download.
///
/// \param completionHandler A block that receives the estimated size of the video after
/// the request is successfully made. If there is an error,
/// <code>megabytes</code> will be set to zero, and <code>error</code> will report any NSError.
///
- (void)estimateDownloadSize:(BCOVVideo * _Nonnull)video options:(NSDictionary * _Nonnull)options completion:(void (^ _Nonnull)(double, NSError * _Nullable))completionHandler;
/// Given a BCOVVideo, returns an AVURLAsset which represents the
/// video source that will be used for offline downloads. BCOVVideo objects can
/// contain multiple video sources with the preferred source being secure and appropriate
/// for playback on iOS. Do not use this method in the context of online playback.
/// \param video The BCOVVideo object from Video Cloud. The video object should
/// contain a valid HLS source.
///
///
/// throws:
/// An error if there is no source for the video
///
/// returns:
/// an AVURLAsset which represents the
/// video source that will be used for offline downloads.
- (AVURLAsset * _Nullable)urlAssetForVideo:(BCOVVideo * _Nonnull)video error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Retrieve an array of NSDictionary objects, one for each variant stream
/// in the specified online HLS video.
/// Each dictionary contains a key:value pair for each of the variant stream’s
/// attributes as specified by its corresponding EXT-X-STREAM-INF tag in the
/// HLS manifest.
/// These attributes can be used when selecting a particular bitrate for download.
/// If all you need are the bitrate values, use <code>variantBitrates(forVideo:completion:)</code>.
/// The completion handler is not called on any specific thread. You should switch to
/// the main thread if you need to perform any UI work. It may be called
/// synchronously or asynchronously.
/// \param video The BCOVVideo object from Video Cloud. The video object should
/// contain a valid online HLS source.
///
/// \param completionHandler Block that receives the array of variant attributes
/// NSDictionary objects if the request is successfully made. If there is an error,
/// <code>variantAttributesDictionariesArray</code> will be nil, and <code>error</code> will report any NSError.
///
- (void)variantAttributesDictionariesForVideo:(BCOVVideo * _Nonnull)video completion:(void (^ _Nonnull)(NSArray<NSDictionary *> * _Nullable, NSError * _Nullable))completionHandler;
/// Retrieve an array of NSDictionary objects, one for each alternative rendition
/// in the specified online HLS video. Alternative renditions include captions,
/// subtitles, and secondary audio tracks.
/// Each dictionary contains a key:value pair for each of the rendition’s
/// attributes as specified by its corresponding EXT-X-MEDIA tag in the
/// HLS manifest. These attributes can be used to determine what languages are
/// available for text and audio tracks, so that these languages can be presented to
/// the end user, or selected for download yourself based on the locale or some other
/// criteria.
/// The completion handler is not called on any specific
/// thread. You should switch to the main thread if you need to perform
/// any UI work. It may be called synchronously or asynchronously.
/// \param video The BCOVVideo object from Video Cloud. The video object should contain
/// a valid online HLS source.
///
/// \param completionHandler A block that receives the array of rendition attributes NSDictionary
/// objects if the request is successfully made. If there is an error,
/// <code>alternativeRenditionAttributesDictionariesArray</code> will be nil, and <code>error</code>
/// will report any NSError.
///
- (void)alternativeRenditionAttributesDictionariesForVideo:(BCOVVideo * _Nonnull)video completion:(void (^ _Nonnull)(NSArray<NSDictionary *> * _Nullable, NSError * _Nullable))completionHandler;
/// Retrieve an array of available bitrates for the specified online HLS video.
/// The array will be sorted from smallest to largest bitrate.
/// The completion handler is not called on any specific thread. You should switch
/// to the main thread if you need to perform any UI work. It may be called
/// synchronously or asynchronously.
/// \param video The BCOVVideo object from Video Cloud. The video object should
/// contain a valid online HLS source.
///
/// \param completionHandler A block that receives the array of bitrates if the
/// request is successfully made. If there is an error, <code>bitrates</code> will be nil,
/// and <code>error</code> will report any NSError.
///
- (void)variantBitratesForVideo:(BCOVVideo * _Nonnull)video completion:(void (^ _Nonnull)(NSArray<NSNumber *> * _Nullable, NSError * _Nullable))completionHandler;
/// Convert an offline video token into a playable BCOVVideo object.
/// The returned BCOVVideo also contains all the new properties listed above,
/// such as the downloaded thumbnail and poster image file paths, FairPlay
/// license expiration date, download start and end times, and more.
/// If the downloadState of the video is <code>BCOVOfflineVideoDownloadState/stateCompleted</code> then
/// the video associated with the token will be cached. If you need to clear the cache for
/// any reason you can call <code>clearOfflineVideoCache()</code> on <code>BCOVOfflineVideoManager</code>.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
///
/// returns:
/// a BCOVVideo with all offline properties
- (BCOVVideo * _Nullable)videoObjectFromOfflineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken SWIFT_WARN_UNUSED_RESULT;
/// Clears cache of offline BCOVVideo objects
/// When <code>videoObject(fromOfflineVideoToken:)</code> is used with a video
/// which has a downloadState of <code>BCOVOfflineVideoDownloadStateCompleted</code>then
/// BCOVOfflienVideoManager will cache that object to increase performance. This method
/// will clean out the cache so that the next time <code>videoObject(fromOfflineVideoToken:)</code> is called
/// a brand new BCOVVideo object will be created.
- (void)clearOfflineVideoCache;
/// Preload the FairPlay license before a video download begins.
/// This will return an error if the video does not have a FairPlay source.
/// When downloading multiple FairPlay-protected videos, you should call this
/// method for each video to acquire a license for each one before beginning
/// any of the downloads. This ensures that videos can be properly stored even
/// when the downloads are initiated in the background.
/// \param video BCOVVideo to be downloaded. The video should have a source
/// that uses FairPlay encryption and the HTTPS scheme.
///
/// \param parameters NSDictionary of parameters used in this download request.
/// Valid parameters are:
/// <code>BCOVFairPlayLicense/PurchaseKey</code>, <code>BCOVFairPlayLicense/RentalDurationKey</code>.
///
/// \param completionHandler Block that receives the new offlineVideoToken after the request
/// is successfully made. If there is an error, offlineVideoToken will
/// be nil, and error will report any NSError.
///
- (void)preloadFairPlayLicense:(BCOVVideo * _Nonnull)video parameters:(NSDictionary * _Nonnull)parameters completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
/// Initiate a request for a new FairPlay license.
/// You can request a new FairPlay license any time after the initial license has been acquired.
/// In the parameters you can specify a new rental duration, or you can convert a rental license
/// to a purchase license.
/// The video does not need to be re-downloaded to use a new FairPlay license, but you do need
/// to retrieve a new video object from the Playback API (either directly or through
/// the BCOVPlaybackService class). If the referenced video is no longer available through the Playback API,
/// you can use a substantially similar video, meaning the video should be from the same account,
/// and also have the same FairPlay configuration.
/// You should not specify a bitrate in the parameters. To change the bitrate you need to delete
/// the current download, and then initiate a completely new download at the new bitrate.
/// \param offlineVideoToken Offline video token used to identify the downloaded video for which to acquire a new license.
///
/// \param onlineVideo BCOVVideo object for an online video object retrieved through the Playback API
/// or the BCOVPlaybackService class. This video must not have been created by ‘-videoObjectFromOfflineVideoToken:’.
///
/// \param parameters NSDictionary of parameters used in this license renewal request.
/// May be nil. Valid parameters are: <code>BCOVFairPlayLicense/PurchaseKey</code>,
/// <code>BCOVFairPlayLicense/RentalDurationKey</code>.
///
/// \param completionHandler A block that is called after the license renewal request has completed.
/// If the request resulted in an error, it will be returned here as an NSError.
/// The offlineVideoToken parameter will be the same offline video token that was
/// passed in as the first parameter.
///
- (void)renewFairPlayLicense:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken video:(BCOVVideo * _Nullable)onlineVideo parameters:(NSDictionary * _Nonnull)parameters completion:(void (^ _Nonnull)(BCOVOfflineVideoToken _Nullable, NSError * _Nullable))completionHandler;
/// Initiate a request for a new FairPlay license.
/// You can request a new FairPlay license any time after the initial license has been acquired.
/// In the parameters you can specify a new rental duration, or you can convert a rental license
/// to a purchase license.
/// The video does not need to be re-downloaded to use a new FairPlay license, but you do need
/// to retrieve a new video object from the Playback API (either directly or through
/// the BCOVPlaybackService class). If the referenced video is no longer available through the Playback API,
/// you can use a substantially similar video, meaning the video should be from the same account,
/// and also have the same FairPlay configuration.
/// You should not specify a bitrate in the parameters. To change the bitrate you need to delete
/// the current download, and then initiate a completely new download at the new bitrate.
/// \param offlineVideoToken Offline video token used to identify the downloaded video for which to acquire a new license.
///
/// \param video BCOVVideo object for an online video object retrieved through the Playback API
/// or the BCOVPlaybackService class. This video must not have been created by <code>videoObject(fromOfflineVideoToken:)</code>.
///
/// \param authToken The authentication token with which to validate the video’s license
///
/// \param parameters NSDictionary of parameters used in this license renewal request.
/// May be nil. Valid parameters are: <code>BCOVFairPlayLicense/PurchaseKey</code>,
/// <code>BCOVFairPlayLicense/RentalDurationKey</code>.
///
/// \param completionHandler A block that is called after the license renewal request has completed.
/// If the request resulted in an error, it will be returned here as an NSError.
/// The offlineVideoToken parameter will be the same offline video token that was
/// passed in as the first parameter.
///
- (void)renewFairPlayLicense:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken video:(BCOVVideo * _Nonnull)video authToken:(NSString * _Nullable)authToken parameters:(NSDictionary * _Nonnull)parameters completion:(void (^ _Nonnull)(BCOVOfflineVideoToken _Nullable, NSError * _Nullable))completionHandler;
/// This method is used to add a FairPlay application certificate to the
/// Offline Video Manager’s list of available FairPlay application certificates.
/// Certificates will be retained for the life of the application.
/// To remove a certificate, add the same identifier with a nil as the
/// certificate data.
/// If you are using Dynamic Delivery, application certificates are retrieved
/// automatically by the FairPlay plugin, so this method is not needed.
/// You can, however, use this method to pre-load your application certificate
/// to speed up playback of the first FairPlay-encrypted video.
/// Certificates are stored and re-used for subsequent videos.
/// This string may not be nil.
/// For Dynamic Delivery, the identifier must be the URL that was used to
/// retrieve this certificate.
/// For legacy Video Cloud accounts, this should be set to <code>kBCOVDefaultFairPlayApplicationCertificateIdentifier</code>
/// to apply to all accounts.
/// If you are using multiple legacy Video Cloud accounts, set this param to the acount ID.
/// \param applicationCertificateData The FairPlay application certificate in an NSData object.
/// If set to nil, any existing application certificate for the
/// given identifier will be removed.
///
/// \param identifier A string used to locate the application certificate.
///
- (void)addFairPlayApplicationCertificate:(NSData * _Nullable)applicationCertificateData identifier:(NSString * _Nonnull)identifier;
/// Invalidate the FairPlay license for the specified offline video token.
/// This method deletes the FairPlay license for the video associated with the
/// offline video token, if there is one.
/// Attempts to play back a FairPlay-protected video without a license will result
/// in a <code>BCOVOfflineVideoManagerErrorCode/InvalidLicense</code> error.
/// If needed you can request a new FairPlay license for the video after it has been deleted.
/// \param offlineVideoToken Offline video token used to identify the downloaded
/// video whose license will be invalidated.
///
- (void)invalidateFairPlayLicense:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken;
/// Returns an NSDate representing the expiration of the FairPlay license for the video
/// associated with the offline video token.
/// Returns NSDate.distantFuture for “purchase” licenses.
/// Returns NSDate.distantFuture if the video is not encrypted with FairPlay.
/// Returns nil if the video has no FairPlay license.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
///
/// returns:
/// NSDate representing the expiration of the FairPlay license, NSDate.distantFuture
/// for purchase licenses or clear (no FairPlay) videos, or nil if there is no license.
- (NSDate * _Nullable)fairPlayLicenseExpiration:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken SWIFT_WARN_UNUSED_RESULT;
/// Returns the media selection group for a downloaded video specified
/// by the offline video token.
/// The downloaded video must be complete, or this method will return nil.
/// \param mediaCharacteristic The media characteristic that you are interested in.
/// Supported values are AVMediaCharacteristicAudible and AVMediaCharacteristicLegible.
///
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
/// Must not refer to a download in progress.
///
///
/// returns:
/// the media selection group for a downloaded video specified
/// by the offline video token.
- (AVMediaSelectionGroup * _Nullable)mediaSelectionGroupForMediaCharacteristic:(AVMediaCharacteristic _Nonnull)mediaCharacteristic offlineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken SWIFT_WARN_UNUSED_RESULT;
/// Returns the downloaded media selection options for a downloaded video specified
/// by the offline video token, as reported by the AVMediaCache for the
/// underlying AVURLAsset. May return nil.
/// \param mediaCharacteristic The media characteristic that you are interested in.
/// Supported values are AVMediaCharacteristicAudible and AVMediaCharacteristicLegible.
///
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
///
/// returns:
/// the downloaded media selection options for a downloaded video specified
/// by the offline video token, as reported by the AVMediaCache for the
/// underlying AVURLAsset. May return nil.
- (NSArray<AVMediaSelectionOption *> * _Nullable)downloadedMediaSelectionOptionsForMediaCharacteristic:(AVMediaCharacteristic _Nonnull)mediaCharacteristic offlineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken SWIFT_WARN_UNUSED_RESULT;
@end

@class NSURLSessionTask;

@interface BCOVOfflineVideoManager (SWIFT_EXTENSION(BrightcovePlayerSDK)) <NSURLSessionDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
@end

@class AVPersistableContentKeyRequest;

@interface BCOVOfflineVideoManager (SWIFT_EXTENSION(BrightcovePlayerSDK)) <AVContentKeySessionDelegate>
- (void)contentKeySession:(AVContentKeySession * _Nonnull)session didProvideContentKeyRequest:(AVContentKeyRequest * _Nonnull)keyRequest;
- (void)contentKeySession:(AVContentKeySession * _Nonnull)session contentKeyRequest:(AVContentKeyRequest * _Nonnull)keyRequest didFailWithError:(NSError * _Nonnull)err;
- (void)contentKeySession:(AVContentKeySession * _Nonnull)session didProvidePersistableContentKeyRequest:(AVPersistableContentKeyRequest * _Nonnull)keyRequest;
@end

@class AVAggregateAssetDownloadTask;
@class NSValue;
@class AVAssetDownloadTask;
@class AVAssetVariant;

@interface BCOVOfflineVideoManager (SWIFT_EXTENSION(BrightcovePlayerSDK)) <AVAssetDownloadDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session aggregateAssetDownloadTask:(AVAggregateAssetDownloadTask * _Nonnull)aggregateAssetDownloadTask willDownloadToURL:(NSURL * _Nonnull)location;
- (void)URLSession:(NSURLSession * _Nonnull)session aggregateAssetDownloadTask:(AVAggregateAssetDownloadTask * _Nonnull)aggregateAssetDownloadTask didCompleteForMediaSelection:(AVMediaSelection * _Nonnull)mediaSelection;
- (void)URLSession:(NSURLSession * _Nonnull)session aggregateAssetDownloadTask:(AVAggregateAssetDownloadTask * _Nonnull)aggregateAssetDownloadTask didLoadTimeRange:(CMTimeRange)timeRange totalTimeRangesLoaded:(NSArray<NSValue *> * _Nonnull)loadedTimeRanges timeRangeExpectedToLoad:(CMTimeRange)timeRangeExpectedToLoad forMediaSelection:(AVMediaSelection * _Nonnull)mediaSelection;
- (void)URLSession:(NSURLSession * _Nonnull)session assetDownloadTask:(AVAssetDownloadTask * _Nonnull)assetDownloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
- (void)URLSession:(NSURLSession * _Nonnull)session assetDownloadTask:(AVAssetDownloadTask * _Nonnull)assetDownloadTask didLoadTimeRange:(CMTimeRange)timeRange totalTimeRangesLoaded:(NSArray<NSValue *> * _Nonnull)loadedTimeRanges timeRangeExpectedToLoad:(CMTimeRange)timeRangeExpectedToLoad;
- (void)URLSession:(NSURLSession * _Nonnull)session assetDownloadTask:(AVAssetDownloadTask * _Nonnull)assetDownloadTask willDownloadVariants:(NSArray<AVAssetVariant *> * _Nonnull)variants SWIFT_AVAILABILITY(ios,introduced=15.0);
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)session;
@end

@class NSURLSessionConfiguration;
@class BCOVPlaybackService;

/// Conform to this protocol to receive information about each video and
/// video track download.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK31BCOVOfflineVideoManagerDelegate_")
@protocol BCOVOfflineVideoManagerDelegate <NSObject>
@optional
/// This method is called after the background URLSessionConfiguration object
/// is created, and before it’s used to create the shared AVAssetDownloadURLSession
/// object that’s used to download videos.
/// You can use this configuration object to set various options specified for the
/// URLSessionConfiguration, such as the <code>discretionary</code> flag, or
/// the <code>HTTPMaximumConnectionsPerHost</code> setting.
/// You should <em>not</em> set the <code>allowsCellularAccess</code> property; that is set in the individual
/// download tasks.
/// \param backgroundSessionConfiguration the background session configuration
///
- (void)didCreateSharedBackgroundSesssionConfiguration:(NSURLSessionConfiguration * _Nonnull)backgroundSessionConfiguration;
/// Receive progress notification about track downloads in progress for a downloaded video.
/// If you want to pause/resume/cancel the task, you should use the methods available
/// in the BCOVOfflineVideoManager to perform those actions.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
/// \param aggregateDownloadTask The AVAggregateAssetDownloadTask for this set of video track downloads
///
/// \param progressPercent How far along the download has progressed, expressed as a percentage,
/// for this individual AVMediaSelection.
///
/// \param mediaSelection The AVMediaSelection for which this progress is reported.
///
- (void)offlineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken aggregateDownloadTask:(AVAggregateAssetDownloadTask * _Nonnull)aggregateDownloadTask didProgressTo:(NSTimeInterval)progressPercent forMediaSelection:(AVMediaSelection * _Nonnull)mediaSelection;
/// Receive progress notification about track downloads in progress for a downloaded video.
/// If you want to pause/resume/cancel the task, you should use the methods available
/// in the BCOVOfflineVideoManager to perform those actions. This delegate method will called when
/// downloading with an AVAssetDownloadConfiguration.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
/// \param assetDownloadTask The AVAssetDownloadTask for this set of video track downloads
///
/// \param progressPercent How far along the download has progressed, expressed as a percentage,
/// for this individual AVMediaSelection.
///
- (void)offlineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken assetDownloadTask:(AVAssetDownloadTask * _Nonnull)assetDownloadTask didProgressTo:(NSTimeInterval)progressPercent SWIFT_AVAILABILITY(ios,introduced=15.0);
/// Receive confirmation of which AVAssetVariants will be downloaded.
/// This delegate method will called when downloading with an AVAssetDownloadConfiguration.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
/// \param assetDownloadTask The AVAssetDownloadTask for this set of video track downloads
///
/// \param variants An array of AVAssetVariant objects that will be downloaded.
///
- (void)offlineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken assetDownloadTask:(AVAssetDownloadTask * _Nonnull)assetDownloadTask willDownloadVariants:(NSArray<AVAssetVariant *> * _Nonnull)variants SWIFT_AVAILABILITY(ios,introduced=15.0);
/// This method is called when an individual track download is complete.
/// \param offlineVideoToken Offline video token used to identify the offline video
/// for which tracks are being downloaded.
///
/// \param mediaSelection The AVMediaSelection that has finished downloading.
///
- (void)offlineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken didFinishMediaSelectionDownload:(AVMediaSelection * _Nonnull)mediaSelection;
/// This method is called when a download is complete.
/// If an error occurred during the download, error will be non-nil.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
/// \param error NSError encountered during the download process. nil if no error.
///
- (void)offlineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken didFinishDownloadWithError:(NSError * _Nullable)error;
/// This method is called when a download is paused.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
- (void)downloadWasPausedForOfflineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken;
/// This method is called when the static images (thumbnail and poster) associated
/// with a video are downloaded to storage.
/// File URLs for the downloaded images are stored as properties on a BCOVVideo
/// created from the offline video token using <code>BCOVOfflineVideoManager/videoObject(fromOfflineVideoToken:)</code>
/// The properties are retrieved using the <code>BCOVOfflineVideo/ThumbnailFilePathPropertyKey</code> and
/// <code>BCOVOfflineVideo/PosterFilePathPropertyKey</code> keys.
/// This method will be called even if no images could be retrieved, so be sure to
/// check the UIImage you create from the poster and thumbnail paths. The file
/// paths will be present, but there may be no images stored at those locations.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
- (void)didDownloadStaticImagesWithOfflineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken;
/// This method is called when cleaning up stranded downloads.
/// Downloads can be stranded if you force-quit an app during a download,
/// or reboot while the app is suspended.
/// You do not need to implement this method unless you are starting your own
/// video downloads outside the Brightcove SDK and don’t want your videos deleted.
/// This method is called when a video package is flagged for deletion, meaning
/// there is no record of it in the Brightcove SDK.
/// \param videoPackagePath Path to video package directory that is flagged as stranded.
///
///
/// returns:
/// If the file is one you recognize, you should return <code>false</code>.
/// Otherwise, returning <code>true</code> will cause the video package to be deleted.
/// If you do not implement this method, stranded downloads will
/// be deleted by default.
- (BOOL)shouldDeleteVideoPackage:(NSString * _Nonnull)videoPackagePath SWIFT_WARN_UNUSED_RESULT;
/// This method is called when the app is activated and offline video
/// storage changed while the app was not running or was in the background, for
/// example when the user deletes downloaded videos via the device Storage settings
/// in the General settings of the Settings app.
/// When called, you should update your UI to reflect the changes in
/// offline storage.
/// Detecting changes to offline video storage occurs whenever the app becomes active.
/// This method is called on the main thread.
- (void)offlineVideoStorageDidChange;
/// Called when the TTL token for the current source’s manifest has expired and needs to be refreshed.
/// You will want to implement this delegate method if you are using a BCOVPlaybackService with
/// a custom URL.
/// If you are using the default initilaizer for BCOVPlaybackService, <code>BCOVPlaybackService/init(withAccountId:policyKey:)</code>
/// you do not need to implement this delegate method.
/// If you return <code>nil</code>, or do not implement this method, an instance of BCOVPlaybackService will be
/// created internally with the <code>BCOVPlaybackService/init(withAccountId:policyKey:)</code> initializer.
/// \param video The video that requires a TTL token refresh.
///
///
/// returns:
/// An instance of BCOVPlaybackService that will be used to update the manifest TTL token.
- (BCOVPlaybackService * _Nullable)playbackServiceForManifestURLTTLUpdateForVideo:(BCOVVideo * _Nonnull)video SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, BCOVOfflineVideoManagerErrorCode, open) {
  BCOVOfflineVideoManagerErrorCodeInvalidParameter = 69300,
  BCOVOfflineVideoManagerErrorCodeUnsupported = 69301,
  BCOVOfflineVideoManagerErrorCodeDownloadFailure = 69302,
  BCOVOfflineVideoManagerErrorCodeExpiredLicense = 69303,
  BCOVOfflineVideoManagerErrorCodeInvalidLicense = 69304,
};


/// BCOVOfflineVideoStatus
/// This object keeps track of various pieces of information related
/// to video downloads.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK22BCOVOfflineVideoStatus")
@interface BCOVOfflineVideoStatus : NSObject <NSCopying>
/// Offline video token used to identify the downloaded video
@property (nonatomic, readonly, strong) BCOVOfflineVideoToken _Nullable offlineVideoToken;
/// The state of the current download
@property (nonatomic, readonly) BCOVOfflineVideoDownloadState downloadState;
/// The NSDate that this download was requested (not when it started)
@property (nonatomic, readonly, copy) NSDate * _Nullable downloadStartTime;
/// The NSDate that this download finished (successfully, cancelled, or with an error)
@property (nonatomic, readonly, copy) NSDate * _Nullable downloadEndTime;
/// The progress of the download, expressed as a percentage
@property (nonatomic, readonly) double downloadPercent;
/// The AVAggregateAssetDownloadTask associated with the download.
/// Will be set to nil once the download has completed.
@property (nonatomic, readonly, strong) AVAggregateAssetDownloadTask * _Nullable aggregateDownloadTask;
/// The AVAssetDownloadTask associated with the download.
/// Will be set to nil once the download has completed.
@property (nonatomic, readonly, strong) AVAssetDownloadTask * _Nullable assetDownloadTask;
/// The error associated with this download if a failure occurs.
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)initWithOfflineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken downloadTask:(AVAssetDownloadTask * _Nullable)downloadTask licenseRequestTime:(NSDate * _Nonnull)licenseRequestTime startTime:(NSDate * _Nullable)startTime OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (BCOVOfflineVideoStatus * _Nullable)createFromOfflineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@protocol BCOVPUIButtonAccessibilityDelegate;

/// A subclass of UIButton that contains two titles,
/// a primary and a secondary title.
/// This is used for buttons that change titles when they
/// toggle between two different states, like the play/pause button.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK13BCOVPUIButton")
@interface BCOVPUIButton : UIButton
/// The primary title is the default title; e.g. the “play” icon for the play button.
@property (nonatomic, copy) NSString * _Nullable primaryTitle;
/// The secondary title is the alternate title; e.g. “pause” for the play button.
@property (nonatomic, copy) NSString * _Nullable secondaryTitle;
@property (nonatomic, strong) id <BCOVPUIButtonAccessibilityDelegate> _Nullable accessibilityDelegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)addTarget:(id _Nullable)target action:(SEL _Nonnull)action forControlEvents:(UIControlEvents)controlEvents;
/// Show the primary or secondary button title text.
/// \param primary <code>true</code> displays the primary button title; otherwise the secondary title.
///
- (void)showPrimaryTitle:(BOOL)primary;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


/// A protocol that allows for users to easily override
/// the defeault values of OOTB control buttons’ accessibility labels
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK34BCOVPUIButtonAccessibilityDelegate_")
@protocol BCOVPUIButtonAccessibilityDelegate <NSObject>
- (NSString * _Nullable)accessibilityLabelForButton:(BCOVPUIButton * _Nonnull)button isPrimaryState:(BOOL)isPrimaryState SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

SWIFT_CLASS("_TtC19BrightcovePlayerSDK13BCOVPUICommon")
@interface BCOVPUICommon : NSObject
/// Icon font used by the PlayerUI.
+ (UIFont * _Nullable)iconFont SWIFT_WARN_UNUSED_RESULT;
/// Icon font used by the PlayerUI at specified font size.
/// \param fontSize Size of font to return.
///
///
/// returns:
/// Font at specified size.
+ (UIFont * _Nullable)iconFontWithSize:(CGFloat)fontSize SWIFT_WARN_UNUSED_RESULT;
/// Returns the unicode to be used with +iconFont or +iconFontWithSize:
/// for the given icon.
/// \param buttonIcon The icon to return unicode for.
///
///
/// returns:
/// Unicode string for the icon.
+ (NSString * _Nullable)fontUnicodeForButtonIcon:(BCOVPUIButtonIcon)buttonIcon SWIFT_WARN_UNUSED_RESULT;
/// Color used by the playback controls in their normal state, UIControlStateNormal.
/// Red:255.0/255.0 green:255/255.0 blue:255.0/255.0 alpha:1.0
+ (UIColor * _Nonnull)controlColorForNormalState SWIFT_WARN_UNUSED_RESULT;
/// Color used by the playback controls in their normal state, UIControlStateSelected.
/// Red:255.0/255.0 green:255/255.0 blue:255.0/255.0 alpha:1.0
+ (UIColor * _Nonnull)controlColorForSelectedState SWIFT_WARN_UNUSED_RESULT;
/// Color used by the playback controls in their normal state, UIControlStateHighlighted.
/// Red:128.0/255.0 green:128/255.0 blue:128.0/255.0 alpha:1.0
+ (UIColor * _Nonnull)controlColorForHighlightedState SWIFT_WARN_UNUSED_RESULT;
/// Color used by the playback controls in their normal state, UIControlStateDisabled.
/// Red:128.0/255.0 green:128/255.0 blue:128.0/255.0 alpha:0.8
+ (UIColor * _Nonnull)controlColorForDisabledState SWIFT_WARN_UNUSED_RESULT;
/// Color used by the Live button to indicate the stream is currently live.
/// Red:85.0/255.0 green:154.0/255.0 blue:66.0/255.0 alpha:1.0
+ (UIColor * _Nonnull)liveViewTitleColorForLive SWIFT_WARN_UNUSED_RESULT;
/// Color used by the progress slider maximum track tint.
/// Red:140.0/255.0 green:143.0/255.0 blue:140.0/255.0 alpha:1.0
+ (UIColor * _Nonnull)progressSliderMaximumTrackTintColor SWIFT_WARN_UNUSED_RESULT;
/// Color used by the progress slider minimum track tint.
/// Red:214.0/255.0 green:36.0/255.0 blue:133.0/255.0 alpha:1.0
+ (UIColor * _Nonnull)progressSliderMinimumTrackTintColor SWIFT_WARN_UNUSED_RESULT;
/// Color used by the progress slider buffered tint.
/// Red:255.0/255.0 green:255.0/255.0 blue:255.0/255.0 alpha:1.0
+ (UIColor * _Nonnull)progressSliderBufferProgressTintColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the default image for the volume view.
/// \param fontSize The size of the font to create the image with.
///
/// \param color The color to use.
///
///
/// returns:
/// The image.
+ (UIImage * _Nullable)imageForVolumeViewWithFontSize:(CGFloat)fontSize color:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// Default font size used by labels.
/// 16.
+ (CGFloat)defaultFontSizeForLabel SWIFT_WARN_UNUSED_RESULT;
/// Default font size used by buttons.
/// 22.
+ (CGFloat)defaultFontSizeForButton SWIFT_WARN_UNUSED_RESULT;
+ (UIView * _Nonnull)createContainerViewWithSuperview:(UIView * _Nonnull)superview SWIFT_WARN_UNUSED_RESULT;
+ (UIView * _Nonnull)createOverlayViewWithSuperview:(UIView * _Nonnull)superview SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)formatTimeForDisplay:(CMTime)time SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)imageForString:(NSString * _Nonnull)string font:(UIFont * _Nonnull)font color:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
+ (SEL _Nullable)actionSelectorFrom:(UIControlEvents)controlEvent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// BCOVPUILayoutView view objects are used to lay out controls in a
/// BCOVPUIBasicControlView. Layout views are typically created with
/// BCOVPUIBasicControlView’s +layoutViewWithControlFromTag:width:elasticity:
/// method, and contain a standard Player UI element such as a play button,
/// time code label, or progress slider.
/// You can also create empty layout views in which to add your own subviews.
/// The layout view properties determine exactly how the views are positioned
/// with respect to each other in variable-width layouts.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK17BCOVPUILayoutView")
@interface BCOVPUILayoutView : UIView
/// The smallest width that will be set for the view when resized for layout.
/// If elasticity is set to zero, this will be the exact width of the view.
@property (nonatomic) float minimumWidth;
/// Elasticity determines how much each view is resized to fill the available
/// width of the Player UI’s control bar relative to all other views.
/// If there are two layout views in a control bar, and one has an elasticity
/// of 1.0, and the other has an elasticity of 2.0, the latter will grow twice
/// as much when the view is resized.
/// Each row of a control layout should typically contain at least one layout
/// view with an elasticity greater than zero.
/// A view with an elasticity of zero will remain at its minimum width.
@property (nonatomic) float elasticity;
/// The “isRemoved” property can be set to <code>true</code> or <code>false</code> to quickly hide or show
/// a particular layout view. This is more efficient than setting an entirely
/// new BCOVPUIControlLayout with a removed or added view.
/// Call -setNeedsLayout on the BCOVPUIBasicControlView after setting
/// this property to show the new layout.
@property (nonatomic) BOOL isRemoved;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A subclass of UISlider that provides a “buffered” track
/// with markers for advertising or generic use, plus an
/// “advertising mode” used to display progress of an ad.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK13BCOVPUISlider")
@interface BCOVPUISlider : UISlider
/// Height of the track area
/// Default value is 5.
@property (nonatomic) CGFloat trackHeight;
/// The amount of buffer. This value will be pinned to min/max.
@property (nonatomic) float bufferProgress;
/// Set to YES to change the slider’s UI to the bumper mode.
/// In bumper mode this hides the buffering indicator,
/// hides markers, and sets the min/max track colors to
/// bumperMinimumTrackTintColor and bumperMaximumTrackTintColor.
@property (nonatomic) BOOL bumperModeActive;
/// Set to YES to change the slider’s UI to the advertising mode.
/// In advertising mode this hides the buffering indicator,
/// hides markers, and sets the min/max track colors to
/// advertisingMinimumTrackTintColor and advertisingMaximumTrackTintColor.
@property (nonatomic) BOOL advertisingMode;
/// The tint color to be used for the buffered area.
@property (nonatomic, strong) UIColor * _Nullable bufferProgressTintColor;
/// The tint color used for the minimum track area when in bumper mode.
/// The default bumper minimum track color is purple.
@property (nonatomic, strong) UIColor * _Nullable bumperMinimumTrackTintColor;
/// The tint color used for the maximum track area when in bumper mode.
/// The default bumper minimum track color is dark gray.
@property (nonatomic, strong) UIColor * _Nullable bumperMaximumTrackTintColor;
/// The tint color used for the minimum track area when in advertising mode.
/// This color is also used for ad ticks marks in normal mode.
/// The default advertising minimum track color is yellow.
@property (nonatomic, strong) UIColor * _Nullable advertisingMinimumTrackTintColor;
/// The tint color used for the maximum track area when in advertising mode.
/// The default advertising minimum track color is dark gray.
@property (nonatomic, strong) UIColor * _Nullable advertisingMaximumTrackTintColor;
/// The color used for the generic markers drawn in the track area
/// when no custom marker images are supplied.
/// The default generic marker color is white.
/// Set to nil to restore the default color.
@property (nonatomic, strong) UIColor * _Nullable markerTickColor;
/// The duration (in seconds) represented by the range of the slider.
/// Used for positioning markers.
/// The default value is 30, but should be set to the length of its associated video.
/// The duration will be set automatically for the progress slider installed into
/// the PlayerUI at playerView.controlsView.progressSlider.
@property (nonatomic) double duration;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Add a marker that will be displayed on the slider at a specific location.
/// \param position The location (in seconds) on the slider where the marker should be placed. See the “duration” property for related details.
///
/// \param duration The duration represented by the tick mark; can be set to zero to draw the smallest size marker (2 pixels wide).
///
/// \param isAd <code>true</code> indicates this marker represents an ad (drawn in yellow by default). <code>false</code> indicates this is a generic marker (drawn in white by default).
///
/// \param image An optional image that will be drawn in place of the default marker indicator. Can be set to nil.
///
- (void)addMarkerAt:(double)position duration:(double)duration isAd:(BOOL)isAd image:(UIImage * _Nullable)image;
/// Set a custom minimum track image to be used in normal (non-advertising) mode.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     image The image to be used on the minimum end of the track (typically the left side of the thumb). The image should be a resizeable UIImage, ‘trackHeight’ pixels high. When a custom image is set, markers will no longer be displayed. Set to nil to restore the default track images.
///   </li>
///   <li>
///     state The UIControlState for which this image will be active.
///   </li>
/// </ul>
- (void)setCustomMinimumTrackImage:(UIImage * _Nullable)image forState:(UIControlState)state;
/// Set a custom maximum track image to be used in normal (non-advertising) mode.
/// \param image The image to be used on the maximum end of the track (typically the left side of the thumb). The image should be a resizeable UIImage, ‘trackHeight’ pixels high. When a custom image is set, markers will no longer be displayed. Set to nil to restore the default track images.
///
/// \param state The UIControlState for which this image will be active.
///
- (void)setCustomMaximumTrackImage:(UIImage * _Nullable)image forState:(UIControlState)state;
- (void)drawRect:(CGRect)rect;
- (CGRect)trackRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, strong) UIColor * _Nullable minimumTrackTintColor;
@property (nonatomic, strong) UIColor * _Nullable maximumTrackTintColor;
- (void)addTarget:(id _Nullable)target action:(SEL _Nonnull)action forControlEvents:(UIControlEvents)controlEvents;
/// Remove all markers at the specified position.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     position The location on the slider (in seconds) of the marker to be removed.
///   </li>
/// </ul>
- (void)removeMarkerAtPosition:(double)position;
/// Remove all markers from the slider.
- (void)removeAllMarkers;
/// Remove all generic markers from the slider.
- (void)removeGenericMarkers;
/// Remove all ad markers from the slider.
- (void)removeAdMarkers;
- (void)setThumbImage:(UIImage * _Nullable)image forState:(UIControlState)state;
@property (nonatomic, strong) UIColor * _Nullable thumbTintColor;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


/// Conform to this protocol to receive basic ad information for each session.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK33BCOVPlaybackControllerAdsDelegate_")
@protocol BCOVPlaybackControllerAdsDelegate <NSObject>
@optional
/// Called when playback enters a new ad sequence within a playback session.
/// \param controller The playback controller in which this transition occurred.
///
/// \param session The playback session within which the ad transition occurred.
///
/// \param adSequence The ad sequence being entered.
///
- (void)playbackController:(id <BCOVPlaybackController> _Nonnull)controller playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didEnterAdSequence:(BCOVAdSequence * _Nonnull)adSequence;
/// Called when playback exits an ad sequence within a playback session.
/// \param controller The playback controller in which this transition occurred.
///
/// \param session The playback session within which the ad transition occurred.
///
/// \param adSequence The ad sequence being exited.
///
- (void)playbackController:(id <BCOVPlaybackController> _Nonnull)controller playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didExitAdSequence:(BCOVAdSequence * _Nonnull)adSequence;
/// Called when playback enters a new ad within a playback session.
/// \param controller The playback controller in which this transition occurred.
///
/// \param session The playback session within which the ad transition occurred.
///
/// \param ad The ad being entered.
///
- (void)playbackController:(id <BCOVPlaybackController> _Nonnull)controller playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didEnterAd:(BCOVAd * _Nonnull)ad;
/// Called when playback exits an ad within a playback session.
/// \param controller The playback controller in which this transition occurred.
///
/// \param session The playback session within which the ad transition occurred.
///
/// \param ad The ad being exited.
///
- (void)playbackController:(id <BCOVPlaybackController> _Nonnull)controller playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didExitAd:(BCOVAd * _Nonnull)ad;
/// Called with the playback session’s ad playback progress.
/// \param controller The playback controller in which an ad is progressing.
///
/// \param session The playback session within which the ad transition occurred.
///
/// \param ad The ad that is progressing.
///
/// \param progress The progress time of the ad.
///
- (void)playbackController:(id <BCOVPlaybackController> _Nonnull)controller playbackSession:(id <BCOVPlaybackSession> _Nonnull)session ad:(BCOVAd * _Nonnull)ad didProgressTo:(NSTimeInterval)progress;
/// Called when an ad paused.
/// \param controller The playback controller in which this transition occurred.
///
/// \param session The playback session within which the ad transition occurred.
///
/// \param ad The ad being paused.
///
- (void)playbackController:(id <BCOVPlaybackController> _Nonnull)controller playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didPauseAd:(BCOVAd * _Nonnull)ad;
/// Called when an ad resumed.
/// – Parameters:
/// <ul>
///   <li>
///     controller The playback controller in which this transition occurred.
///   </li>
///   <li>
///     session The playback session within which the ad transition occurred.
///   </li>
///   <li>
///     ad The ad being resumed.
///   </li>
/// </ul>
- (void)playbackController:(id <BCOVPlaybackController> _Nonnull)controller playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didResumeAd:(BCOVAd * _Nonnull)ad;
@end


/// Conform to this protocol to receive basic playback information for each video in
/// addition to advertising.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK30BCOVPlaybackControllerDelegate_")
@protocol BCOVPlaybackControllerDelegate <BCOVPlaybackControllerAdsDelegate, BCOVPlaybackControllerBasicDelegate, BCOVPlaybackControllerBumperDelegate>
@end

@class BCOVPlaybackServiceRequestFactory;

/// The BCOVPlaybackService class provides asynchronous methods for retrieving
/// information about videos from Brightcove’s Playback API.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK19BCOVPlaybackService")
@interface BCOVPlaybackService : NSObject
/// Error domain for BCOVPlaybackService.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorDomain;)
+ (NSString * _Nonnull)ErrorDomain SWIFT_WARN_UNUSED_RESULT;
/// Key for NSError.userInfo for errors with domain BCOVPlaybackService.ErrorDomain
/// and errorCode BCOVPlaybackServiceErrorCode.JSONDeserializationError. This is the
/// raw response data. This may not exist in error.userInfo.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorKeyRawResponseData;)
+ (NSString * _Nonnull)ErrorKeyRawResponseData SWIFT_WARN_UNUSED_RESULT;
/// Key for NSError.userInfo for errors with domain BCOVPlaybackService.ErrorDomain
/// and errorCode BCOVPlaybackServiceError.CodeAPIError. This is an NSArray of errors
/// returned by the Playback API.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorKeyAPIErrors;)
+ (NSString * _Nonnull)ErrorKeyAPIErrors SWIFT_WARN_UNUSED_RESULT;
/// Key for NSError.userInfo for errors with domain BCOVPlaybackService.ErrorDomain
/// and errorCode BCOVPlaybackServiceErrorCode.APIError. This is the HTTP status code
/// returned by the API request.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorKeyAPIHTTPStatusCode;)
+ (NSString * _Nonnull)ErrorKeyAPIHTTPStatusCode SWIFT_WARN_UNUSED_RESULT;
/// Parameter dictionary key for BCOVPlaybackService methods that return a playlist.
/// This key sets the maximum number of videos returned in a playlist.
/// This constant can be used in place of the string value “limit”.
/// Playlist Paging dictionary keys
/// For BCOVPlaybackService methods that return a playlist, you can request a
/// partial playlist, or “pages” from the playlist by specifying a limit and offset.
/// For example, if you have a playlist with 100 videos, you can request
/// only 6 videos starting at video number 10 with the following parameters
/// dictionary:
/// \code
/// let parameters =
/// [
///     "limit": 6,
///     "offset": 10
/// ]
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ParameterKeyLimit;)
+ (NSString * _Nonnull)ParameterKeyLimit SWIFT_WARN_UNUSED_RESULT;
/// Parameter dictionary key for BCOVPlaybackService methods that return a playlist.
/// This key sets the starting index into the playlist at which videos will be returned.
/// This constant can be used in place of the string value “offset”.
/// Playlist Paging dictionary keys
/// For BCOVPlaybackService methods that return a playlist, you can request a
/// partial playlist, or “pages” from the playlist by specifying a limit and offset.
/// For example, if you have a playlist with 100 videos, you can request
/// only 6 videos starting at video number 10 with the following parameters
/// dictionary:
/// \code
/// let parameters =
/// [
///     "limit": 6,
///     "offset": 10
/// ]
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ParameterKeyOffset;)
+ (NSString * _Nonnull)ParameterKeyOffset SWIFT_WARN_UNUSED_RESULT;
/// Parameter dictionary key for BCOVPlaybackService methods that return a playlist or video.
/// This key sets the SSAI ad config ID.
/// This constant can be used in place of the string value “ad_config_id”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ParamaterKeyAdConfigId;)
+ (NSString * _Nonnull)ParamaterKeyAdConfigId SWIFT_WARN_UNUSED_RESULT;
/// Parameter dictionary key for BCOVPlaybackService methods that return a playlist or video.
/// This key sets the Live Playback Token value.
/// This constant can be used in place of the string value “livePlaybackToken”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ParameterKeyLivePlaybackToken;)
+ (NSString * _Nonnull)ParameterKeyLivePlaybackToken SWIFT_WARN_UNUSED_RESULT;
/// Parameter dictionary key for BCOVPlaybackService methods that return a playlist or video.
/// This key enables Dynamic Delivery Rules for just-in-time manifest generation.
/// This constant can be used in place of the string value “config_id”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ParameterKeyDeliveryConfigId;)
+ (NSString * _Nonnull)ParameterKeyDeliveryConfigId SWIFT_WARN_UNUSED_RESULT;
/// Configuration dictionary key for BCOVPlaybackService’s <code>findVideoWithConfiguration:parameters:completion:</code>
/// and <code>findPlaylistWithConfiguration:parameters:completion:</code> methods.
/// The value for this key will be used to fetch a playlist using a playlist ID or a video using a video ID.
/// Takes presedence over <code>ConfigurationKeyAssetReferenceID</code> if these
/// keys are used together.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ConfigurationKeyAssetID;)
+ (NSString * _Nonnull)ConfigurationKeyAssetID SWIFT_WARN_UNUSED_RESULT;
/// Configuration dictionary key for BCOVPlaybackService’s <code>findVideoWithConfiguration:parameters:completion:</code>
/// and <code>findPlaylistWithConfiguration:parameters:completion:</code> methods.
/// The value for this key will be used to fetch a playlist using a playlist reference ID or a video using a video reference ID.
/// Is ignored in favor of <code>ConfigurationKeyAssetID</code> if these
/// keys are used together.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ConfigurationKeyAssetReferenceID;)
+ (NSString * _Nonnull)ConfigurationKeyAssetReferenceID SWIFT_WARN_UNUSED_RESULT;
/// Configuration dictionary key for BCOVPlaybackService’s <code>findVideoWithConfiguration:parameters:completion:</code>
/// and <code>findPlaylistWithConfiguration:parameters:completion:</code> methods.
/// The value for this key will be used to fetch a video or playlist using an auth token.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ConfigurationKeyAuthToken;)
+ (NSString * _Nonnull)ConfigurationKeyAuthToken SWIFT_WARN_UNUSED_RESULT;
/// Configuration dictionary key for BCOVPlaybackService’s <code>findVideoWithConfiguration:parameters:completion:</code>
/// and <code>findPlaylistWithConfiguration:parameters:completion:</code> methods.
/// The value for this key will be used to fetch a bumper video for video or playlist using a video ID.
/// Takes presedence over <code>ConfigurationKeyBumperReferenceID</code> if these
/// keys are used together.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ConfigurationKeyBumperID;)
+ (NSString * _Nonnull)ConfigurationKeyBumperID SWIFT_WARN_UNUSED_RESULT;
/// Configuration dictionary key for BCOVPlaybackService’s <code>findVideoWithConfiguration:parameters:completion:</code>
/// and <code>findPlaylistWithConfiguration:parameters:completion:</code> methods.
/// The value for this key will be used to fetch a bumper video for video or playlist using a video reference ID.
/// Is ignored in favor of <code>ConfigurationKeyBumperID</code> if these
/// keys are used together.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ConfigurationKeyBumperReferenceID;)
+ (NSString * _Nonnull)ConfigurationKeyBumperReferenceID SWIFT_WARN_UNUSED_RESULT;
/// NSURLSession shared across all network calls to the BCOVPlaybackService.
/// This object is created when the Playback Service is initialized.
/// If you wish to use your own NSURLSession you can set it here.
/// If set to nil, the default NSURLSession will be re-created.
@property (nonatomic, strong) NSURLSession * _Nonnull sharedURLSession;
/// The watermarking token for use with Forensic Watermarking
@property (nonatomic, copy) NSString * _Nullable watermarkingToken;
/// Initializes a BCOVPlaybackService. It uses the accountId and policyKey
/// to create a BCOVPlaybackServiceRequestFactory internally.
/// If using the Edge Playback Service, the policyKey value should be nil
/// \param accountId Account Id to be used for each request. Must not be nil.
///
/// \param policyKey PolicyKey to be used for each request. May be nil.
///
///
/// returns:
/// An initialized instance.
- (nonnull instancetype)initWithAccountId:(NSString * _Nonnull)accountId policyKey:(NSString * _Nullable)policyKey;
/// Initializes a BCOVPlaybackService with a required BCOVPlaybackServiceRequestFactory.
/// \param requestFactory Request Factory to use for creating URL requests.
///
///
/// returns:
/// An initialized instance.
- (nonnull instancetype)initWithRequestFactory:(BCOVPlaybackServiceRequestFactory * _Nonnull)requestFactory OBJC_DESIGNATED_INITIALIZER;
/// Retrieves a BCOVPlaylist from the Playback API service by its playlist ID on a
/// background queue.
/// If the completionHandler provides an error, the BCOVPlaylist will be nil.
/// Valid parameters are:
/// <ul>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAssetID</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAssetReferenceID</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAuthToken</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyBumperID</code>
///   </li>
/// </ul>
/// \param configuration NSDictionary of configuration options used in this catalog request.
///
/// \param queryParameters Additional NSString query parameters to add to the Playback API requests. These values will override the default values if they conflict. Can use the <code>ParameterKeyOffset</code> and <code>ParameterKeyLimit</code> parameters. See “Playlist Paging” above.
///
/// \param completion Closure which will be invoked when the request finishes. Execution of the closure will occur on the main thread.
///
- (void)findPlaylistWithConfiguration:(NSDictionary<NSString *, id> * _Nonnull)configuration queryParameters:(NSDictionary<NSString *, id> * _Nullable)queryParameters completion:(void (^ _Nonnull)(BCOVPlaylist * _Nullable, id _Nullable, NSError * _Nullable))completion;
/// Retrieves a BCOVVideo from the Playback API service by its video ID on a background
/// queue.
/// If the completionHandler provides an NSError, the BCOVVideo will be nil.
/// Valid parameters are:
/// <ul>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAssetID</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAssetReferenceID</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAuthToken</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyBumperID</code>
///   </li>
/// </ul>
/// \param configuration NSDictionary of configuration options used in this catalog request.
///
/// \param queryParameters Additional NSString query parameters to add to the Playback API requests. These values will override the default values if they conflict.
///
/// \param completion Closure which will be invoked when the request finishes. Execution of the closure will occur on the main thread.
///
- (void)findVideoWithConfiguration:(NSDictionary<NSString *, id> * _Nonnull)configuration queryParameters:(NSDictionary<NSString *, id> * _Nullable)queryParameters completion:(void (^ _Nonnull)(BCOVVideo * _Nullable, id _Nullable, NSError * _Nullable))completion;
/// Initializes a source from the JSON dictionary. Properties that don’t map to
/// first class properties on the source are added to the properties dictionary.
/// \param json Dictionary representing the deserialized source.
///
///
/// returns:
/// The initialized source.
+ (BCOVSource * _Nullable)sourceFromJSONDictionary:(id _Nullable)json SWIFT_WARN_UNUSED_RESULT;
/// Initializes a cue point from the JSON dictionary. Properties that don’t
/// map to first class properties on cue point are added to the properties
/// dictionary.
/// \param json Dictionary representing the deserialized cuepoint.
///
///
/// returns:
/// The initialized cue point.
+ (BCOVCuePoint * _Nullable)cuePointFromJSONDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
/// Initializes a playlist from the JSON dictionary. Properties that don’t
/// map to first class properties on playlist are added to the properties
/// dictionary.
/// \param json Dictionary representing the deserialized playlist.
///
///
/// returns:
/// The initialized playlist.
+ (BCOVPlaylist * _Nullable)playlistFromJSONDictionary:(id _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
/// Initializes a video from the JSON dictionary. Properties that don’t
/// map to first class properties on video are added to the properties
/// dictionary.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     json: Dictionary representing the deserialized video.
///   </li>
/// </ul>
///
/// returns:
/// The initialized video.
+ (BCOVVideo * _Nullable)videoFromJSONDictionary:(id _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Errors associated with Playback API requests.
typedef SWIFT_ENUM(NSInteger, BCOVPlaybackServiceErrorCode, open) {
/// No error.
  BCOVPlaybackServiceErrorCodeNoError = 0,
/// Error Code that indicates there was an error connecting to the Playback
/// API. Check the error.userInfo key NSUnderlyingErrorKey for the actual
/// connection error.
  BCOVPlaybackServiceErrorCodeConnectionError = 1,
/// Error Code that indicates there was an error parsing the response as JSON.
/// If the request returned any data, that raw NSData will be included in the
/// userInfo by key BCOVPlaybackService.ErrorKeyRawResponseData. Check the
/// error.userInfo key NSUnderlyingErrorKey for the actual JSON deserialization error.
  BCOVPlaybackServiceErrorCodeJSONDeserializationError = 2,
/// Error Code that indicates there was an error returned by the API. Check the
/// error.userInfo key BCOVPlaybackService.ErrorKeyAPIErrors for an NSArray
/// of errors returned by the API and key BCOVPlaybackService.ErrorKeyAPIHTTPStatusCode
/// to find the status code returned.
  BCOVPlaybackServiceErrorCodeAPIError = 3,
};

@class NSURLRequest;

/// The BCOVPlaybackServiceRequestFactory class provides methods for creating requests for videos from Brightcove’s Playback API.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK33BCOVPlaybackServiceRequestFactory")
@interface BCOVPlaybackServiceRequestFactory : NSObject
/// Videocloud Account Id.
@property (nonatomic, readonly, copy) NSString * _Nullable accountId;
/// Videocloud Policy Key
@property (nonatomic, readonly, copy) NSString * _Nullable policyKey;
/// Auth Token for EPA/PAS
@property (nonatomic, readonly, copy) NSString * _Nullable authToken;
/// Base URL for Generic Stream Concurrency
@property (nonatomic, readonly, copy) NSString * _Nonnull gscBaseURLStr;
/// NSDictionary of additional HTTP request headers set on each NSURLRequest.
/// The dictionary key defines the header field name.
/// Header field names are case-insensitive.
/// Both keys and values should be NSStrings.
/// Defaults to nil.
@property (nonatomic, copy) NSDictionary * _Nullable additionalHTTPRequestHeaders;
/// Returns an initialized instance with the specified policy. The base URL
/// string used by the returned instance is https://edge.api.brightcove.com/playback/v1 .
/// If using the Edge Playback Service, the policyKey value should be nil
/// \param accountId A Video Cloud account. Must not be nil.
///
/// \param policyKey A Video Cloud CMS policy..
///
///
/// returns:
/// The initialized BCOVPlaybackServiceRequestFactory.
- (nonnull instancetype)initWithAccountId:(NSString * _Nonnull)accountId policyKey:(NSString * _Nullable)policyKey;
/// Returns an initialized instance with the specified token, account, and base URL string.
/// If using the Edge Playback Service, the policyKey value should be nil
/// \param accountId A Video Cloud account. Must not be nil.
///
/// \param policyKey A Video Cloud CMS policy.
///
/// \param baseURLStr A string URL to the API.
///
///
/// returns:
/// The initialized BCOVPlaybackServiceRequestFactory.
- (nonnull instancetype)initWithAccountId:(NSString * _Nonnull)accountId policyKey:(NSString * _Nullable)policyKey baseURLStr:(NSString * _Nullable)baseURLStr;
/// Returns an initialized instance with the specified token, account, base URL string, and auth base URL string
/// If using the Edge Playback Service, the policyKey value should be nil
/// \param accountId A Video Cloud account. Must not be nil.
///
/// \param policyKey A Video Cloud CMS policy.
///
/// \param baseURLStr A string URL to the API.
///
/// \param authBaseURLStr A string URL to the API that will be used for EPA/PAS requests.
///
///
/// returns:
/// The initialized BCOVPlaybackServiceRequestFactory.
- (nonnull instancetype)initWithAccountId:(NSString * _Nonnull)accountId policyKey:(NSString * _Nullable)policyKey baseURLStr:(NSString * _Nullable)baseURLStr authBaseURLStr:(NSString * _Nullable)authBaseURLStr;
/// Returns an initialized instance with the specified token, account, base URL string, auth base URL string and GSC base URL string
/// If using the Edge Playback Service, the policyKey value should be nil
/// \param accountId A Video Cloud account. Must not be nil.
///
/// \param policyKey A Video Cloud CMS policy.
///
/// \param baseURLStr A string URL to the API.
///
/// \param authBaseURLStr A string URL to the API that will be used for EPA/PAS requests.
///
/// \param gscBaseURLStr A String URL to the API that will be used for Generic Stream Concurrency requests.
///
///
/// returns:
/// The initialized BCOVPlaybackServiceRequestFactory.
- (nonnull instancetype)initWithAccountId:(NSString * _Nonnull)accountId policyKey:(NSString * _Nullable)policyKey baseURLStr:(NSString * _Nullable)baseURLStr authBaseURLStr:(NSString * _Nullable)authBaseURLStr gscBaseURLStr:(NSString * _Nullable)gscBaseURLStr OBJC_DESIGNATED_INITIALIZER;
/// Constructs a request for a playlist.
/// Valid parameters are:
/// <ul>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAssetID</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAssetReferenceID</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAuthToken</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyBumperID</code>
///   </li>
/// </ul>
/// \param configuration Dictionary of configuration options used in this catalog request.
///
/// \param parameters parameters that will be added as URL parameters to the request. These parameters will override any default parameters that had been set.
///
///
/// returns:
/// Built URLRequest that can be used to fetch the playlist.
- (NSURLRequest * _Nullable)requestForPlaylistWithConfiguration:(NSDictionary<NSString *, id> * _Nonnull)configuration parameters:(NSDictionary<NSString *, id> * _Nullable)parameters SWIFT_WARN_UNUSED_RESULT;
/// Constructs a request for a video.
/// Valid parameters are:
/// <ul>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAssetID</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAssetReferenceID</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAuthToken</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyBumperID</code>
///   </li>
/// </ul>
/// \param configuration Dictionary of configuration options used in this catalog request.
///
/// \param parameters parameters that will be added as URL parameters to the request. These parameters will override any default parameters that had been set.
///
///
/// returns:
/// Built URLRequest that can be used to fetch the playlist.
- (NSURLRequest * _Nullable)requestForVideoWithConfiguration:(NSDictionary<NSString *, id> * _Nonnull)configuration parameters:(NSDictionary<NSString *, id> * _Nullable)parameters SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVQueuePlayer;
@class AVPlayerLayer;
@class BCOVSessionProviderExtension;

/// A playback session represents the playback of a single video. The session
/// provides a single point of access for everything related to the playback
/// experience for that video: the video and source selected for playback, the
/// player within which the playback occurs, and events that occur during the
/// playback session. Playback sessions are never reused for multiple videos
/// (even separate enqueueings of the same video).
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK19BCOVPlaybackSession_")
@protocol BCOVPlaybackSession <NSObject>
/// The video whose playback this session represents.
@property (nonatomic, readonly, strong) BCOVVideo * _Nullable video;
/// The source in <code>self.video</code> this session uses to load content.
@property (nonatomic, readonly, strong) BCOVSource * _Nullable source;
/// The player this session uses to present content.
@property (nonatomic, readonly, strong) AVQueuePlayer * _Nullable player;
/// The layer that hosts the visible video output.
@property (nonatomic, readonly, strong) AVPlayerLayer * _Nonnull playerLayer;
/// The AVMediaSelectionGroup of audible media selection options of the AVAsset of
/// the AVPlayerItem of the AVPlayer of the current BCOVPlaybackSession.
/// The AVMediaSelectionGroup is unsorted and can contain un-playable options. Use the
/// +playableMediaSelectionOptionsFromArray: class method of AVMediaSeledtionGroup
/// to return the list of playable media options. AVMediaSelectionGroup provides filtering
/// methods to, for example, order the list of options according to the user’s
/// language preferences.
@property (nonatomic, readonly, strong) AVMediaSelectionGroup * _Nullable audibleMediaSelectionGroup;
/// The selected audible media option. When setting this property, if
/// selectedAudibleMediaOption is not a member of the AVMediaSelectionGroup of the
/// current BCOVPlaybackSession’s AVPlayer, no change in presentation state will
/// occur.
@property (nonatomic, strong) AVMediaSelectionOption * _Nullable selectedAudibleMediaOption;
/// The AVMediaSelectionGroup of legible media selection options of the AVAsset of
/// the AVPlayerItem of the AVPlayer of the current BCOVPlaybackSession.
/// The AVMediaSelectionGroup is unsorted and can contain un-playable options. Use the
/// +playableMediaSelectionOptionsFromArray: class method of AVMediaSelectionGroup
/// to return the list of playable media options. AVMediaSelectionOption provides filtering
/// methods to, for example, exclude forced subtitles from the legible options that are
/// suitable to offer in a selection UI.
@property (nonatomic, readonly, strong) AVMediaSelectionGroup * _Nullable legibleMediaSelectionGroup;
/// The selected legible media option. When setting this property, if
/// selectedLegibleMediaOption is not a member of the AVMediaSelectionGroup of the
/// current BCOVPlaybackSession’s AVPlayer, no change in presentation state will
/// occur. If selectedLegibleMediaOption is set to nil and the allowsEmptySelecton
/// property of the AVMediaSelectionGroup of the current BCOVPlaybackSession’s
/// AVPlayer is YES, all media selection options in the group will be deselected.
@property (nonatomic, strong) AVMediaSelectionOption * _Nullable selectedLegibleMediaOption;
/// The session provider extension for this session. The default value is nil.
/// If a BCOVPlaybackSessionProvider is used that needs to expose plugin specific functionality,
/// this property will return a BCOVSessionProviderExtension.
@property (nonatomic, readonly, strong) BCOVSessionProviderExtension * _Nullable providerExtension;
/// Selects the audible media option in the audible media selection group that
/// best matches the current AVPlayerItem’s automatic selection criteria.
- (void)selectAudibleMediaOptionAutomatically;
/// Selects the legible media option in the legible media selection group which
/// best matches the current AVPlayerItem’s automatic selection criteria.
- (void)selectLegibleMediaOptionAutomatically;
/// Returns a descriptive display string for the audible selection option. The
/// display name string is the stringValue of the option appended with the option
/// locale if the locale differs from the stringValue.
/// \param option A specific audio media selection option from the AVMediaSelectionGroup
///
- (NSString * _Nullable)displayNameFromAudibleMediaSelectionOption:(AVMediaSelectionOption * _Nonnull)option SWIFT_WARN_UNUSED_RESULT;
/// Returns a descriptive display string for the legible selection option. The
/// display name string is the stringValue of the option appended with the option
/// locale if the locale differs from the stringValue. Legible option names are
/// further appended with “SDH” when accessibility characteristics are present.
/// \param option A specific legible media selection option from the AVMediaSelectionGroup
///
- (NSString * _Nullable)displayNameFromLegibleMediaSelectionOption:(AVMediaSelectionOption * _Nonnull)option SWIFT_WARN_UNUSED_RESULT;
/// Terminates this playback session, indicating readiness for a new session to
/// be dequeued. A terminated playback session should be discarded immediately.
/// In a typical configuration using a BCOVPlaybackController, there is no need
/// to call this method directly. Methods on the controller are the preferred
/// mechanism for advancing to the next playback session. However, playback
/// session provider configurations which do not use a BCOVPlaybackController
/// may need to invoke this method to advance the queue.
- (void)terminate;
@end




/// A lifecycle event for a playback session.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK33BCOVPlaybackSessionLifecycleEvent")
@interface BCOVPlaybackSessionLifecycleEvent : NSObject <NSCopying>
/// This lifecycle event’s type.
@property (nonatomic, readonly, copy) NSString * _Nonnull eventType;
/// Contextual information related to this event instance.
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
/// Designated initializer. Returns an event with the specified type and properties.
/// \param eventType Type of the event.
///
/// \param properties Properties of the event
///
///
/// returns:
/// Initialized event.
- (nonnull instancetype)initWithEventType:(NSString * _Nonnull)eventType properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
/// Determines the equality of the events.
/// \param event Event to check against.
///
///
/// returns:
/// <code>true</code> if the events are equal and <code>false</code> if the events are no equal.
- (BOOL)isEqualToPlaybackSessionLifecycleEvent:(BCOVPlaybackSessionLifecycleEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Returns a playback session lifecycle event of the specified type with no
/// properties.
/// \param eventType The event type of the lifecycle event to return.
///
///
/// returns:
/// The playback session lifecycle event of the specified type.
+ (BCOVPlaybackSessionLifecycleEvent * _Nonnull)eventWithType:(NSString * _Nonnull)eventType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The Player SDK Manager is a singleton instance that acts as a factory,
/// central registry, and diagnostics center in the Brightcove Player SDK for
/// iOS. After obtaining an instance of the Manager, use it to obtain instances
/// of other objects from the Player SDK ecosystem.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK20BCOVPlayerSDKManager")
@interface BCOVPlayerSDKManager : NSObject
/// Returns the Player SDK Manager singleton.
///
/// returns:
/// The Player SDK Manager singleton.
+ (BCOVPlayerSDKManager * _Nonnull)sharedManager SWIFT_WARN_UNUSED_RESULT;
/// Returns the Player SDK Manager singleton.
/// \param options Set to nil. Reserved for future use.
///
///
/// returns:
/// The Player SDK Manager singleton.
+ (BCOVPlayerSDKManager * _Nonnull)sharedManagerWithOptions:(NSDictionary * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
/// Returns the SDK version.
///
/// returns:
/// The SDK version
+ (NSString * _Nonnull)SDKVersion SWIFT_WARN_UNUSED_RESULT;
/// sessionID is a unique identifier associated with this instance
/// of the application. This identifier is sent along with other
/// analytics data to the Brightcove metrics servers.
/// The sessionID can be useful when trying to track down problems with
/// particular playback issues. For example, if you detect playback issues,
/// you can send the sessionID and the video ID to your own error tracking
/// server, and then report those two values to Brightcove service engineers
/// to track down the source of the problem in the server logs.
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionID;
/// Creates and returns a playback controller configured with a basic session
/// provider and a default view strategy (equivalent to calling <code>BCOVPlayerSDKManager.createPlaybackController(withViewStrategy: nil)</code>).
///
/// returns:
/// A playback controller.
- (id <BCOVPlaybackController> _Nonnull)createPlaybackController SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a playback controller configured with a basic session
/// provider and the specified view strategy. Passing <code>nil</code> as the view strategy
/// will configure the returned playback controller’s <code>view</code> property as a basic
/// unadorned video view.
/// \param viewStrategy A view strategy that determines the view for the returned playback controller.
///
///
/// returns:
/// A playback controller configured with the specified strategy.
- (id <BCOVPlaybackController> _Nonnull)createPlaybackControllerWithViewStrategy:(BCOVPlaybackControllerViewStrategy _Nullable)viewStrategy SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a playback controller configured with the specified
/// session provider and view strategy.
/// \param provider A session provider that sends playback sessions to the returned playback controller.
///
/// \param viewStrategy A view strategy that determines the view for the returned playback controller.
///
///
/// returns:
/// A playback controller configured with the specified parameters.
- (id <BCOVPlaybackController> _Nonnull)createPlaybackControllerWithSessionProvider:(id <BCOVPlaybackSessionProvider> _Nullable)provider viewStrategy:(BCOVPlaybackControllerViewStrategy _Nullable)viewStrategy SWIFT_WARN_UNUSED_RESULT;
/// Returns a basic playback session provider with the specified options.
/// \param options The options for the session provider to return.
///
///
/// returns:
/// A basic playback session provider configured with the specified options.
- (id <BCOVPlaybackSessionProvider> _Nonnull)createBasicSessionProviderWithOptions:(BCOVBasicSessionProviderOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
/// Registers the specified component object with the BCOVPlayerSDKManager. The
/// component should implement the methods in the <code>BCOVComponent</code> protocol.
/// Registering a component “activates it” for use, enabling its functionality.
/// \param component The object to be registered with the BCOVPlayerSDKManager.
///
- (void)registerComponent:(id <BCOVComponent> _Nonnull)component;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface BCOVPlayerSDKManager (SWIFT_EXTENSION(BrightcovePlayerSDK))
/// Creates and returns a new playback controller configured for sidecar subtitles
/// with the specified view strategy.
/// \param viewStrategy A view strategy that determines the view for the returned playback controller.
///
///
/// returns:
/// A new playback controller configured for sidecar subtitles playbacksessions.
- (id <BCOVPlaybackController> _Nonnull)createSidecarSubtitlesPlaybackControllerWithViewStrategy:(BCOVPlaybackControllerViewStrategy _Nullable)viewStrategy SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a new sidecar subtitle session provider with the
/// specified parameters.
/// \param provider Optional upstream session provider.
///
///
/// returns:
/// A new session provider with the specified parameters.
- (id <BCOVPlaybackSessionProvider> _Nonnull)createSidecarSubtitlesSessionProviderWithUpstreamSessionProvider:(id <BCOVPlaybackSessionProvider> _Nullable)provider SWIFT_WARN_UNUSED_RESULT;
@end


@interface BCOVPlayerSDKManager (SWIFT_EXTENSION(BrightcovePlayerSDK))
/// Creates and returns a FairPlay enabled playback controller.
/// If you are using Video Cloud Dynamic Delivery, a Fairplay application certificate will
/// automatically be retrieved from the BCOVVideo when you play a playlist.
/// You can still supply an application certificate separately by calling
/// <code>BCOVBasicPlaybackController addApplicationCertificate:identifier:</code>.
/// \param proxy The BCOVFPSAuthorizationProxy to use for this session provider. Must not be nil.
///
///
/// returns:
/// A playback controller.
- (id <BCOVPlaybackController> _Nonnull)createFairPlayPlaybackControllerWithAuthorizationProxy:(id <BCOVFPSAuthorizationProxy> _Nonnull)proxy SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a FairPlay session provider with the specified parameters.
/// If you are using Video Cloud Dynamic Delivery, a Fairplay application certificate will
/// automatically be retrieved from the BCOVVideo when you play a playlist.
/// You can still supply an application certificate separately by calling
/// <code>BCOVBasicPlaybackController addApplicationCertificate:identifier:</code>.
/// \param proxy The BCOVFPSAuthorizationProxy to use for this session provider. Must not be nil.
///
/// \param provider And upstream session provider to link to. If nil, a BCOVBasicSessionProvider will be used.
///
///
/// returns:
/// A session provider.
- (id <BCOVPlaybackSessionProvider> _Nonnull)createFairPlaySessionProviderWithAuthorizationProxy:(id <BCOVFPSAuthorizationProxy> _Nonnull)proxy upstreamSessionProvider:(id <BCOVPlaybackSessionProvider> _Nullable)provider SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a FairPlay enabled playback controller.
/// \param appCert The Fairplay Application Certificate for this session provider. If using Brightcove FPS Server, this can retrieved by BCOVFPSBrightcoveAuthProxy. Can be nil.
///
/// \param proxy The BCOVFPSAuthorizationProxy to use for this session provider. Must not be nil.
///
/// \param viewStrategy The view strategy to use.
///
///
/// returns:
/// A playback controller.
- (id <BCOVPlaybackController> _Nonnull)createFairPlayPlaybackControllerWithApplicationCertificate:(NSData * _Nullable)appCert authorizationProxy:(id <BCOVFPSAuthorizationProxy> _Nonnull)proxy viewStrategy:(BCOVPlaybackControllerViewStrategy _Nullable)viewStrategy SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a FairPlay session provider with the specified parameters.
/// \param appCert The FairPlay Application Certificate for this session provider. If using Brightcove FPS Server, this can retrieved by BCOVFPSBrightcoveAuthProxy. Can be nil.
///
/// \param proxy The BCOVFPSAuthorizationProxy to use for this session provider. Must not be nil.
///
/// \param provider And upstream session provider to link to. If nil, a BCOVBasicSessionProvider will be used.
///
///
/// returns:
/// A session provider.
- (id <BCOVPlaybackSessionProvider> _Nonnull)createFairPlaySessionProviderWithApplicationCertificate:(NSData * _Nullable)appCert authorizationProxy:(id <BCOVFPSAuthorizationProxy> _Nonnull)proxy upstreamSessionProvider:(id <BCOVPlaybackSessionProvider> _Nullable)provider SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC19BrightcovePlayerSDK15BCOVSSConstants")
@interface BCOVSSConstants : NSObject
/// The key for an aray of text track dictionaries.
/// If videos are retreieved through the BCOVPlaybackService and those
/// videos have text tracks assosiated with them, the plugin will handle those
/// automatically.
/// If you are generating your BCOVVideos manually, you will need to construct
/// a text track dictionary that should includes the following key value
/// pairs <code>TextTracksKeySource</code>,<code>TextTracksKeySourceLanguage</code>,
/// <code>TextTracksKeyLabel</code>, <code>TextTracksKeyDuration, </code>TextTracksKeyKind<code>, </code>TextTracksKeyDefault<code>,</code>
/// <code>TextTracksKeyMIMEType</code>.
/// Example:
/// \code
/// BCOVSSConstants.VideoPropertiesKeyTextTracks [
///     [
///         BCOVSSConstants.TextTracksKeySource: ..., // required
///         BCOVSSConstants.TextTracksKeySourceLanguage: ..., // required
///         BCOVSSConstants.TextTracksKeyLabel: ..., // required
///         BCOVSSConstants.TextTracksKeyDuration: ..., // required/optional
///         BCOVSSConstants.TextTracksKeyKind: BCOVSSConstants.TextTracksKindSubtitles or BCOVSSConstants.TextTracksKindCaptions, // required
///         BCOVSSConstants.TextTracksKeyDefault: ..., // optional
///         BCOVSSConstants.TextTracksKeyMIMEType: ..., // optional
///     ]
/// ]
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VideoPropertiesKeyTextTracks;)
+ (NSString * _Nonnull)VideoPropertiesKeyTextTracks SWIFT_WARN_UNUSED_RESULT;
/// The key for the NSString URL to the text track.
/// This key is required. Text track source can be either an M3U8
/// subtitle playlist or a WebVTT file. WebVTT URLs should have a “.vtt”
/// extension, and M3U8 playlist files should have an “m3u8” extension.
/// If your URL cannot follow this convention, you need to specify the
/// format of the file referenced by your URL with the
/// <code>TextTracksKeySourceType</code> key.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeySource;)
+ (NSString * _Nonnull)TextTracksKeySource SWIFT_WARN_UNUSED_RESULT;
/// The key for the NSString language of the text track.
/// This key is required.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeySourceLanguage;)
+ (NSString * _Nonnull)TextTracksKeySourceLanguage SWIFT_WARN_UNUSED_RESULT;
/// The key for the NSString name of the text track.
/// This key is required.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeyLabel;)
+ (NSString * _Nonnull)TextTracksKeyLabel SWIFT_WARN_UNUSED_RESULT;
/// The key for the NSNumber of Integer value for duration of the text_track.
/// If the text track source is a .vtt file, the duration of the .vtt file
/// is required in order for subtitles to be displayed. If the video and
/// .vtt file were retrieved through BCOVPlaybackService, the plugin will
/// the attempt to use the video properties value keyed by “duration” to satisfy
/// this requirement. If building videos manually, this key is required. If text
/// track is .m3u8, this key will be ignored.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeyDuration;)
+ (NSString * _Nonnull)TextTracksKeyDuration SWIFT_WARN_UNUSED_RESULT;
/// The key for the NSNumber of BOOL that indicates if the text track is the default.
/// This key is optional.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeyDefault;)
+ (NSString * _Nonnull)TextTracksKeyDefault SWIFT_WARN_UNUSED_RESULT;
/// The key for the NSString mime type of the text track.
/// This key is optional.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeyMIMEType;)
+ (NSString * _Nonnull)TextTracksKeyMIMEType SWIFT_WARN_UNUSED_RESULT;
/// The key for the NSString kind of the text track.
/// This key is required. The value of this key should be either
/// <code>TextTracksKindSubtitles</code> or <code>TextTrackKindCaptions</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeyKind;)
+ (NSString * _Nonnull)TextTracksKeyKind SWIFT_WARN_UNUSED_RESULT;
/// A text track kind value that indicates that a text track kind is subtitles.
/// Also see <code>TextTracksKeyKind</code> and <code>TextTracksKindCaptions</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKindSubtitles;)
+ (NSString * _Nonnull)TextTracksKindSubtitles SWIFT_WARN_UNUSED_RESULT;
/// A text track kind value that indicates that a text track kind is closed captions.
/// Also see <code>TextTracksKeyKind</code> and <code>TextTracksKindSubtitles</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKindCaptions;)
+ (NSString * _Nonnull)TextTracksKindCaptions SWIFT_WARN_UNUSED_RESULT;
/// An NSDictionary key used to specify the type of file
/// referred to by the TextTracksKeySource URL.
/// This NSDictionary key can take one of two values:
/// TracksKeySourceTypeWebVTTURL to indicate that the
/// TracksKeySourceType URL refers to a WebVTT file, or
/// TracksKeySourceTypeM3U8URL to indicate that the
/// TracksKeySourceType URL refers to an M3U8 file.
/// This key/value pair is only necessary if the source URL does not
/// use a “.vtt” or “.m3u8” extension.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeySourceType;)
+ (NSString * _Nonnull)TextTracksKeySourceType SWIFT_WARN_UNUSED_RESULT;
/// An NSDictionary value used to indicate that the
/// source URL refers to a WebVTT file.
/// This key/value pair is only necessary if the
/// source URL refers to a WebVTT file, but does not use
/// a “.vtt” extension.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeySourceTypeWebVTTURL;)
+ (NSString * _Nonnull)TextTracksKeySourceTypeWebVTTURL SWIFT_WARN_UNUSED_RESULT;
/// An NSDictionary value used to indicate that the
/// source URL refers to an M3U8 file.
/// This key/value pair is only necessary if the
/// source URL refers to an M3U8 file, but does not use
/// an “.m3u8” extension.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeySourceTypeM3U8URL;)
+ (NSString * _Nonnull)TextTracksKeySourceTypeM3U8URL SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// BCOVUILabel
/// The BCOVUILabel is a subclass of UILabel which has
/// an extra NSString property that will be read by VoiceOver
/// as a prefix to the labels value. For example the duration
/// abel can be read by VO as “Duration 03:47” and still only
/// visibly read as “03:47”
SWIFT_CLASS("_TtC19BrightcovePlayerSDK11BCOVUILabel")
@interface BCOVUILabel : UILabel
/// accessibilityLabelPrefix is the string that will be
/// read by VoiceOver before the text value of the label itself
@property (nonatomic, copy) NSString * _Nullable accessibilityLabelPrefix;
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC19BrightcovePlayerSDK18BCOVVideoErrorCode")
@interface BCOVVideoErrorCode : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BadRequest;)
+ (NSString * _Nonnull)BadRequest SWIFT_WARN_UNUSED_RESULT;
/// The same parameter name was provided more than once in the request.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DuplicateParameters;)
+ (NSString * _Nonnull)DuplicateParameters SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AccessDenied;)
+ (NSString * _Nonnull)AccessDenied SWIFT_WARN_UNUSED_RESULT;
/// A JWT is required by the Playback Rights but was not provided.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TokenRequired;)
+ (NSString * _Nonnull)TokenRequired SWIFT_WARN_UNUSED_RESULT;
/// The JWT provided did not pass validation.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TokenValidation;)
+ (NSString * _Nonnull)TokenValidation SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Forbidden;)
+ (NSString * _Nonnull)Forbidden SWIFT_WARN_UNUSED_RESULT;
/// The account id in the policy key does not match the account in the api request.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AccountID;)
+ (NSString * _Nonnull)AccountID SWIFT_WARN_UNUSED_RESULT;
/// The video is restricted from playing in the current geo region; the message will contain additional information about the specific issue.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ClientGeo;)
+ (NSString * _Nonnull)ClientGeo SWIFT_WARN_UNUSED_RESULT;
/// The video is restricted at the current IP address.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ClientIP;)
+ (NSString * _Nonnull)ClientIP SWIFT_WARN_UNUSED_RESULT;
/// The video is restricted from playing on the current domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Domain;)
+ (NSString * _Nonnull)Domain SWIFT_WARN_UNUSED_RESULT;
/// The JWT does not allow for playback based on offers available in the video.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Offers;)
+ (NSString * _Nonnull)Offers SWIFT_WARN_UNUSED_RESULT;
/// The JWT does not allow for playback based on tags available in the video.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Tags;)
+ (NSString * _Nonnull)Tags SWIFT_WARN_UNUSED_RESULT;
/// For a single video request, the video exists, but is not allowed to be played now.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VideoNotPlayable;)
+ (NSString * _Nonnull)VideoNotPlayable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NotFound;)
+ (NSString * _Nonnull)NotFound SWIFT_WARN_UNUSED_RESULT;
/// The requested video is not available.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VideoNotFound;)
+ (NSString * _Nonnull)VideoNotFound SWIFT_WARN_UNUSED_RESULT;
/// The requested playlist is not available.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PlaylistNotFound;)
+ (NSString * _Nonnull)PlaylistNotFound SWIFT_WARN_UNUSED_RESULT;
/// Only GET, HEAD and OPTIONS are allowed for this api.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MethodNotAllowed;)
+ (NSString * _Nonnull)MethodNotAllowed SWIFT_WARN_UNUSED_RESULT;
/// Internal server error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ServerError;)
+ (NSString * _Nonnull)ServerError SWIFT_WARN_UNUSED_RESULT;
/// Got a bad response from a backend server.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AccountRetrieveFailure;)
+ (NSString * _Nonnull)AccountRetrieveFailure SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VideoRetieveFailure;)
+ (NSString * _Nonnull)VideoRetieveFailure SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VideoUrlsRetrieveFailure;)
+ (NSString * _Nonnull)VideoUrlsRetrieveFailure SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PlaylistRetrieveFailure;)
+ (NSString * _Nonnull)PlaylistRetrieveFailure SWIFT_WARN_UNUSED_RESULT;
/// Cannot retrive playback right from cloudfront
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PlaybackRightRetrieveFailure;)
+ (NSString * _Nonnull)PlaybackRightRetrieveFailure SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PlaylistVideosRetrieveFailure;)
+ (NSString * _Nonnull)PlaylistVideosRetrieveFailure SWIFT_WARN_UNUSED_RESULT;
/// Failed to get license from Fabric License Server for this video.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LicenseRetreiveFailure;)
+ (NSString * _Nonnull)LicenseRetreiveFailure SWIFT_WARN_UNUSED_RESULT;
/// Failed to get offers from Adamas API for this video.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull OffersRetreiveFailure;)
+ (NSString * _Nonnull)OffersRetreiveFailure SWIFT_WARN_UNUSED_RESULT;
/// Failed to retrieve Playback Rights for this video.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull RightsRetrieveFailure;)
+ (NSString * _Nonnull)RightsRetrieveFailure SWIFT_WARN_UNUSED_RESULT;
/// Returned this response from a backend server.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ServiceUnavailable;)
+ (NSString * _Nonnull)ServiceUnavailable SWIFT_WARN_UNUSED_RESULT;
/// Either a backend server or one of the servers they rely on timed out.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ServerTimeout;)
+ (NSString * _Nonnull)ServerTimeout SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface NSDictionary<KeyType, ObjectType> (SWIFT_EXTENSION(BrightcovePlayerSDK))
/// Constructs a string of key/value pairs that have been UTF-8 encoded for aURL.
///
/// returns:
/// The URL encoded string form of this dictionary.
- (NSString * _Nonnull)bcov_UTF8EncodedRequestParameterString SWIFT_WARN_UNUSED_RESULT;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
#ifndef BRIGHTCOVEPLAYERSDK_SWIFT_H
#define BRIGHTCOVEPLAYERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X)
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X)
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X)
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreFoundation;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <BrightcovePlayerSDK/BrightcovePlayerSDK.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BrightcovePlayerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

/// This object represents an ad.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK6BCOVAd")
@interface BCOVAd : NSObject
/// Is this ad skippable. Boolean NSNumber.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeySkippable;)
+ (NSString * _Nonnull)PropertyKeySkippable SWIFT_WARN_UNUSED_RESULT;
/// Skip time. NSNumber seconds after which you can skip the ad.
/// Ignored unless kBCOVAdPropertyKeySkippable is “YES”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeySkipTime;)
+ (NSString * _Nonnull)PropertyKeySkipTime SWIFT_WARN_UNUSED_RESULT;
/// Array of NSStrings representing Clickthrough URLs
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyClickthroughURLs;)
+ (NSString * _Nonnull)PropertyKeyClickthroughURLs SWIFT_WARN_UNUSED_RESULT;
/// Array of NSStrings representing Tracking URLs
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyTrackingURLs;)
+ (NSString * _Nonnull)PropertyKeyTrackingURLs SWIFT_WARN_UNUSED_RESULT;
/// The title of the ad.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// The id of the ad.
@property (nonatomic, readonly, copy) NSString * _Nonnull adId;
/// The begin time of the ad.
@property (nonatomic, readonly) CMTime beginTime;
/// The duration of the ad.
@property (nonatomic, readonly) CMTime duration;
/// The properties of the ad.
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
/// This is the designated initializer. It creates an ad.
/// \param title The title of the ad.
///
/// \param adId The id of the ad.
///
/// \param beginTime The time in the video in which the ad will play.
///
/// \param duration The duration of the ad.
///
/// \param properties The properties of the ad.
///
///
/// returns:
/// An initialized ad.
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title adId:(NSString * _Nonnull)adId beginTime:(CMTime)beginTime duration:(CMTime)duration properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
/// Returns true if <code>ad</code> is equivalent to this instance.
/// \param ad The ad to test for equivalence with this instance.
///
///
/// returns:
/// Whether <code>ad</code> is equivalent to this instance.
- (BOOL)isEqualToAd:(BCOVAd * _Nonnull)ad SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This object represents a sequence of ads intended to be viewed in sequence,
/// at the same point in the video.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK14BCOVAdSequence")
@interface BCOVAdSequence : NSObject
/// The begin time of the sequence.
@property (nonatomic, readonly) CMTime beginTime;
/// The duration of the sequence.
@property (nonatomic, readonly) CMTime duration;
/// /The ads that make up the sequence.
@property (nonatomic, readonly, copy) NSArray<BCOVAd *> * _Nonnull ads;
/// The properties of the sequence.
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
/// This is the designated initializer. It creates an ad sequence.
/// \param ads The ads that make up the sequence.
///
/// \param properties The properties of the ad sequence.
///
///
/// returns:
/// An initialized ad sequence.
- (nonnull instancetype)initWithAds:(NSArray<BCOVAd *> * _Nonnull)ads properties:(NSDictionary * _Nonnull)properties OBJC_DESIGNATED_INITIALIZER;
/// Returns true  if <code>adSequence</code> is equivalent to this instance.
/// \param adSequence The ad sequence to test for equivalence with this instance.
///
///
/// returns:
/// Whether <code>adSequence</code> is equivalent to this instance.
- (BOOL)isEqualToAdSequence:(BCOVAdSequence * _Nonnull)adSequence SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BCOVBasicSessionProviderOptions;

/// The basic playback session provider provides core functionality to yield
/// playback sessions corresponding to an enumeration of BCOVVideo objects.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK24BCOVBasicSessionProvider")
@interface BCOVBasicSessionProvider : NSObject <BCOVPlaybackSessionProvider>
/// Returns a basic session provider initialized with the specified options.
/// \param options The options for the session provider to return.
///
///
/// returns:
/// A basic playback session provider configured with the specified options.
- (nonnull instancetype)initWithOptions:(BCOVBasicSessionProviderOptions * _Nullable)options OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BCOVVideo;
@class BCOVSource;

/// Optional configuration for basic session providers.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK31BCOVBasicSessionProviderOptions")
@interface BCOVBasicSessionProviderOptions : NSObject
/// The default policy selects the first source with a deliveryType of “HLS”. If no
/// source is found, it falls back to first source with a deliveryType of
/// “MP4”. If neither are found, it returns nil.
@property (nonatomic, copy) BCOVSource * _Nullable (^ _Nonnull sourceSelectionPolicy)(BCOVVideo * _Nullable);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The basic source selection policy decides which source to select from a BCOVVideo object.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK30BCOVBasicSourceSelectionPolicy")
@interface BCOVBasicSourceSelectionPolicy : NSObject <NSCopying>
/// Select the first video in HLS with the specified scheme.
/// If no such source is found, the first HLS source with any scheme is returned.
/// If no HLS sources are present, the first MP4 is returned.
/// If none of the above is found, the first source of any kind is returned.
/// This is the default source selection policy (using BCOVSource.URLSchemeHTTPS as the scheme).
/// \param scheme The preferred scheme (BCOVSource.URLSchemeHTTP or BCOVSource.URLSchemeHTTPS) of the source URL.
///
///
/// returns:
/// A source selection policy that prefers HLS with the specified scheme.
+ (BCOVBasicSessionProviderSourceSelectionPolicy _Nonnull)sourceSelectionHLSWithScheme:(NSString * _Nonnull)scheme SWIFT_WARN_UNUSED_RESULT;
/// Select the first video in HLS, regardless of scheme.
/// If no HLS source is found, select the first source with a deliveryType of
/// “MP4”. If neither is found, the first source of any kind is returned.
///
/// returns:
/// A source selection policy that prefers HLS over MP4.
+ (BCOVBasicSessionProviderSourceSelectionPolicy _Nonnull)sourceSelectionHLS SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BCOVComponentIdentity;

/// Objects which must be registered with the BCOVPlayerSDKManager in order to
/// activate their functionality should conform to the BCOVComponent protocol.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK13BCOVComponent_")
@protocol BCOVComponent <NSObject>
/// Uniquely identifies this component with the returned component identity.
@property (nonatomic, readonly, strong) id <BCOVComponentIdentity> _Nonnull bcov_componentIdentity;
@optional
/// This method allows the BCOVPlayerSDKManager to supply contextual information
/// to this component when it is registered.
/// \param componentContext The contextual information to be communicated to this component.
///
- (void)bcov_setComponentContext:(NSDictionary * _Nonnull)componentContext;
@end


/// Identifies a BCOVComponent to the BCOVPlayerSDKManager.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK21BCOVComponentIdentity_")
@protocol BCOVComponentIdentity <NSObject>
/// A concrete class which uniquely identifies an object that conforms to the
/// BCOVComponent protocol.
@property (nonatomic, readonly) Class _Nonnull componentClass;
/// An identifier which uniquely identifies a specific version of an object that
/// conforms to the BCOVComponent protocol. This identifier should be updated
/// whenever a new version of the component is released, to help in identifying
/// which specific components have been registered with the BCOVPlayerSDKManager.
@property (nonatomic, readonly, copy) NSString * _Nonnull versionIdentifier;
@end

@class BCOVMutableCuePoint;
@class BCOVCuePoint;

/// Value class representing a cue point in the Brightcove Player SDK ecosystem.
/// A cue point is used to specify a position on the timeline of a piece of
/// content that can be used for any purpose (often for programmatic control
/// over when advertisements should be shown). When playback reaches a cue point,
/// the playback session sends an event on its <code>cuePoints</code> signal that includes
/// the BCOVCuePoint value.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK20BCOVCuePointProtocol_")
@protocol BCOVCuePointProtocol <NSObject>
/// The time at which the cue point occurs on the timeline of the BCOVVideo
/// which owns it.
@property (nonatomic, readonly) CMTime position;
/// An identifier for the kind of this cue point. There is no predetermined
/// enumeration of values for this property. The value to use may be required
/// by certain Brightcove Player SDK for iOS plugins, or it can be used for
/// some other client-specific purpose. The core SDK does not use this value.
@property (nonatomic, readonly, copy) NSString * _Nullable type;
/// Additional properties of the cue point. The keys and values are unspecified,
/// specific keys or values may be required by certain Brightcove Player SDK for
/// iOS plugins, or it can be used for some other client-specific purpose. The
/// core SDK does not use this value.
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nonnull properties;
/// Returns a modified version of this cue point. Because BCOVCuePoint objects
/// are immutable, an entirely new BCOVCuePoint must be created even if only
/// a single change is needed. Therefore, this method provides a convenient way
/// to obtain a temporary mutable copy of this instance and modify it (within
/// <code>updateBlock</code>).
/// Do not attempt to save a reference to the mutable cue point passed to
/// <code>updateBlock</code>, as the behavior of doing this is undefined. Instead, make
/// whatever modifications are necessary in the block and then capture the cue
/// point object returned from this method.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     updateBlock A block which is passed a mutable copy of this cue point.
///   </li>
/// </ul>
///
/// returns:
/// The copy of this cue point modified by <code>updateBlock</code>.
- (BCOVCuePoint * _Nonnull)update:(SWIFT_NOESCAPE void (^ _Nonnull)(BCOVMutableCuePoint * _Nonnull))updateBlock SWIFT_WARN_UNUSED_RESULT;
@end


/// Implementation of BCOVCuePointProtocol.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK12BCOVCuePoint")
@interface BCOVCuePoint : NSObject <BCOVCuePointProtocol, NSCopying, NSMutableCopying>
/// Cue point type representing the start of an ad slot
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TypeAdSlot;)
+ (NSString * _Nonnull)TypeAdSlot SWIFT_WARN_UNUSED_RESULT;
/// Cue point type representing a companion ad
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TypeAdCompanion;)
+ (NSString * _Nonnull)TypeAdCompanion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyName;)
+ (NSString * _Nonnull)PropertyKeyName SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly) CMTime position;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nonnull properties;
/// The cue point position immediately before the first time interval of the
/// video which owns it. This is generally used to implement pre-roll ad
/// functionality.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CMTime PositionTypeBefore;)
+ (CMTime)PositionTypeBefore SWIFT_WARN_UNUSED_RESULT;
/// The cue point position immediately after the last time interval of the
/// video which owns it. This is generally used to implement post-roll ad
/// functionality.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CMTime PositionTypeAfter;)
+ (CMTime)PositionTypeAfter SWIFT_WARN_UNUSED_RESULT;
/// Constructs a new cue point with the specified type and position.
/// \param type The type of the new cue point.
/// -position The position of the new cue point.
///
///
/// returns:
/// A new cue point with the specified type and position.
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type position:(CMTime)position OBJC_DESIGNATED_INITIALIZER;
/// Constructs a new cue point with the specified type, position, and properties.
/// \param type The type of the new cue point.
///
/// \param position The position of the new cue point.
///
/// \param properties The properties of the new cue point.
///
///
/// returns:
/// A new cue point with the specified type, position, and properties.
- (nonnull instancetype)initWithType:(NSString * _Nullable)type position:(CMTime)position properties:(NSDictionary<NSString *, NSObject *> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
- (BCOVCuePoint * _Nonnull)update:(SWIFT_NOESCAPE void (^ _Nonnull)(BCOVMutableCuePoint * _Nonnull))updateBlock SWIFT_WARN_UNUSED_RESULT;
/// Returns an NSComparisionResult indicating whether this cue point’s position
/// is earlier, the same, or later than the position of <code>cuePoint</code>. Only
/// positions are compared.
/// \param cuePoint The cue point whose position is to be compared with this instance.
///
///
/// returns:
/// Whether this cue point’s position is earlier, the same, or later.
- (enum NSComparisonResult)compare:(BCOVCuePoint * _Nonnull)cuePoint SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if this instance’s position is <code>position</code>.
/// \param position The position to test this instance’s position against.
///
///
/// returns:
/// Whether this instance has the specified position.
- (BOOL)hasPosition:(CMTime)position SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if <code>cuePoint</code> is equivalent to this instance.
/// \param cuePoint The cue point to test for equivalence with this instance.
///
///
/// returns:
/// Whether <code>cuePoint</code> is equivalent to this instance.
- (BOOL)isEqualToCuePoint:(BCOVCuePoint * _Nullable)cuePoint SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
/// Returns a cue point with the specified type and properties whose position is
/// kBCOVCuePointPositionTypeAfter.
/// \param type The type of the cue point to return.
///
/// \param properties The properties of the cue point to return.
///
///
/// returns:
/// The “after” cue point with the specified type and properties.
+ (BCOVCuePoint * _Nonnull)afterCuePointOfType:(NSString * _Nullable)type properties:(NSDictionary<NSString *, NSObject *> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
/// Returns a cue point with the specified type and properties whose position is
/// kBCOVCuePointPositionTypeBefore.
/// \param type The type of the cue point to return.
///
/// \param properties The properties of the cue point to return.
///
///
/// returns:
/// The “before” cue point with the specified type and properties.
+ (BCOVCuePoint * _Nonnull)beforeCuePointOfType:(NSString * _Nullable)type properties:(NSDictionary<NSString *, NSObject *> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
/// Returns a cue point with the specified type and properties whose position in
/// seconds is at <code>positionInSeconds</code>.
/// \param type The type of the cue point to return.
///
/// \param positionInSeconds The position (in seconds) of this cue point into the timeline of the video which owns it.
///
/// \param properties The properties of the cue point to return.
///
///
/// returns:
/// The cue point with the specified type, position, and properties.
+ (BCOVCuePoint * _Nullable)cuePointWithType:(NSString * _Nullable)type positionInSeconds:(NSTimeInterval)positionInSeconds properties:(NSDictionary<NSString *, NSObject *> * _Nullable)properties SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A collection of cue points, each element ordered by its position according
/// to the natural ordering of CMTime values.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK22BCOVCuePointCollection")
@interface BCOVCuePointCollection : NSObject
/// Constructs and returns a BCOVCuePointCollection from the cue points in the
/// specified array. The returned collection will be ordered according to the
/// positions of the cue points. The ordering of multiple cue points with
/// the same position is not guaranteed.
/// \param cuePoints The new cue point collection’s cue points.
///
///
/// returns:
/// The new cue point collection with the specified cue points.
- (nonnull instancetype)initWithArray:(NSArray<BCOVCuePoint *> * _Nullable)cuePoints;
/// Constructs and returns a BCOVCuePointCollection with a single cue point.
/// \param cuePoint The new cue point collection’s cue point.
///
///
/// returns:
/// The new cue point collection with the specified cue point.
- (nonnull instancetype)initWithCuePoint:(BCOVCuePoint * _Nullable)cuePoint;
/// Returns this collection’s cue point objects in an array. The elements of the
/// array will have the same order as the ordering of cue points in this
/// collection.
///
/// returns:
/// This collection’s cue points in an array.
@property (nonatomic, readonly, copy) NSArray<BCOVCuePoint *> * _Nonnull array;
/// Returns the number of cue points in this collection.
///
/// returns:
/// The number of cue points in this collection.
@property (nonatomic, readonly) NSInteger count;
/// Returns all cue points in this collection after the specified time.
/// \param time The time after which corresponding cue points should be returned.
///
///
/// returns:
/// All cue points in this collection after the specified time.
- (BCOVCuePointCollection * _Nonnull)cuePointsAfterTime:(CMTime)time SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection before the specified time.
/// \param time The time before which corresponding cue points should be returned.
///
///
/// returns:
/// All cue points in this collection before the specified time.
- (BCOVCuePointCollection * _Nonnull)cuePointsBeforeTime:(CMTime)time SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection at exactly the specified time.
/// \param time The time at which corresponding cue points should be returned.
///
///
/// returns:
/// All cue points in this collection at exactly the specified time.
- (BCOVCuePointCollection * _Nonnull)cuePointsAtTime:(CMTime)time SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection at or after the specified time.
/// \param time The time at or after which corresponding cue points should be returned.
///
///
/// returns:
/// All cue points in this collection at or after the specified time.
- (BCOVCuePointCollection * _Nonnull)cuePointsAtOrAfterTime:(CMTime)time SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection at or before the specified time.
/// \param time The time at or before which corresponding cue points should be eturned.
///
///
/// returns:
/// All cue points in this collection at or before the specified time.
- (BCOVCuePointCollection * _Nonnull)cuePointsAtOrBeforeTime:(CMTime)time SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection between the specified times.
/// \param lowerBound The lower boundary, at or below which cue points should not be returned.
///
/// \param upperBound The upper boundary, at or above which cue points should not be returned.
///
///
/// returns:
/// All cue points in this collection between the specified times.
- (BCOVCuePointCollection * _Nonnull)cuePointsAfterTime:(CMTime)lowerBound beforeTime:(CMTime)upperBound SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection between the specified times,
/// inclusive of the upper bound.
/// \param lowerBound The lower boundary, at or below which cue points should not be returned.
///
/// \param upperBound The upper boundary, above which cue points should not be returned.
///
///
/// returns:
/// All cue points in this collection between the specified times.
- (BCOVCuePointCollection * _Nullable)cuePointsAfterTime:(CMTime)lowerBound atOrBeforeTime:(CMTime)upperBound SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection between the specified times,
/// inclusive of the lower bound.
/// \param lowerBound The lower boundary, below which cue points should not be returned.
///
/// \param upperBound The upper boundary, at or above which cue points should not be returned.
///
///
/// returns:
/// All cue points in this collection between the specified times.
- (BCOVCuePointCollection * _Nonnull)cuePointsAtOrAfterTime:(CMTime)lowerBound beforeTime:(CMTime)upperBound SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection, at or between the specified times.
/// \param lowerBound The lower boundary, below which cue points should not be returned.
///
/// \param upperBound The upper boundary, above which cue points should not be returned.
///
///
/// returns:
/// All cue points in this collection, at or between the specified times.
- (BCOVCuePointCollection * _Nonnull)cuePointsAtOrAfterTime:(CMTime)lowerBound atOrBeforeTime:(CMTime)upperBound SWIFT_WARN_UNUSED_RESULT;
/// Returns all cue points in this collection of the specified type.
/// \param type The type of cue points to be returned.
///
///
/// returns:
/// All cue points in this collection, of the specified type.
- (BCOVCuePointCollection * _Nonnull)cuePointsOfType:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if this instance has the same cue points in the same order as <code>collection</code>.
/// \param collection The collection with which to compare this instance.
///
///
/// returns:
/// Whether this instance is equivalent to <code>collection</code>.
- (BOOL)isEqualToCollection:(BCOVCuePointCollection * _Nullable)collection SWIFT_WARN_UNUSED_RESULT;
/// Returns the cue point at the specified index, or nil if the specified index
/// is greater than the highest index into the collection.
/// \param index The index into this collection of the desired cue point.
///
///
/// returns:
/// The cue point at the specified index, or nil if this collection does not have a cue point at that index.
- (BCOVCuePoint * _Nullable)objectAtIndexedSubscript:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// A boolean value to ignore cuepoints. This may be useful
/// if ads are being played in the current AVPlayer instance
/// and you want to ignore progress events temporarily until
/// the primary video is swapped back in.
@property (nonatomic) BOOL ignoreCuePoints;
/// Returns a new cue point collection containing the specified cue points.
/// \param cuePoints An array of cue point objects to include in the collection.
///
///
/// returns:
/// A new cue point collection containing the specified cue points.
+ (BCOVCuePointCollection * _Nonnull)collectionWithArray:(NSArray<BCOVCuePoint *> * _Nonnull)cuePoints SWIFT_WARN_UNUSED_RESULT;
/// Returns a singleton cue point collection containing no cue points.
///
/// returns:
/// A singleton cue point collection containing no cue points.
+ (BCOVCuePointCollection * _Nonnull)emptyCollection SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BCOVCuePointCollection (SWIFT_EXTENSION(BrightcovePlayerSDK)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


@interface BCOVCuePointCollection (SWIFT_EXTENSION(BrightcovePlayerSDK))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
@end


@interface BCOVCuePointCollection (SWIFT_EXTENSION(BrightcovePlayerSDK))
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end



typedef SWIFT_ENUM(NSInteger, BCOVEconomics, open) {
  BCOVEconomicsAdSupported = 0,
  BCOVEconomicsFree = 1,
  BCOVEconomicsPublisherPays = 2,
  BCOVEconomicsPayMedia = 3,
};

@class NSError;

SWIFT_CLASS("_TtC19BrightcovePlayerSDK19BCOVErrorTranslator")
@interface BCOVErrorTranslator : NSObject
/// Returns a human readable error code from an <code>NSError</code>
/// The Brightcove iOS SDK has a number <code>NSError</code> objects that are created
/// in various instances, each one within a specific error domain with a specific error code.
/// This class can be used to translate one of these <code>NSError</code> object’s error code into a
/// human readable string.
/// \param error The NSError object to translate.
///
///
/// returns:
/// A readable error code. May be <code>nil</code> if the <code>NSError</code> is not an internal Brightcove error.
+ (NSString * _Nullable)readableErrorCodeForError:(NSError * _Nonnull)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, BCOVFPSAuthProxyErrorCode, open) {
/// Request for Application Certificate failed.
  BCOVFPSAuthProxyErrorCodeApplicationCertificateRequestFailed = 69401,
/// Request for Key failed.
  BCOVFPSAuthProxyErrorCodeContentKeyRequestFailed = 69402,
/// Key request generation failed.
  BCOVFPSAuthProxyErrorCodeContentKeyGenerationFailed = 69403,
  BCOVFPSAuthProxyErrorCodeNoKeyRequestURLForRendition = 69404,
};

@class AVAssetResourceLoadingRequest;
@class NSData;
@class AVContentKeyRequest;
@class NSURLResponse;
@class NSDate;

/// Implement this protocol when interacting with a custom FPS license server.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK25BCOVFPSAuthorizationProxy_")
@protocol BCOVFPSAuthorizationProxy <NSObject>
@optional
/// Optional method.
/// This method is only called when downloading a video when the license has not
/// been preloaded prior to downloading.
/// Implement this method to handle retrieving the content identifier from the loading request.
/// This is called for each asset.
/// No guarantee is made as to the thread that this is called on.
/// You should return the content identifier corresponding to this loading request.
/// This is typically extracted from the “skd://…” URL in loadingRequest.request.URL.
/// The content identifier will be passed to [AVAssetResourceLoadingRequest
/// streamingContentKeyRequestDataForApp:contentIdentifier:options:error:]
/// to retrieve the SPC.
/// If this method is not provided, the default method will be used. The default method
/// removes “skd://” from loadingRequest.request.URL to generate the content identifier.
/// \param loadingRequest The skd:// loading request made for the asset.
///
///
/// returns:
/// The content identifier in a Data object.
- (NSData * _Nullable)contentIdentifierFromLoadingRequest:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest SWIFT_WARN_UNUSED_RESULT;
@required
/// Implement this method to handle retrieving the content identifier from the content key request.
/// This is called for each asset.
/// No guarantee is made as to the thread that this is called on.
/// You should return the content identifier corresponding to this content key request.
/// This is typically extracted from the “skd://…” value in keyRequest.identifier.
/// The content identifier will be passed to [AVContentKeySession makeStreamingContentKeyRequestDataForApp:
/// contentIdentifier:options:completionHandler] to retrieve the SPC.
/// \param keyRequest The AVContentKeyRequest for the asset.
///
///
/// returns:
/// The content identifier in a Data object.
- (NSData * _Nullable)contentIdentifierFromKeyRequest:(AVContentKeyRequest * _Nullable)keyRequest SWIFT_WARN_UNUSED_RESULT;
/// Implement this method to handle retrieving the content key for a video that
/// is being downloaded for offline playback. This is called for each asset.
/// No guarantee is made as to the thread that this is called on.
/// \param contentKeyIdentifier The “skd://…” loading request URL string made for the asset.
///
/// \param keyRequest The key request data returned by [AVAssetResourceLoadingRequest streamingContentKeyRequestDataForApp:contentIdentifier:options:error:].
///
/// \param source The BCOVSource used to make this request.
///
/// \param options The parameters originally passed to <code>-BCOVOfflineVideoManager requestVideoDownload:mediaSelections:parameters:completion:</code>
///
/// \param completionHandler The completion handler to return the content key. If returning an error, you must leave the contentkey and response parameters nil.
///
- (void)encryptedContentKeyForContentKeyIdentifier:(NSString * _Nonnull)contentKeyIdentifier contentKeyRequest:(NSData * _Nullable)keyRequest source:(BCOVSource * _Nullable)source options:(NSDictionary * _Nullable)options completionHandler:(void (^ _Nonnull)(NSURLResponse * _Nullable, NSData * _Nullable, NSDate * _Nullable, NSError * _Nullable))completionHandler;
@end

@class NSURL;
@class NSURLSession;

/// Class responsible for interacting with Brightcove FairPlay services.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK26BCOVFPSBrightcoveAuthProxy")
@interface BCOVFPSBrightcoveAuthProxy : NSObject <BCOVFPSAuthorizationProxy>
/// Error domain for FairPlay Auth Proxy related errors.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorDomain;)
+ (NSString * _Nonnull)ErrorDomain SWIFT_WARN_UNUSED_RESULT;
/// Key for retreiving response data from an NSError object’s userInfo dictionary.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ResponseData;)
+ (NSString * _Nonnull)ResponseData SWIFT_WARN_UNUSED_RESULT;
/// The base url for FairPlay related license requests. The default URL points to
/// fps.brightcove.com.
/// If set to nil, the default URL pointing at fps.brightcove.com will be re-created.
@property (nonatomic, copy) NSURL * _Nullable fpsBaseURL;
/// The key request URL for FairPlay related key requests.
/// Normally set to nil, in which case the key request URL
/// will be retrieved from the Video Cloud Playback API response.
@property (nonatomic, copy) NSURL * _Nullable keyRequestURL;
/// URLSession shared across all network calls to the BCOVFPSBrightcoveAuthProxy.
/// This object is created when the Playback Service is initialized.
/// If you wish to use your own URLSession you can set it here.
/// If set to nil, the default URLSession will be re-created.
@property (nonatomic, strong) NSURLSession * _Nullable sharedURLSession;
/// Creates a BCOVFPSAuthorizationProxy to interacts with fps.brightcove.com.
/// \param pubId The publisher id. Must not be nil.
///
/// \param appId The application id registered with fps.brightcove.com. May be nil
/// if not using fps.brightcove.com.
///
///
/// returns:
/// An initialized proxy.
- (nonnull instancetype)initWithPublisherId:(NSString * _Nullable)pubId applicationId:(NSString * _Nullable)appId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Retrieves the Application Certificate. This should be done as soon as possible
/// and should be cached for no longer than 6 hours.
/// \param completionHandler Executed when the request is completed. If applicationCetificate
/// is nil, the error will be populated. The block
/// will be executed on the main thread.
///
- (void)retrieveApplicationCertificate:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completionHandler;
@end


@interface BCOVFPSBrightcoveAuthProxy (SWIFT_EXTENSION(BrightcovePlayerSDK))
- (NSData * _Nullable)contentIdentifierFromLoadingRequest:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest SWIFT_WARN_UNUSED_RESULT;
- (NSData * _Nullable)contentIdentifierFromKeyRequest:(AVContentKeyRequest * _Nullable)keyRequest SWIFT_WARN_UNUSED_RESULT;
- (void)encryptedContentKeyForContentKeyIdentifier:(NSString * _Nonnull)contentKeyIdentifier contentKeyRequest:(NSData * _Nullable)keyRequest source:(BCOVSource * _Nullable)source options:(NSDictionary * _Nullable)options completionHandler:(void (^ _Nonnull)(NSURLResponse * _Nullable, NSData * _Nullable, NSDate * _Nullable, NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS("_TtC19BrightcovePlayerSDK16BCOVFPSConstants")
@interface BCOVFPSConstants : NSObject
/// Error domain for FairPlay related errors.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorDomain;)
+ (NSString * _Nonnull)ErrorDomain SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, BCOVFPSErrorCode, open) {
/// Error occured requesting content key.
  BCOVFPSErrorCodeStreamingContentKeyRequest = 69401,
/// Error occured requesting application certificate.
  BCOVFPSErrorCodeApplicationCertificateRequest = 69404,
};


SWIFT_CLASS("_TtC19BrightcovePlayerSDK19BCOVFairPlayLicense")
@interface BCOVFairPlayLicense : NSObject
/// A Boolean boxed in an NSValue.
/// If <code>true</code>, the downloaded FairPlay content will be assigned
/// a license that does not expire.
/// If absent or <code>false</code>, the <code>BCOVFairPlayLicense/RentalDurationKey</code> must be set.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PurchaseKey;)
+ (NSString * _Nonnull)PurchaseKey SWIFT_WARN_UNUSED_RESULT;
/// Specifies the rental duration of the FairPlay license, in seconds.
/// The number should be a positive integer greater than zero.
/// The rental period begins as soon as the download request is made.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull RentalDurationKey;)
+ (NSString * _Nonnull)RentalDurationKey SWIFT_WARN_UNUSED_RESULT;
/// Specifies the duration of the FairPlay License, in seconds,
/// after playback has started.
/// The number should be a positive integer greater than zero.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PlayDurationKey;)
+ (NSString * _Nonnull)PlayDurationKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC19BrightcovePlayerSDK19BCOVFairPlayManager")
@interface BCOVFairPlayManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorDomain;)
+ (NSString * _Nonnull)ErrorDomain SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Attempts to preload content keys for FairPlay protected videos. Typically
/// a content key for a FairPlay protected video is processed when the video
/// begins playback. By preloading the content key you can improve the playback
/// startup experience for your users.
/// This is only applicable to online videos and will not have any effect on offline videos.
/// \param videos The source of BCOVVideo objects for which content keys
/// will be processed.
///
+ (void)preloadContentKeysForVideos:(NSArray<BCOVVideo *> * _Nonnull)videos;
@end



SWIFT_CLASS("_TtC19BrightcovePlayerSDK31BCOVFairPlayOnlineLicenseHelper")
@interface BCOVFairPlayOnlineLicenseHelper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVContentKeySession;

@interface BCOVFairPlayOnlineLicenseHelper (SWIFT_EXTENSION(BrightcovePlayerSDK)) <AVContentKeySessionDelegate>
- (void)contentKeySession:(AVContentKeySession * _Nonnull)session didProvideContentKeyRequest:(AVContentKeyRequest * _Nonnull)keyRequest;
- (void)contentKeySession:(AVContentKeySession * _Nonnull)session didProvideRenewingContentKeyRequest:(AVContentKeyRequest * _Nonnull)keyRequest;
- (BOOL)contentKeySession:(AVContentKeySession * _Nonnull)session shouldRetryContentKeyRequest:(AVContentKeyRequest * _Nonnull)keyRequest reason:(AVContentKeyRequestRetryReason _Nonnull)retryReason SWIFT_WARN_UNUSED_RESULT;
- (void)contentKeySession:(AVContentKeySession * _Nonnull)session contentKeyRequest:(AVContentKeyRequest * _Nonnull)keyRequest didFailWithError:(NSError * _Nonnull)err;
@end


/// The Global Configuration contains properties which are utilized throughout
/// the Native Player SDK. If your app requires custom configuration,
/// set the necessary properties of the Global Configuration BEFORE using any
/// of the services of the Native Player SDK.
/// BCOVGlobalConfiguration is a global singleton object. Reference it using:
/// let config = BCOVGlobalConfiguration.shareConfig
SWIFT_CLASS("_TtC19BrightcovePlayerSDK23BCOVGlobalConfiguration")
@interface BCOVGlobalConfiguration : NSObject
/// Returns the shared Global Configuration singleton.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BCOVGlobalConfiguration * _Nonnull sharedConfig;)
+ (BCOVGlobalConfiguration * _Nonnull)sharedConfig SWIFT_WARN_UNUSED_RESULT;
/// Allow playback when device is on cellular data.
/// Changing this value during playback will not stop playback of the current video
/// if the device changes over to cellular data.
/// Example Usage:
/// BCOVGlobalConfiguration.sharedConfig.allowsCellularPlayback = false;
/// Default value is true.
@property (nonatomic) BOOL allowsCellularPlayback;
/// Sets a custom, fully qualified domain name (FQDN) for Catalog API, Metrics and
/// Analytics collection services. This method is to be used specifically for
/// reliable content delivery in China and requires particular account arrangements.
/// Setting this property in any other situation will result in unknown behavior.
@property (nonatomic, copy) NSString * _Nullable chinaProxyDomain;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIView;

SWIFT_CLASS("_TtC19BrightcovePlayerSDK27BCOVInteractivityAnnotation")
@interface BCOVInteractivityAnnotation : NSObject
@property (nonatomic, strong) UIView * _Nullable annotationView;
@property (nonatomic) BCOVInteractivityAnnotationType type;
@property (nonatomic) BCOVInteractivityAnnotationState state;
@property (nonatomic) BCOVInteractivityAnnotationTransition transition;
/// Properties from API
@property (nonatomic, copy) NSString * _Nullable annotationId;
@property (nonatomic) NSTimeInterval startTime;
@property (nonatomic) NSTimeInterval duration;
@property (nonatomic, copy) NSString * _Nullable rawType;
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSString * _Nonnull left;
@property (nonatomic, copy) NSString * _Nonnull top;
@property (nonatomic, copy) NSString * _Nonnull width;
@property (nonatomic, copy) NSString * _Nonnull height;
@property (nonatomic, copy) NSString * _Nullable url;
@property (nonatomic, copy) NSString * _Nullable precondition;
@property (nonatomic, copy) NSString * _Nullable command;
@property (nonatomic, copy) NSString * _Nullable mode;
@property (nonatomic, copy) NSDictionary * _Nullable commandData;
@property (nonatomic, copy) NSDictionary * _Nullable onClick;
@property (nonatomic, copy) NSString * _Nullable gotoTrack;
@property (nonatomic, copy) NSString * _Nullable backgroundColor;
+ (NSArray<BCOVInteractivityAnnotation *> * _Nonnull)annotationsFromJSONArray:(NSArray<NSDictionary *> * _Nonnull)jsonArray SWIFT_WARN_UNUSED_RESULT;
+ (BCOVInteractivityAnnotation * _Nonnull)initWithJSON:(NSDictionary * _Nonnull)json SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
@end

@class UIImageView;
@class UILabel;
@class NSCoder;
@class UIFocusUpdateContext;
@class UIFocusAnimationCoordinator;

SWIFT_CLASS("_TtC19BrightcovePlayerSDK24BCOVInteractivityControl")
@interface BCOVInteractivityControl : UIControl
/// The annotation associatd with this control
@property (nonatomic, weak) BCOVInteractivityAnnotation * _Nullable annotation;
/// The UIImageView used for image annotations
@property (nonatomic, strong) UIImageView * _Nullable imageView;
/// The UILabel used for text annotations
@property (nonatomic, strong) UILabel * _Nullable textLabel;
@property (nonatomic, strong) UIView * _Nullable floatingView;
@property (nonatomic, readonly) BOOL canBecomeFocused;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)didUpdateFocusInContext:(UIFocusUpdateContext * _Nonnull)context withAnimationCoordinator:(UIFocusAnimationCoordinator * _Nonnull)coordinator;
@end

@protocol BCOVInteractivityHandlerDelegate;
@class BCOVInteractivityProject;
@protocol BCOVPlaybackController;

SWIFT_CLASS("_TtC19BrightcovePlayerSDK24BCOVInteractivityHandler")
@interface BCOVInteractivityHandler : NSObject
@property (nonatomic, weak) id <BCOVInteractivityHandlerDelegate> _Nullable delegate;
/// The current <code>BCOVInteractivityProject</code>
@property (nonatomic, readonly, strong) BCOVInteractivityProject * _Nullable interactivityProject;
- (nonnull instancetype)initWithAccountId:(NSString * _Nonnull)accountId projectId:(NSString * _Nonnull)projectId containerView:(UIView * _Nonnull)containerView playbackController:(id <BCOVPlaybackController> _Nonnull)playbackController OBJC_DESIGNATED_INITIALIZER;
/// Enable a precondition that show any annotations configured with the precondition
/// \param precondition The precondition string
///
- (void)enablePrecondition:(NSString * _Nonnull)precondition;
/// Disable a precondition that hide any annotations configured with the precondition
/// \param precondition The precondition string
///
- (void)disablePrecondition:(NSString * _Nonnull)precondition;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol BCOVPlaybackSession;

/// Conform to this protocol to receive basic ad information for each session.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK30BCOVPlaybackSessionAdsConsumer_")
@protocol BCOVPlaybackSessionAdsConsumer <NSObject>
@optional
/// Called when playback enters a new ad sequence within a playback session.
/// \param session The playback session within which the ad transition occurred.
///
/// \param adSequence The ad sequence being entered.
///
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didEnterAdSequence:(BCOVAdSequence * _Nonnull)adSequence;
/// Called when playback exits an ad sequence within a playback session.
/// \param session The playback session within which the ad transition occurred.
///
/// \param adSequence The ad sequence being exited.
///
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didExitAdSequence:(BCOVAdSequence * _Nonnull)adSequence;
/// Called when playback exists an ad within a playback session.
/// \param session The playback session within which the ad transition occurred.
///
/// \param ad The ad being entered.
///
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didEnterAd:(BCOVAd * _Nonnull)ad;
/// Called when playback enters a new ad within a playback session.
/// \param session The playback session within which the ad transition occurred.
///
/// \param ad The ad being exited.
///
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didExitAd:(BCOVAd * _Nonnull)ad;
/// Called with the playback session’s ad playback progress.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     session The playback session within which the ad transition occurred.
///   </li>
///   <li>
///     ad The ad that is progressing.
///   </li>
///   <li>
///     progress The progress time of the ad.
///   </li>
/// </ul>
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session ad:(BCOVAd * _Nonnull)ad didProgressTo:(NSTimeInterval)progress;
/// Called when an ad paused.
/// \param session The playback session within which the ad transition occurred.
///
/// \param ad The ad being paused.
///
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didPauseAd:(BCOVAd * _Nonnull)ad;
/// Called when an ad resumed.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     session The playback session within which the ad transition occurred.
///   </li>
///   <li>
///     ad The ad being resumed.
///   </li>
/// </ul>
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didResumeAd:(BCOVAd * _Nonnull)ad;
@end


/// Conform to this protocol to receive basic playback information for each video in
/// addition to advertising.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK27BCOVPlaybackSessionConsumer_")
@protocol BCOVPlaybackSessionConsumer <BCOVPlaybackSessionAdsConsumer, BCOVPlaybackSessionBasicConsumer, BCOVPlaybackSessionBumperConsumer>
@end

@class BCOVPlaybackSessionLifecycleEvent;

@interface BCOVInteractivityHandler (SWIFT_EXTENSION(BrightcovePlayerSDK)) <BCOVPlaybackSessionConsumer>
- (void)didAdvanceToPlaybackSession:(id <BCOVPlaybackSession> _Nonnull)session;
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didProgressTo:(NSTimeInterval)progress;
- (void)playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didReceiveLifecycleEvent:(BCOVPlaybackSessionLifecycleEvent * _Nonnull)lifecycleEvent;
@end

@class UIFont;
@class UIColor;

SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK32BCOVInteractivityHandlerDelegate_")
@protocol BCOVInteractivityHandlerDelegate <NSObject>
@optional
/// This delegate method is called if the GET request for fetching the
/// Interactivity project is successful.
/// \param project The <code>BCOVInteractivityProject</code> that was created.
///
- (void)projectWasCreated:(BCOVInteractivityProject * _Nonnull)project;
/// This delegate method is called if the GET request for fetching the
/// Interactivity project fails.
/// \param error The error that was returned.
///
- (void)projectRequestFailed:(NSError * _Nonnull)error;
/// The animation timing for a given transition class.
/// Currently only the “Fade” transition is supported.
/// The default value is <code>0.35</code>
/// \param transition The transition type for the annotation.
///
- (NSTimeInterval)animationTimeForTransition:(BCOVInteractivityAnnotationTransition)transition SWIFT_WARN_UNUSED_RESULT;
/// The desired font for a text annotation.
/// Unlike a web browser a UIFont size isn’t uniform across iPhone, iPad and tvOS.
/// We use <code>systemFontOfSize:weight:</code> with the font size being 0.018%
/// of AVPlayerLayer’s videoRect width and a weight of <code>UIFontWeightMedium</code>
/// You can use this delegate method to ovewrite the default UIFont.
/// If using a custom font make sure to follow Apple’s guidelines on embedding fonts.
/// https://developer.apple.com/documentation/uikit/text_display_and_fonts/adding_a_custom_font_to_your_app
/// \param annotation The Annotation to be styled.
///
- (UIFont * _Nonnull)fontForTextAnnotation:(BCOVInteractivityAnnotation * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// The desired background color for a text annotation.
/// Currently we only support the “MULLINS SPECIAL” (black) and “White” themes.
/// If any other theme is selected the styling for “White” will be used.
/// For “MULLINS SPECIAL” we use RBG(68, 68, 68) with an 0.4 alpha component.
/// For “White” we use UIColor.white with an 0.5 alpha component.
/// You can use this delegate method to set a custom background color for
/// the text annotation.
/// \param annotation The Annotation to be styled.
///
- (UIColor * _Nonnull)backgroundColorForTextAnnotation:(BCOVInteractivityAnnotation * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// The desired text color for a text annotation.
/// Currently we only support the “MULLINS SPECIAL” (black) and “White” themes.
/// If any other theme is selected the styling for “White” will be used.
/// For “MULLINS SPECIAL” we use UIColor.whiteColor.
/// For “White” we use UIColor.black.
/// You can use this delegate method to set a custom text color for
/// the text annotation.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     annotation The Annotation to be styled.
///   </li>
/// </ul>
- (UIColor * _Nonnull)textColorForTextAnnotation:(BCOVInteractivityAnnotation * _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// This delegate method is called when a user taps the view of an BCOVInteractivityAnnotation
/// which has been configured with a command.
/// You can access the command and command data with the annotation’s
/// <code>command</code> and <code>commandData</code> properties.
/// You can then use those values to add additional behavior.
/// \param annotation The Annotation that was tapped.
///
- (void)annotationWasTapped:(BCOVInteractivityAnnotation * _Nonnull)annotation SWIFT_AVAILABILITY(ios,introduced=12);
/// This delegate method is called when a Time Triggered annotation becomes active
/// You can access the command and command data with the annotation’s
/// <code>command</code> and <code>commandData</code> properties.
/// You can then use those values to add additional behavior.
/// \param annotation The Annotation that was triggered.
///
- (void)annotationWasTriggered:(BCOVInteractivityAnnotation * _Nonnull)annotation;
@end


SWIFT_CLASS("_TtC19BrightcovePlayerSDK24BCOVInteractivityProject")
@interface BCOVInteractivityProject : NSObject
+ (BCOVInteractivityProject * _Nullable)projectWithJSON:(NSDictionary * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSString * _Nullable projectId;
@property (nonatomic, copy) NSString * _Nullable sessionId;
@property (nonatomic, copy) NSString * _Nullable title;
@property (nonatomic, copy) NSArray<BCOVInteractivityAnnotation *> * _Nullable annotations;
@property (nonatomic, weak) BCOVInteractivityHandler * _Nullable handler;
- (NSArray<BCOVInteractivityAnnotation *> * _Nullable)annotationsAtTime:(NSTimeInterval)time SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// When these properties are modified, the changes will take effect on the next
/// delivered session. To apply these properties to all sessions, modify them before
/// the call to -[BCOVPlaybackController setVideos:].
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK20BCOVMutableAnalytics_")
@protocol BCOVMutableAnalytics <NSObject>
/// When these properties are modified, the changes will take effect on the next
/// delivered session. To apply these properties to all sessions, modify them before
/// the call to -[BCOVPlaybackController setVideos:].
@property (nonatomic, copy) NSString * _Nullable account;
/// This property must be a URI with a valid structure and must contain
/// an authority.
/// The default value for this property, if it is not overridden, will be
/// “bcsdk://” followed by the bundle identifier.
/// Refer to http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax
/// for more information on and examples of URI syntax.
/// In particular, a destination without a hierarchical part (e.g. just a scheme)
/// is considered invalid, as is any value without a scheme.
@property (nonatomic, copy) NSString * _Nullable destination;
/// This property must be a URI with a valid structure and must contain an
/// authority.
/// The default value is nil.
/// Refer to http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax
/// for more information on and examples of URI syntax.
/// In particular, a source without a hierarchical part (e.g. just a scheme)
/// is considered invalid, as is any value without a scheme.
@property (nonatomic, copy) NSString * _Nullable source;
/// This property toggles client side unique identifier generation. If enabled,
/// the sdk will identify uniques using the device’s vendor identifier. If
/// disabled, the sdk will provide no uniques value and analytics will rely on
/// server-side driven heuristics to determine uniques.
/// The default value is <code>true</code>.
@property (nonatomic) BOOL uniqueIdentifierEnabled;
/// The authentication token used for analytics authorization.
@property (nonatomic, copy) NSString * _Nullable authToken;
/// The application ID used for analytics.
@property (nonatomic, copy) NSString * _Nullable applicationId;
/// The player ID used for analytics.
@property (nonatomic, copy) NSString * _Nullable player;
/// The player name used for analytics.
@property (nonatomic, copy) NSString * _Nullable playerName;
@end


/// Sub-protocol of BCOVCuePoint, used only in its <code>-update</code> method.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK19BCOVMutableCuePoint")
@interface BCOVMutableCuePoint : BCOVCuePoint
@property (nonatomic, copy) NSString * _Nullable type;
@property (nonatomic) CMTime position;
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nonnull properties;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type position:(CMTime)position OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithType:(NSString * _Nullable)type position:(CMTime)position properties:(NSDictionary<NSString *, NSObject *> * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end

@class BCOVMutablePlaylist;
@class BCOVPlaylist;

/// Value class representing a playlist in the Brightcove Player SDK ecosystem.
/// A playlist is an ordered collection of videos, as well as additional optional
/// metadata about the collection in the form of properties.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK20BCOVPlaylistProtocol_")
@protocol BCOVPlaylistProtocol <NSObject>
/// The BCOVVideo instances which comprise this playlist.
@property (nonatomic, readonly, copy) NSArray<BCOVVideo *> * _Nonnull videos;
/// Additional properties or metadata related to this playlist.
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
/// Returns an array of error-free BCOVVideo objects, stripping out
/// any BCOVVideo objects that contain an error.
@property (nonatomic, readonly, copy) NSArray<BCOVVideo *> * _Nonnull allPlayableVideos;
/// Returns an array of error-free BCOVVideo objects, stripping out
/// any BCOVVideo objects that contain an error.
@property (nonatomic, readonly, copy) NSArray<BCOVVideo *> * _Nonnull allFailedVideos;
/// Returns a modified version of this playlist. Because BCOVPlaylist objects
/// are immutable, an entirely new BCOVPlaylist must be created even if only
/// a single change is needed. Therefore, this method provides a convenient way
/// to obtain a temporary mutable copy of this instance and modify it (within
/// <code>updateBlock</code>).
/// Do not attempt to save a reference to the mutable playlist passed to
/// <code>updateBlock</code>, as the behavior of doing this is undefined. Instead, make
/// whatever modifications are necessary in the block and then capture the
/// playlist object returned from this method.
/// \param updateBlock A block which is passed a mutable copy of this playlist.
///
///
/// returns:
/// The copy of this cue point modified by <code>updateBlock</code>.
- (BCOVPlaylist * _Nonnull)update:(SWIFT_NOESCAPE void (^ _Nonnull)(BCOVMutablePlaylist * _Nonnull))updateBlock SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of error-free BCOVVideo objects, stripping out
/// any BCOVVideo objects that contain an error.
/// \param videos The array of vidoes to be filtered
///
///
/// returns:
/// Returns an array of error-free BCOVVideo objects
+ (NSArray<BCOVVideo *> * _Nonnull)allPlayableVideosFrom:(NSArray<BCOVVideo *> * _Nonnull)videos SWIFT_WARN_UNUSED_RESULT;
/// Returns an array of BCOVVideo objects that contain errors, stripping out
/// any BCOVVideo objects that do not contain an error.
/// \param videos The array of vidoes to be filtered
///
///
/// returns:
/// an array of BCOVVideo objects that contain errors
+ (NSArray<BCOVVideo *> * _Nonnull)allFailedVideosFrom:(NSArray<BCOVVideo *> * _Nonnull)videos SWIFT_WARN_UNUSED_RESULT;
@end


/// Implementation of the BCOVPlaylist protocol.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK12BCOVPlaylist")
@interface BCOVPlaylist : NSObject <BCOVPlaylistProtocol, NSCopying, NSMutableCopying>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertiesKeyAccountId;)
+ (NSString * _Nonnull)PropertiesKeyAccountId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertiesKeyDescription;)
+ (NSString * _Nonnull)PropertiesKeyDescription SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertiesKeyId;)
+ (NSString * _Nonnull)PropertiesKeyId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertiesKeyName;)
+ (NSString * _Nonnull)PropertiesKeyName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertiesKeyReferenceId;)
+ (NSString * _Nonnull)PropertiesKeyReferenceId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertiesKeyType;)
+ (NSString * _Nonnull)PropertiesKeyType SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSArray<BCOVVideo *> * _Nonnull videos;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
@property (nonatomic, readonly, copy) NSArray<BCOVVideo *> * _Nonnull allPlayableVideos;
@property (nonatomic, readonly, copy) NSArray<BCOVVideo *> * _Nonnull allFailedVideos;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
/// Constructs a new playlist with the specified videos and properties.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     videos The video contents of this playlist.
///   </li>
///   <li>
///     properties The metadata or other properties related to this playlist.
///   </li>
/// </ul>
///
/// returns:
/// A new playlist with the specified videos.
- (nonnull instancetype)initWithVideos:(NSArray<BCOVVideo *> * _Nonnull)videos properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
/// Constructs a new playlist with the specified videos.
/// \param videos The video contents of this playlist.
///
///
/// returns:
/// A new playlist with the specified videos.
- (nonnull instancetype)initWithVideos:(NSArray<BCOVVideo *> * _Nonnull)videos;
/// Constructs a new playlist with the specified video and properties.
/// \param video The video contents of this playlist.
///
/// \param properties The metadata or other properties related to this playlist.
///
///
/// returns:
/// A new playlist with the specified video and properties.
- (nonnull instancetype)initWithVideo:(BCOVVideo * _Nonnull)video properties:(NSDictionary * _Nonnull)properties;
/// Constructs a new playlist with the specified video.
/// \param video The video contents of this playlist.
///
///
/// returns:
/// A new playlist with the specified video.
- (nonnull instancetype)initWithVideo:(BCOVVideo * _Nonnull)video;
/// Returns the video at the specified index, or nil if the specified index
/// is greater than the highest index into the playlist.
/// \param index The index into this collection of the desired video.
///
///
/// returns:
/// The video at the specified index, or nil if this playlist
/// does not have a video at that index.
- (BCOVVideo * _Nullable)objectAtIndexedSubscript:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>true</code> if <code>playlist</code> is equivalent to this instance.
/// \param playlist The playlist to test for equivalence with this instance.
///
///
/// returns:
/// Whether <code>playlist</code> is equivalent to this instance.
- (BOOL)isEqualToPlaylist:(BCOVPlaylist * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
/// Returns the number of this instance’s videos.
///
/// returns:
/// The number of videos in this instance.
@property (nonatomic, readonly) NSInteger count;
+ (NSArray<BCOVVideo *> * _Nonnull)allPlayableVideosFrom:(NSArray<BCOVVideo *> * _Nonnull)videos SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<BCOVVideo *> * _Nonnull)allFailedVideosFrom:(NSArray<BCOVVideo *> * _Nonnull)videos SWIFT_WARN_UNUSED_RESULT;
- (BCOVPlaylist * _Nonnull)update:(SWIFT_NOESCAPE void (^ _Nonnull)(BCOVMutablePlaylist * _Nonnull))updateBlock SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end


/// Sub-protocol of BCOVPlaylist, used only in its <code>-update</code> method.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK19BCOVMutablePlaylist")
@interface BCOVMutablePlaylist : BCOVPlaylist
@property (nonatomic, copy) NSArray<BCOVVideo *> * _Nonnull videos;
@property (nonatomic, copy) NSDictionary * _Nonnull properties;
- (nonnull instancetype)initWithVideos:(NSArray<BCOVVideo *> * _Nonnull)videos properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end

@class BCOVMutableSource;

/// A specific “source” or rendition within a BCOVVideo object. While Brightcove
/// organizes content into entities called videos, the actual media URLs at
/// which the content can be accessed is encapsulated by a source. In addition
/// to the URL, a source may have an optional delivery type which can be used
/// to help disambiguate it from other sources, and a set of properties distinct
/// from the properties on the video which owns it.
/// Note that it is valid for a video to contain multiple sources with the same
/// delivery type, in which case the sources must be disambiguated by some other
/// means (such as with different values in their respective properties).
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK18BCOVSourceProtocol_")
@protocol BCOVSourceProtocol <NSObject>
/// The URL at which this source instance’s media is accessible.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// The delivery method describing this source in relation to other sources in the same video.
@property (nonatomic, readonly, copy) NSString * _Nullable deliveryMethod;
/// The metadata or properties related to this source instance.
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
/// Returns a modified version of this source. Because BCOVSource objects
/// are immutable, an entirely new BCOVSource must be created even if only
/// a single change is needed. Therefore, this method provides a convenient way
/// to obtain a temporary mutable copy of this instance and modify it (within
/// <code>updateBlock</code>).
/// Do not attempt to save a reference to the mutable source passed to
/// <code>updateBlock</code>, as the behavior of doing this is undefined. Instead, make
/// whatever modifications are necessary in the block and then capture the source
/// object returned from this method.
/// \param updateBlock A block which is passed a mutable copy of this source.
///
///
/// returns:
/// The copy of this source modified by <code>updateBlock</code>.
- (BCOVSource * _Nonnull)update:(SWIFT_NOESCAPE void (^ _Nonnull)(BCOVMutableSource * _Nonnull))updateBlock SWIFT_WARN_UNUSED_RESULT;
@end


/// Implementation of  BCOVSourceProtocol.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK10BCOVSource")
@interface BCOVSource : NSObject <BCOVSourceProtocol, NSCopying, NSMutableCopying>
/// The URL scheme for HTTP.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull URLSchemeHTTP;)
+ (NSString * _Nonnull)URLSchemeHTTP SWIFT_WARN_UNUSED_RESULT;
/// The URL scheme for HTTPS.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull URLSchemeHTTPS;)
+ (NSString * _Nonnull)URLSchemeHTTPS SWIFT_WARN_UNUSED_RESULT;
/// The delivery method for HLS (HTTP Live Streaming) media.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeliveryHLS;)
+ (NSString * _Nonnull)DeliveryHLS SWIFT_WARN_UNUSED_RESULT;
/// The delivery method for MP4 (typically progressive download) media.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeliveryMP4;)
+ (NSString * _Nonnull)DeliveryMP4 SWIFT_WARN_UNUSED_RESULT;
/// The delivery method for DASH media.
/// DASH is not a supported playback format on iOS.
/// This constant can help you identify DASH sources if you need to
/// parse JSON responses from the Playback API manually.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeliveryDASH;)
+ (NSString * _Nonnull)DeliveryDASH SWIFT_WARN_UNUSED_RESULT;
/// The delivery method for Once media.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeliveryOnce;)
+ (NSString * _Nonnull)DeliveryOnce SWIFT_WARN_UNUSED_RESULT;
/// The delivery method for Bolt + SSAI.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DeliveryBoltSSAI;)
+ (NSString * _Nonnull)DeliveryBoltSSAI SWIFT_WARN_UNUSED_RESULT;
/// The key used in the source properties to declare the DRM type of this source.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeySystems;)
+ (NSString * _Nonnull)PropertyKeySystems SWIFT_WARN_UNUSED_RESULT;
/// The key system used by a FairPlay source, if retrieved through Brightcove Player API.
/// BCOVSource.properties:
/// …
/// key_systems: {
/// “com.apple.fps.1_0”: {
/// “key_request_url”: “https://fps.brightcove.com/v1/fairplay_session_”
/// }
/// }
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyFairPlayV1;)
+ (NSString * _Nonnull)PropertyFairPlayV1 SWIFT_WARN_UNUSED_RESULT;
/// The key for the key request URL used by a FairPlay source, if retrieved through Brightcove Player API.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyRequestURL;)
+ (NSString * _Nonnull)PropertyKeyRequestURL SWIFT_WARN_UNUSED_RESULT;
/// The key for the key request URLs used by a FairPlay source, if retrieved through Brightcove Player API.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyRequestURLs;)
+ (NSString * _Nonnull)PropertyKeyRequestURLs SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyEXTXVersion;)
+ (NSString * _Nonnull)PropertyKeyEXTXVersion SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyType;)
+ (NSString * _Nonnull)PropertyKeyType SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyVMAP;)
+ (NSString * _Nonnull)PropertyKeyVMAP SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyAuthToken;)
+ (NSString * _Nonnull)PropertyKeyAuthToken SWIFT_WARN_UNUSED_RESULT;
/// Constructs a new source with the specified URL
/// \param url The URL at which the new source’s media can be accessed.
///
///
/// returns:
/// A new source with the specified URL
- (nonnull instancetype)initWithURL:(NSURL * _Nullable)url;
/// Constructs a new source with the specified URL, delivery method, and
/// properties.
/// \param url The URL at which the new source’s media can be accessed.
///
/// \param deliveryMethod The delivery method of the new source.
///
/// \param properties The metadata or properties related to the new source.
///
///
/// returns:
/// A new source with the specified URL, delivery method, and properties.
- (nonnull instancetype)initWithURL:(NSURL * _Nullable)url deliveryMethod:(NSString * _Nullable)deliveryMethod properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
/// Returns <code>true</code> if <code>source</code> is equivalent to this instance.
/// \param source The source to test for equivalence with this instance.
///
///
/// returns:
/// Whether <code>source</code> is equivalent to this instance.
- (BOOL)isEqualToSource:(BCOVSource * _Nullable)source SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable deliveryMethod;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
- (BCOVSource * _Nonnull)update:(SWIFT_NOESCAPE void (^ _Nonnull)(BCOVMutableSource * _Nonnull))updateBlock SWIFT_WARN_UNUSED_RESULT;
@end


/// Sub-class of BCOVSource, used only in its <code>-update</code> method.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK17BCOVMutableSource")
@interface BCOVMutableSource : BCOVSource
@property (nonatomic, copy) NSURL * _Nullable url;
@property (nonatomic, copy) NSString * _Nullable deliveryMethod;
@property (nonatomic, copy) NSDictionary * _Nonnull properties;
- (nonnull instancetype)initWithURL:(NSURL * _Nullable)url deliveryMethod:(NSString * _Nullable)deliveryMethod properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end

@class BCOVMutableVideo;

/// A video in the Brightcove Player SDK ecosystem. Brightcove organizes content
/// into entities called videos, which may have zero or more sources containing
/// information specific to accessing the content. The video provides a container
/// for referencing these sources in the aggregate, and a place for metadata
/// about the video or the collection of sources in the form of properties. Also,
/// a video may have a cue point collection, which is a set of cue points that
/// describe specific locations in the video’s content timeline.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK17BCOVVideoProtocol_")
@protocol BCOVVideoProtocol <NSObject>
/// The cue points associated to this video. These cue points apply equally to
/// the content at each of this video’s sources.
@property (nonatomic, readonly, strong) BCOVCuePointCollection * _Nullable cuePoints;
/// Metadata or properties related to this video or its sources in the aggregate.
/// You can find constants for the keys that this SDK uses with this dictionary
/// near the top of this class definition.
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
/// The economics field that comes from Video Cloud.
/// BCOVEconomics.AdSupported is the default, and means that the ads should be displayed.
/// BCOVEconomics.Free means that no ads should be shown during video playback.
@property (nonatomic, readonly) enum BCOVEconomics economics;
/// The sources which comprise the actual destinations at which this video’s
/// content can be accessed.
@property (nonatomic, readonly, copy) NSArray<BCOVSource *> * _Nonnull sources;
/// The URL at which this video’s VTT thumbnails source is available.
/// This value overrides any thumbnails VTT track that the SDK uses
/// from a PAPI response.
/// The value will be <code>nil</code> if you have not set a value.
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailVTTURL;
/// Returns a modified version of this source. Because BCOVVideo objects
/// are immutable, an entirely new BCOVVideo must be created even if only
/// a single change is needed. Therefore, this method provides a convenient way
/// to obtain a temporary mutable copy of this instance and modify it (within
/// <code>updateBlock</code>).
/// Do not attempt to save a reference to the mutable video passed to
/// <code>updateBlock</code>, as the behavior of doing this is undefined. Instead, make
/// whatever modifications are necessary in the block and then capture the video
/// object returned from this method.
/// \param updateBlock A block which is passed a mutable copy of this video.
///
///
/// returns:
/// The copy of this video modified by <code>updateBlock</code>.
- (BCOVVideo * _Nonnull)update:(SWIFT_NOESCAPE void (^ _Nonnull)(BCOVMutableVideo * _Nonnull))updateBlock SWIFT_WARN_UNUSED_RESULT;
@end

@class NSLocale;

/// Implementation of the BCOVVideo protocol.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK9BCOVVideo")
@interface BCOVVideo : NSObject <BCOVVideoProtocol, NSCopying, NSMutableCopying>
/// The properties dictionary on a BCOVVideo object can contain
/// any of the following keys. These can be used when
/// manually initializing a BCOVVideo, like initWithSource:cuePoints:properties
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyAccountId;)
+ (NSString * _Nonnull)PropertyKeyAccountId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyDescription;)
+ (NSString * _Nonnull)PropertyKeyDescription SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyDuration;)
+ (NSString * _Nonnull)PropertyKeyDuration SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyEconomics;)
+ (NSString * _Nonnull)PropertyKeyEconomics SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyId;)
+ (NSString * _Nonnull)PropertyKeyId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyLongDescription;)
+ (NSString * _Nonnull)PropertyKeyLongDescription SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyName;)
+ (NSString * _Nonnull)PropertyKeyName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyPoster;)
+ (NSString * _Nonnull)PropertyKeyPoster SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyPosterSources;)
+ (NSString * _Nonnull)PropertyKeyPosterSources SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyProjection;)
+ (NSString * _Nonnull)PropertyKeyProjection SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyReferenceId;)
+ (NSString * _Nonnull)PropertyKeyReferenceId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyTags;)
+ (NSString * _Nonnull)PropertyKeyTags SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyTextTracks;)
+ (NSString * _Nonnull)PropertyKeyTextTracks SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyThumbnail;)
+ (NSString * _Nonnull)PropertyKeyThumbnail SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyThumbnailSources;)
+ (NSString * _Nonnull)PropertyKeyThumbnailSources SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyVariants;)
+ (NSString * _Nonnull)PropertyKeyVariants SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyManifestURLTTL;)
+ (NSString * _Nonnull)PropertyKeyManifestURLTTL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyPolicyKey;)
+ (NSString * _Nonnull)PropertyKeyPolicyKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PropertyKeyCatalogResponseTime;)
+ (NSString * _Nonnull)PropertyKeyCatalogResponseTime SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) BCOVCuePointCollection * _Nullable cuePoints;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
@property (nonatomic, readonly, copy) NSArray<BCOVSource *> * _Nonnull sources;
@property (nonatomic, readonly, copy) NSURL * _Nullable thumbnailVTTURL;
@property (nonatomic) enum BCOVEconomics economics;
/// Returns <code>true</code> if this video object can be downloaded for offline playback
@property (nonatomic, readonly) BOOL canBeDownloaded;
/// Returns YES if this video object has a source using FairPlay encryption
/// This applies to videos retrieved from Dynamic Delivery accounts only.
@property (nonatomic, readonly) BOOL usesFairPlay;
/// Returns YES if this instance refers to an offline video.
/// Use the <code>playableOffline</code> property to determine if the
/// video is playable offline.
@property (nonatomic, readonly) BOOL offline;
/// Returns <code>false</code> if the video has not completed downloading,
/// or if the video has been purged and needs to be re-downloaded.
/// This happens automatically if iOS needs to reclaim storage space
/// for proper functioning of the device.
/// On some versions of iOS <code>playableOffline</code> may return <code>false</code> if the offline video is already
/// loaded up in an instance of AVPlayer. Calling <code>removeAllItems</code>
/// on the current instance of <code>AVQueuePlayer</code> prior to checking
/// should result in the expected value of <code>true</code> being returned.
@property (nonatomic, readonly) BOOL playableOffline;
/// A string representation of an error code for an unplayable video
@property (nonatomic, readonly, copy) NSString * _Nullable errorCode;
/// A string representation of an error sub code for an unplayable video
@property (nonatomic, readonly, copy) NSString * _Nullable errorSubCode;
/// A error emssage string for an unplayable video
@property (nonatomic, readonly, copy) NSString * _Nullable errorMessage;
/// Returns <code>false</code> if <code>errorCode</code>, <code>errorSubCode</code> and <code>errorMessage</code> are all nil
/// otherwise if any of those properties have a vaile will return <code>true</code>
@property (nonatomic, readonly) BOOL hasError;
/// Constructs a new video with the specified sources, cue points, and
/// properties.
/// When using this initializer you can take advantage of the
/// BCOVVideo.PropertyKey constants to create the properties dictionary. You can find
/// constants for the keys that this SDK uses with this dictionary near the top of this header file.
/// \param sources The sources of this video.
///
/// \param cuePoints The cue points associated to this video.
///
/// \param properties The metadata or properties associated to this video.
///
///
/// returns:
/// A new video with the specified sources, cue points, and properties.
- (nonnull instancetype)initWithSources:(NSArray<BCOVSource *> * _Nullable)sources cuePoints:(BCOVCuePointCollection * _Nullable)cuePoints properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
/// Constructs a new video with a single specified source, the specified cue
/// points, and the specified properties.
/// When using this initializer you can take advantage of the
/// kBCOVVideoPropertyKey constants to create the properties dictionary. You can find
/// constants for the keys that this SDK uses with this dictionary near the top of this header file.
/// \param source The sole source of this video.
///
/// \param cuePoints The cue points associated to this video.
///
/// \param properties The metadata or properties associated to this video.
///
///
/// returns:
/// A new video with a single source, as well as the specified cue points and properties.
- (nonnull instancetype)initWithSource:(BCOVSource * _Nullable)source cuePoints:(BCOVCuePointCollection * _Nullable)cuePoints properties:(NSDictionary * _Nullable)properties;
/// Constructs a new video with with error information.
/// When attempting to retreive a video the server may an
/// error. The error may be caused due to various restrictions  other reasons.
/// The information is stored on the BCOVideo object for informative purposes.
/// \param errorCode The error code
///
/// \param errorSubCode The error sub-code
///
/// \param errorMessage The error message
///
/// \param properties The metadata or properties associated to this video.
///
///
/// returns:
/// A new video with error information attributes
- (nonnull instancetype)initWithErrorCode:(NSString * _Nullable)errorCode errorSubCode:(NSString * _Nullable)errorSubCode errorMessage:(NSString * _Nullable)errorMessage properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
/// Returns <code>true</code> if <code>video</code> is equivalent to this instance.
/// \param video The video to test for equivalence with this instance.
///
///
/// returns:
/// Whether <code>video</code> is equivalent to this instance.
- (BOOL)isEqualToVideo:(BCOVVideo * _Nullable)video SWIFT_WARN_UNUSED_RESULT;
/// Returns a new video with a single source containing the specified URL.
/// \param url The URL of the source to be created and associated to the new video.
///
///
/// returns:
/// A new video with a source containing the specified URL.
+ (BCOVVideo * _Nonnull)videoWithURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Returns a new video with a single source containing the specified URL
/// and a delivery method as BCOVSource.DeliveryHLS.
/// \param url The URL of the source to be created and associated to the new video.
///
///
/// returns:
/// A new video with a source containing the specified URL.
+ (BCOVVideo * _Nonnull)videoWithHLSSourceURL:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Returns a new video with a single source containing the specified URL.
/// \param url The URL of the source to be created and associated to the new video.
///
/// \param deliveryMethod The delivery method for this source. See BCOVSource for options.
///
///
/// returns:
/// A new video with a source containing the specified URL.
+ (BCOVVideo * _Nonnull)videoWithURL:(NSURL * _Nonnull)url deliveryMethod:(NSString * _Nullable)deliveryMethod SWIFT_WARN_UNUSED_RESULT;
- (BCOVVideo * _Nonnull)update:(SWIFT_NOESCAPE void (^ _Nonnull)(BCOVMutableVideo * _Nonnull))updateBlock SWIFT_WARN_UNUSED_RESULT;
/// Pass nil to get the video name for the device locale or
/// the preferred description if the device locale is not available.
/// \param locale The desired locale to use for variant matching
///
///
/// returns:
/// The value for the specified locale or the preferred description
- (NSString * _Nullable)localizedNameForLocale:(NSLocale * _Nullable)locale SWIFT_WARN_UNUSED_RESULT;
/// Pass nil to get the short description for the device locale or
/// the preferred description if the device locale is not available.
/// \param locale The desired locale to use for variant matching
///
///
/// returns:
/// The value for the specified locale or the preferred description
- (NSString * _Nullable)localizedShortDescriptionForLocale:(NSLocale * _Nullable)locale SWIFT_WARN_UNUSED_RESULT;
/// Pass nil to get the long description for the device locale or
/// the preferred description if the device locale is not available.
/// \param locale The desired locale to use for variant matching
///
///
/// returns:
/// The value for the specified locale or the preferred description
- (NSString * _Nullable)localizedLongDescriptionForLocale:(NSLocale * _Nullable)locale SWIFT_WARN_UNUSED_RESULT;
/// Loops through language variants on this video and attempt to match it
/// with one of the languages provided.
/// The first match found will be returned.
/// If no result is found a <code>nil</code> value is returned.
/// \param preferredLanguages Array of preferred languages with which
/// to attempt a match. Use with <code>NSLocale.preferredLanguages</code>
///
- (NSDictionary * _Nullable)variantForPreferredLanguages:(NSArray<NSString *> * _Nonnull)preferredLanguages SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)mutableCopyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC19BrightcovePlayerSDK16BCOVMutableVideo")
@interface BCOVMutableVideo : BCOVVideo
@property (nonatomic, strong) BCOVCuePointCollection * _Nullable cuePoints;
@property (nonatomic, copy) NSDictionary * _Nonnull properties;
@property (nonatomic, copy) NSArray<BCOVSource *> * _Nonnull sources;
@property (nonatomic, copy) NSURL * _Nullable thumbnailVTTURL;
- (nonnull instancetype)initWithSources:(NSArray<BCOVSource *> * _Nullable)sources cuePoints:(BCOVCuePointCollection * _Nullable)cuePoints properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithErrorCode:(NSString * _Nullable)errorCode errorSubCode:(NSString * _Nullable)errorSubCode errorMessage:(NSString * _Nullable)errorMessage properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
@end


/// The following keys are used to access values in the the
/// BCOVVideo’s properties dictionary
SWIFT_CLASS("_TtC19BrightcovePlayerSDK16BCOVOfflineVideo")
@interface BCOVOfflineVideo : NSObject
/// Offline video token properties dictionary key
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TokenPropertyKey;)
+ (NSString * _Nonnull)TokenPropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the time that the offline
/// video FairPlay license was requested.
/// This time is stored as the number of seconds since the
/// standard <code>Date</code> reference date.
/// You can generate a <code>Date</code> object from this as follows:
/// \code
/// Date(timeIntervalSinceReferenceDate: number)
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LicenseRequestTimePropertyKey;)
+ (NSString * _Nonnull)LicenseRequestTimePropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the time that the offline
/// video FairPlay license will expire. After this time, you can no longer
/// begin playback on the associated video.
/// This time is stored as the floating point number of seconds since the
/// standard <code>Date</code> reference date.
/// You can generate a <code>Date</code> object from this as follows:
/// \code
/// Date(timeIntervalSinceReferenceDate: number)
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LicenseAbsoluteExpirationTimePropertyKey;)
+ (NSString * _Nonnull)LicenseAbsoluteExpirationTimePropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the time that the video
/// first started playback. If a playDuration value was used for the
/// video’s license then you can use this value in addition to the
/// value from <code>BCOVFairPlayLicense/PlayDurationKey</code> to determine
/// when the dual-expiry license will expire.
/// This time is stored as the floating point number of seconds since the
/// standard <code>Date</code> reference date.
/// You can generate a <code>Date</code> object from this as follows:
/// \code
/// Date(timeIntervalSinceReferenceDate: number)
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull InitialPlaybackTimeKey;)
+ (NSString * _Nonnull)InitialPlaybackTimeKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the time that the offline
/// video download was initially requested.
/// This time is stored as the floating point number of seconds since the
/// standard <code>Date</code> reference date.
/// You can generate a <code>Date</code> object from this as follows:
/// \code
/// Date(timeIntervalSinceReferenceDate: number)
///
/// \endcodeThis value is useful when sorting by the time each download process started.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DownloadStartTimePropertyKey;)
+ (NSString * _Nonnull)DownloadStartTimePropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the time that the offline
/// video download completed (whether normally, cancelled, or failed).
/// This time is stored as the floating point number of seconds since the
/// standard <code>Date</code> reference date.
/// You can generate a <code>Date</code> object from this as follows:
/// \code
/// Date(timeIntervalSinceReferenceDate: number)
///
/// \endcodeThis value is useful when sorting by the time each download completes.
/// This value is zero until the download completes.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DownloadEndTimePropertyKey;)
+ (NSString * _Nonnull)DownloadEndTimePropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the URL of the original online video
/// that was downloaded to storage for this BCOVVideo object, as an <code>String</code>.
/// Note that this URL may have expired, so this is primarily useful as a reference.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull OnlineSourceURLPropertyKey;)
+ (NSString * _Nonnull)OnlineSourceURLPropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the name of the
/// downloaded thumbnail image file in device storage, as an <code>String</code>.
/// This name is used to generate the full path of the file at runtime.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ThumbnailNamePropertyKey;)
+ (NSString * _Nonnull)ThumbnailNamePropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the full path to the
/// downloaded thumbnail image file in device storage, as an <code>String</code>.
/// Even if the path is present, the image file may not be present.
/// Due to app sandboxing, this path will likely change each time
/// the app is launched, so you should not store the full path.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ThumbnailFilePathPropertyKey;)
+ (NSString * _Nonnull)ThumbnailFilePathPropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the name of the
/// downloaded poster image file in device storage, as an <code>String</code>.
/// This name is used to generate the full path of the file at runtime.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PosterNamePropertyKey;)
+ (NSString * _Nonnull)PosterNamePropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the full path to the
/// downloaded poster image file in device storage, as an <code>String</code>.
/// Even if the path is present, the image file may not be present.
/// Due to app sandboxing, this path will likely change each time
/// the app is launched, so you should not store the full path.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PosterFilePathPropertyKey;)
+ (NSString * _Nonnull)PosterFilePathPropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the relative file path
/// of the downloaded HLS video bundle in device storage, as an <code>String</code>.
/// This path is used to generate the full path of the file at runtime.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull RelativeFilePathPropertyKey;)
+ (NSString * _Nonnull)RelativeFilePathPropertyKey SWIFT_WARN_UNUSED_RESULT;
/// BCOVVideo properties key that stores the full path to the
/// downloaded HLS video bundle in device storage, as an <code>String</code>.
/// Due to app sandboxing, this path will likely change each time
/// the app is launched, so you should not store the full path.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FilePathPropertyKey;)
+ (NSString * _Nonnull)FilePathPropertyKey SWIFT_WARN_UNUSED_RESULT;
/// The BCOVSourceMediaType of this offline video.
/// Will either be BCOVSourceMediaTypeAudio or BCOVSourceMediaTypeAudioVideo
/// and stored as an <code>NSNumber</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MediaType;)
+ (NSString * _Nonnull)MediaType SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BCOVOfflineVideoManagerDelegate;
@class AVMediaSelection;
@class AVAssetDownloadConfiguration;
@class BCOVOfflineVideoStatus;
@class AVURLAsset;
@class AVMediaSelectionGroup;
@class AVMediaSelectionOption;

/// BCOVOfflineVideoManager
/// This singleton class handles most aspects of video file downloading
SWIFT_CLASS("_TtC19BrightcovePlayerSDK23BCOVOfflineVideoManager")
@interface BCOVOfflineVideoManager : NSObject
/// Error domain for the Offline Video Manager.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorDomain;)
+ (NSString * _Nonnull)ErrorDomain SWIFT_WARN_UNUSED_RESULT;
/// NSNotification name for a warning sent when analytics files related to
/// offline playback have reached 500 MiB. This can happen if a user
/// plays lots of offline video (over 1000 hours) but has not been online
/// in a long time.
/// Analytics will not continue to grow beyond this point, but in order for
/// you to collect accurate data about your app usage, you may want to encourage
/// the user to go back online so that analytics data can be transferred.
/// If analytics storage remains full, older, less-important events (like
/// engagement events) will be dropped to make room for video view events.
/// Register for this warning using the NSNotificationCenter.defaultCenter.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AnalyticsStorageFullWarningNotification;)
+ (NSString * _Nonnull)AnalyticsStorageFullWarningNotification SWIFT_WARN_UNUSED_RESULT;
/// NSDictionary key used to set an option passed to
/// <code>initializeOfflineVideoManager(withDelegate:options:)</code>.
/// If set to <code>true</code>, connections will be allowed over cellular networks.
/// If <code>false</code>, cellular connections will not be allowed.
/// Default value is <code>false</code>.
/// Corresponds directly to NSURLSessionConfiguration’s allowCellularAccess property.
/// Changing this value will not have an effect on active downloads; only downloads
/// initialized after the value has been changed will be affected.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AllowsCellularDownloadKey;)
+ (NSString * _Nonnull)AllowsCellularDownloadKey SWIFT_WARN_UNUSED_RESULT;
/// NSDictionary key used to set an option passed to
/// <code>initializeOfflineVideoManager(withDelegate:options:)</code>.
/// If set to <code>true</code>, playback of offline content is allowed to access the internet
/// over a cellular connection.
/// If <code>false</code>, cellular connections will not be allowed during playback.
/// Network activity can be triggered if you request a media option that has not
/// been downloaded.
/// Corresponds directly to AVURLAsset option’s AVURLAssetAllowsCellularAccessKey property.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AllowsCellularPlaybackKey;)
+ (NSString * _Nonnull)AllowsCellularPlaybackKey SWIFT_WARN_UNUSED_RESULT;
/// NSDictionary key used to set an option passed to
/// <code>initializeOfflineVideoManager(withDelegate:options:)</code>.
/// If set to <code>true</code>, analytics data related to playback of offline content
/// will be transmitted over cellular networks.
/// If <code>false</code>, cellular connections will not be used for transmission of
/// analytics data.
/// The default value is <code>true</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AllowsCellularAnalyticsKey;)
+ (NSString * _Nonnull)AllowsCellularAnalyticsKey SWIFT_WARN_UNUSED_RESULT;
/// NSDictionary key used to set an option passed to
/// <code>initializeOfflineVideoManager(withDelegate:options:)</code>.
/// You can pass an NSNumber with this key to set the maximum storage space
/// allowed for holding offline analytics data.
/// If a user doesn’t come online for a while, analytics data will collect
/// until this limit is reached. Once reached, only video_view events will
/// be stored, and other events will start being dropped.
/// The default value is 524288000 (500 MiB).
/// The minimum settable value is 1.0 MiB.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AnalyticsStorageLimitKey;)
+ (NSString * _Nonnull)AnalyticsStorageLimitKey SWIFT_WARN_UNUSED_RESULT;
/// The following keys are used to specify values in the parameters dictionary
/// passed to <code>requestVideoDownload(_:mediaSelections:parameters:completion:)</code>
/// When this <code>Int</code> value is set, the Offline Video Manager will download a rendition
/// with the largest bitrate less than or equal to this value.
/// If no rendition can be found with a bitrate that is smaller than or equal to
/// this bitrate, the lowest rendition will be downloaded.
/// If this value is zero or not specified, the lowest rendition with video will be downloaded.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull RequestedBitrateKey;)
+ (NSString * _Nonnull)RequestedBitrateKey SWIFT_WARN_UNUSED_RESULT;
/// This is an String that determines the name of the video
/// displayed in the “Downloaded Videos” section of the
/// iOS Settings/iPad+iPhone Storage/Downloaded Videos view
/// seen in iOS 11+.
/// If this option is not set, the <code>name</code> properties
/// on the video will be used instead.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DisplayNameKey;)
+ (NSString * _Nonnull)DisplayNameKey SWIFT_WARN_UNUSED_RESULT;
/// Proxy object that handles specific subtasks of FairPlay key exchange
/// as defined by the BCOVFPSAuthorizationProxy protocol.
@property (nonatomic, strong) id <BCOVFPSAuthorizationProxy> _Nonnull authProxy;
/// Delegate for this BCOVOfflineVideoManager.
@property (nonatomic, strong) id <BCOVOfflineVideoManagerDelegate> _Nullable delegate;
/// Returns an array of all the offline video tokens.
/// Each token refers to a video download in device storage,
/// including videos that are currently being downloaded,
/// and videos that were cancelled, paused, or failed.
@property (nonatomic, readonly, copy) NSArray<BCOVOfflineVideoToken> * _Nonnull offlineVideoTokens;
/// The shared instance used to access the singleton BCOVOfflineVideoManager object.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) BCOVOfflineVideoManager * _Nullable sharedManager;)
+ (BCOVOfflineVideoManager * _Nullable)sharedManager SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize the Offline Video Manager.
/// This should be the first call to the Offline Video Manager.
/// You can call this method again to update the delegate and options.
/// \param delegate The delegate object conforming to the BCOVOfflineVideoManagerDelegate protocol.
///
/// \param options An NSDictionary of options.  The only valid dictionary entries are
/// <code>BCOVOfflineVideoManager/AllowsCellularDownloadKey</code>,
/// <code>BCOVOfflineVideoManager/AllowsCellularPlaybackKey</code>,
/// <code>BCOVOfflineVideoManager/AllowsCellularAnalyticsKey</code>, and
/// <code>BCOVOfflineVideoManager/AnalyticsStorageLimitKey</code>.
///
+ (void)initializeOfflineVideoManagerWithDelegate:(id <BCOVOfflineVideoManagerDelegate> _Nonnull)delegate options:(NSDictionary * _Nullable)options;
/// Initiate a request for a video download.
/// If you are using FairPlay videos with Video Cloud Dynamic Delivery, FairPlay
/// application certificates will be downloaded automatically and used as needed.
/// If you are using legacy Video Cloud FairPlay videos, you should add any
/// needed application certificates to the BCOVOfflineVideoManger before
/// initiating a download, using <code>addFairPlayApplicationCertificate(_:identifier:)</code>.
/// \param video BCOVVideo to be downloaded. The video should have an HLS
/// source with an HTTPS scheme, and may use FairPlay encryption.
///
/// \param mediaSelections An array of AVMediaSelections to be downloaded, in addition
/// to the main video. The available AVMediaSelections for a BCOVVideo can be retrieved by calling
/// <code>urlAsset(forVideo:)</code> followed by <code>-[AVAsset preferredMediaSelection]</code> or <code>-[AVAsset allMediaSelections]</code>.
///
/// \param parameters NSDictionary of parameters used in this download request.
/// May be nil if the license was preloaded using the <code>preloadFairPlayLicense(_:parameters:completion:)</code> method.
/// Valid parameters are:
/// <code>BCOVOfflineVideoManager/RequestedBitrateKey</code>, <code>BCOVFairPlayLicense/PurchaseKey</code>,
/// <code>BCOVFairPlayLicense/RentalDurationKey</code>.
///
/// \param completionHandler A block that receives the new offlineVideoToken after the request
/// is successfully made. If there is an error, offlineVideoToken will
/// be nil, and error will report any NSError.
///
- (void)requestVideoDownload:(BCOVVideo * _Nonnull)video mediaSelections:(NSArray<AVMediaSelection *> * _Nullable)mediaSelections parameters:(NSDictionary * _Nullable)parameters completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
/// Initiate a request for a video download.
/// If you are using FairPlay videos with Video Cloud Dynamic Delivery, FairPlay
/// application certificates will be downloaded automatically and used as needed.
/// If you are using legacy Video Cloud FairPlay videos, you should add any
/// needed application certificates to the BCOVOfflineVideoManger before
/// initiating a download, using <code>addFairPlayApplicationCertificate(_:identifier:)</code>.
/// \param video BCOVVideo to be downloaded. The video should have an HLS
/// source with an HTTPS scheme, and may use FairPlay encryption.
///
/// \param downloadConfiguration Blah blah.
///
/// \param inParameters NSDictionary of parameters used in this download request.
/// May be nil. Valid parameters are:
/// <code>BCOVOfflineVideoManager/RequestedBitrateKey</code>, <code>BCOVFairPlayLicense/PurchaseKey</code>,
/// <code>BCOVFairPlayLicense/RentalDurationKey</code>.
///
/// \param completionHandler A block that receives the new offlineVideoToken after the request
/// is successfully made. If there is an error, offlineVideoToken will
/// be nil, and error will report any NSError.
///
- (void)requestVideoDownload:(BCOVVideo * _Nonnull)video downloadConfiguration:(AVAssetDownloadConfiguration * _Nonnull)downloadConfiguration parameters:(NSDictionary * _Nullable)inParameters completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler SWIFT_AVAILABILITY(ios,introduced=15.0);
/// Returns an array of the status of all video downloads,
/// including videos that are currently being downloaded,
/// and videos that were cancelled, paused, or failed.
/// All objects in the array are copies, so although you can modify an object,
/// it will have no effect on the download manager.
/// This method provides information about each download, like the download status,
/// start time, progress percent, underlying AVAssetDownloadTask,
/// and error (if any when complete).
///
/// returns:
/// an array of the status of all video downloads,
/// including videos that are currently being downloaded,
/// and videos that were cancelled, paused, or failed.
- (NSArray<BCOVOfflineVideoStatus *> * _Nonnull)offlineVideoStatus SWIFT_WARN_UNUSED_RESULT;
/// Returns a copy of the BCOVOfflineVideoStatus object for a specific video download.
/// BCOVOfflineVideoStatus provides information about the download, like the download status,
/// start time, progress percent, underlying AVAggregateAssetDownloadTask, and error (if any when complete).
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
///
/// returns:
/// a copy of the BCOVOfflineVideoStatus object for a specific video download.
- (BCOVOfflineVideoStatus * _Nullable)offlineVideoStatusForToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken SWIFT_WARN_UNUSED_RESULT;
/// Pause a current video download task.
/// \param offlineVideoToken Offline video token used to identify the download task.
///
- (void)pauseVideoDownload:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken;
/// Resume a suspended video download task
/// \param offlineVideoToken Offline video token used to identify the download task.
///
- (void)resumeVideoDownload:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken;
/// Cancel a video download task
/// \param offlineVideoToken Offline video token used to identify the download task.
///
- (void)cancelVideoDownload:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken;
/// Delete all files in local storage related to this offline video token.
/// offlineVideoToken will be considered invalid after this call.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
- (void)deleteOfflineVideo:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken;
/// Estimate the size of a video download in megabytes.
/// This method calls the completion handler with an estimate of the video size
/// of the largest rendition in the HLS manifest, in megabytes.
/// If there are any problems retrieving the value, <code>error</code> will be set,
/// and <code>megabytes</code> will be zero.
/// The completion handler is not called on any specific thread.
/// You should switch to the main thread if you need to perform
/// any UI work. It may be called synchronously or asynchronously.
/// \param video The BCOVVideo object from Video Cloud. The video object should
/// contain a valid HLS source.
///
/// \param options NSDictionary of options used in this request. Use the
/// <code>BCOVOfflineVideoManager/RequestedBitrateKey</code> to specify the bitrate you plan to download.
///
/// \param completionHandler A block that receives the estimated size of the video after
/// the request is successfully made. If there is an error,
/// <code>megabytes</code> will be set to zero, and <code>error</code> will report any NSError.
///
- (void)estimateDownloadSize:(BCOVVideo * _Nonnull)video options:(NSDictionary * _Nonnull)options completion:(void (^ _Nonnull)(double, NSError * _Nullable))completionHandler;
/// Given a BCOVVideo, returns an AVURLAsset which represents the
/// video source that will be used for offline downloads. BCOVVideo objects can
/// contain multiple video sources with the preferred source being secure and appropriate
/// for playback on iOS. Do not use this method in the context of online playback.
/// \param video The BCOVVideo object from Video Cloud. The video object should
/// contain a valid HLS source.
///
///
/// throws:
/// An error if there is no source for the video
///
/// returns:
/// an AVURLAsset which represents the
/// video source that will be used for offline downloads.
- (AVURLAsset * _Nullable)urlAssetForVideo:(BCOVVideo * _Nonnull)video error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Retrieve an array of NSDictionary objects, one for each variant stream
/// in the specified online HLS video.
/// Each dictionary contains a key:value pair for each of the variant stream’s
/// attributes as specified by its corresponding EXT-X-STREAM-INF tag in the
/// HLS manifest.
/// These attributes can be used when selecting a particular bitrate for download.
/// If all you need are the bitrate values, use <code>variantBitrates(forVideo:completion:)</code>.
/// The completion handler is not called on any specific thread. You should switch to
/// the main thread if you need to perform any UI work. It may be called
/// synchronously or asynchronously.
/// \param video The BCOVVideo object from Video Cloud. The video object should
/// contain a valid online HLS source.
///
/// \param completionHandler Block that receives the array of variant attributes
/// NSDictionary objects if the request is successfully made. If there is an error,
/// <code>variantAttributesDictionariesArray</code> will be nil, and <code>error</code> will report any NSError.
///
- (void)variantAttributesDictionariesForVideo:(BCOVVideo * _Nonnull)video completion:(void (^ _Nonnull)(NSArray<NSDictionary *> * _Nullable, NSError * _Nullable))completionHandler;
/// Retrieve an array of NSDictionary objects, one for each alternative rendition
/// in the specified online HLS video. Alternative renditions include captions,
/// subtitles, and secondary audio tracks.
/// Each dictionary contains a key:value pair for each of the rendition’s
/// attributes as specified by its corresponding EXT-X-MEDIA tag in the
/// HLS manifest. These attributes can be used to determine what languages are
/// available for text and audio tracks, so that these languages can be presented to
/// the end user, or selected for download yourself based on the locale or some other
/// criteria.
/// The completion handler is not called on any specific
/// thread. You should switch to the main thread if you need to perform
/// any UI work. It may be called synchronously or asynchronously.
/// \param video The BCOVVideo object from Video Cloud. The video object should contain
/// a valid online HLS source.
///
/// \param completionHandler A block that receives the array of rendition attributes NSDictionary
/// objects if the request is successfully made. If there is an error,
/// <code>alternativeRenditionAttributesDictionariesArray</code> will be nil, and <code>error</code>
/// will report any NSError.
///
- (void)alternativeRenditionAttributesDictionariesForVideo:(BCOVVideo * _Nonnull)video completion:(void (^ _Nonnull)(NSArray<NSDictionary *> * _Nullable, NSError * _Nullable))completionHandler;
/// Retrieve an array of available bitrates for the specified online HLS video.
/// The array will be sorted from smallest to largest bitrate.
/// The completion handler is not called on any specific thread. You should switch
/// to the main thread if you need to perform any UI work. It may be called
/// synchronously or asynchronously.
/// \param video The BCOVVideo object from Video Cloud. The video object should
/// contain a valid online HLS source.
///
/// \param completionHandler A block that receives the array of bitrates if the
/// request is successfully made. If there is an error, <code>bitrates</code> will be nil,
/// and <code>error</code> will report any NSError.
///
- (void)variantBitratesForVideo:(BCOVVideo * _Nonnull)video completion:(void (^ _Nonnull)(NSArray<NSNumber *> * _Nullable, NSError * _Nullable))completionHandler;
/// Convert an offline video token into a playable BCOVVideo object.
/// The returned BCOVVideo also contains all the new properties listed above,
/// such as the downloaded thumbnail and poster image file paths, FairPlay
/// license expiration date, download start and end times, and more.
/// If the downloadState of the video is <code>BCOVOfflineVideoDownloadState/stateCompleted</code> then
/// the video associated with the token will be cached. If you need to clear the cache for
/// any reason you can call <code>clearOfflineVideoCache()</code> on <code>BCOVOfflineVideoManager</code>.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
///
/// returns:
/// a BCOVVideo with all offline properties
- (BCOVVideo * _Nullable)videoObjectFromOfflineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken SWIFT_WARN_UNUSED_RESULT;
/// Clears cache of offline BCOVVideo objects
/// When <code>videoObject(fromOfflineVideoToken:)</code> is used with a video
/// which has a downloadState of <code>BCOVOfflineVideoDownloadStateCompleted</code>then
/// BCOVOfflienVideoManager will cache that object to increase performance. This method
/// will clean out the cache so that the next time <code>videoObject(fromOfflineVideoToken:)</code> is called
/// a brand new BCOVVideo object will be created.
- (void)clearOfflineVideoCache;
/// Preload the FairPlay license before a video download begins.
/// This will return an error if the video does not have a FairPlay source.
/// When downloading multiple FairPlay-protected videos, you should call this
/// method for each video to acquire a license for each one before beginning
/// any of the downloads. This ensures that videos can be properly stored even
/// when the downloads are initiated in the background.
/// \param video BCOVVideo to be downloaded. The video should have a source
/// that uses FairPlay encryption and the HTTPS scheme.
///
/// \param parameters NSDictionary of parameters used in this download request.
/// Valid parameters are:
/// <code>BCOVFairPlayLicense/PurchaseKey</code>, <code>BCOVFairPlayLicense/RentalDurationKey</code>.
///
/// \param completionHandler Block that receives the new offlineVideoToken after the request
/// is successfully made. If there is an error, offlineVideoToken will
/// be nil, and error will report any NSError.
///
- (void)preloadFairPlayLicense:(BCOVVideo * _Nonnull)video parameters:(NSDictionary * _Nonnull)parameters completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
/// Initiate a request for a new FairPlay license.
/// You can request a new FairPlay license any time after the initial license has been acquired.
/// In the parameters you can specify a new rental duration, or you can convert a rental license
/// to a purchase license.
/// The video does not need to be re-downloaded to use a new FairPlay license, but you do need
/// to retrieve a new video object from the Playback API (either directly or through
/// the BCOVPlaybackService class). If the referenced video is no longer available through the Playback API,
/// you can use a substantially similar video, meaning the video should be from the same account,
/// and also have the same FairPlay configuration.
/// You should not specify a bitrate in the parameters. To change the bitrate you need to delete
/// the current download, and then initiate a completely new download at the new bitrate.
/// \param offlineVideoToken Offline video token used to identify the downloaded video for which to acquire a new license.
///
/// \param onlineVideo BCOVVideo object for an online video object retrieved through the Playback API
/// or the BCOVPlaybackService class. This video must not have been created by ‘-videoObjectFromOfflineVideoToken:’.
///
/// \param parameters NSDictionary of parameters used in this license renewal request.
/// May be nil. Valid parameters are: <code>BCOVFairPlayLicense/PurchaseKey</code>,
/// <code>BCOVFairPlayLicense/RentalDurationKey</code>.
///
/// \param completionHandler A block that is called after the license renewal request has completed.
/// If the request resulted in an error, it will be returned here as an NSError.
/// The offlineVideoToken parameter will be the same offline video token that was
/// passed in as the first parameter.
///
- (void)renewFairPlayLicense:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken video:(BCOVVideo * _Nullable)onlineVideo parameters:(NSDictionary * _Nonnull)parameters completion:(void (^ _Nonnull)(BCOVOfflineVideoToken _Nullable, NSError * _Nullable))completionHandler;
/// Initiate a request for a new FairPlay license.
/// You can request a new FairPlay license any time after the initial license has been acquired.
/// In the parameters you can specify a new rental duration, or you can convert a rental license
/// to a purchase license.
/// The video does not need to be re-downloaded to use a new FairPlay license, but you do need
/// to retrieve a new video object from the Playback API (either directly or through
/// the BCOVPlaybackService class). If the referenced video is no longer available through the Playback API,
/// you can use a substantially similar video, meaning the video should be from the same account,
/// and also have the same FairPlay configuration.
/// You should not specify a bitrate in the parameters. To change the bitrate you need to delete
/// the current download, and then initiate a completely new download at the new bitrate.
/// \param offlineVideoToken Offline video token used to identify the downloaded video for which to acquire a new license.
///
/// \param video BCOVVideo object for an online video object retrieved through the Playback API
/// or the BCOVPlaybackService class. This video must not have been created by <code>videoObject(fromOfflineVideoToken:)</code>.
///
/// \param authToken The authentication token with which to validate the video’s license
///
/// \param parameters NSDictionary of parameters used in this license renewal request.
/// May be nil. Valid parameters are: <code>BCOVFairPlayLicense/PurchaseKey</code>,
/// <code>BCOVFairPlayLicense/RentalDurationKey</code>.
///
/// \param completionHandler A block that is called after the license renewal request has completed.
/// If the request resulted in an error, it will be returned here as an NSError.
/// The offlineVideoToken parameter will be the same offline video token that was
/// passed in as the first parameter.
///
- (void)renewFairPlayLicense:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken video:(BCOVVideo * _Nonnull)video authToken:(NSString * _Nullable)authToken parameters:(NSDictionary * _Nonnull)parameters completion:(void (^ _Nonnull)(BCOVOfflineVideoToken _Nullable, NSError * _Nullable))completionHandler;
/// This method is used to add a FairPlay application certificate to the
/// Offline Video Manager’s list of available FairPlay application certificates.
/// Certificates will be retained for the life of the application.
/// To remove a certificate, add the same identifier with a nil as the
/// certificate data.
/// If you are using Dynamic Delivery, application certificates are retrieved
/// automatically by the FairPlay plugin, so this method is not needed.
/// You can, however, use this method to pre-load your application certificate
/// to speed up playback of the first FairPlay-encrypted video.
/// Certificates are stored and re-used for subsequent videos.
/// This string may not be nil.
/// For Dynamic Delivery, the identifier must be the URL that was used to
/// retrieve this certificate.
/// For legacy Video Cloud accounts, this should be set to <code>kBCOVDefaultFairPlayApplicationCertificateIdentifier</code>
/// to apply to all accounts.
/// If you are using multiple legacy Video Cloud accounts, set this param to the acount ID.
/// \param applicationCertificateData The FairPlay application certificate in an NSData object.
/// If set to nil, any existing application certificate for the
/// given identifier will be removed.
///
/// \param identifier A string used to locate the application certificate.
///
- (void)addFairPlayApplicationCertificate:(NSData * _Nullable)applicationCertificateData identifier:(NSString * _Nonnull)identifier;
/// Invalidate the FairPlay license for the specified offline video token.
/// This method deletes the FairPlay license for the video associated with the
/// offline video token, if there is one.
/// Attempts to play back a FairPlay-protected video without a license will result
/// in a <code>BCOVOfflineVideoManagerErrorCode/InvalidLicense</code> error.
/// If needed you can request a new FairPlay license for the video after it has been deleted.
/// \param offlineVideoToken Offline video token used to identify the downloaded
/// video whose license will be invalidated.
///
- (void)invalidateFairPlayLicense:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken;
/// Returns an NSDate representing the expiration of the FairPlay license for the video
/// associated with the offline video token.
/// Returns NSDate.distantFuture for “purchase” licenses.
/// Returns NSDate.distantFuture if the video is not encrypted with FairPlay.
/// Returns nil if the video has no FairPlay license.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
///
/// returns:
/// NSDate representing the expiration of the FairPlay license, NSDate.distantFuture
/// for purchase licenses or clear (no FairPlay) videos, or nil if there is no license.
- (NSDate * _Nullable)fairPlayLicenseExpiration:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken SWIFT_WARN_UNUSED_RESULT;
/// Returns the media selection group for a downloaded video specified
/// by the offline video token.
/// The downloaded video must be complete, or this method will return nil.
/// \param mediaCharacteristic The media characteristic that you are interested in.
/// Supported values are AVMediaCharacteristicAudible and AVMediaCharacteristicLegible.
///
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
/// Must not refer to a download in progress.
///
///
/// returns:
/// the media selection group for a downloaded video specified
/// by the offline video token.
- (AVMediaSelectionGroup * _Nullable)mediaSelectionGroupForMediaCharacteristic:(AVMediaCharacteristic _Nonnull)mediaCharacteristic offlineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken SWIFT_WARN_UNUSED_RESULT;
/// Returns the downloaded media selection options for a downloaded video specified
/// by the offline video token, as reported by the AVMediaCache for the
/// underlying AVURLAsset. May return nil.
/// \param mediaCharacteristic The media characteristic that you are interested in.
/// Supported values are AVMediaCharacteristicAudible and AVMediaCharacteristicLegible.
///
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
///
/// returns:
/// the downloaded media selection options for a downloaded video specified
/// by the offline video token, as reported by the AVMediaCache for the
/// underlying AVURLAsset. May return nil.
- (NSArray<AVMediaSelectionOption *> * _Nullable)downloadedMediaSelectionOptionsForMediaCharacteristic:(AVMediaCharacteristic _Nonnull)mediaCharacteristic offlineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken SWIFT_WARN_UNUSED_RESULT;
@end

@class NSURLSessionTask;

@interface BCOVOfflineVideoManager (SWIFT_EXTENSION(BrightcovePlayerSDK)) <NSURLSessionDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
@end

@class AVPersistableContentKeyRequest;

@interface BCOVOfflineVideoManager (SWIFT_EXTENSION(BrightcovePlayerSDK)) <AVContentKeySessionDelegate>
- (void)contentKeySession:(AVContentKeySession * _Nonnull)session didProvideContentKeyRequest:(AVContentKeyRequest * _Nonnull)keyRequest;
- (void)contentKeySession:(AVContentKeySession * _Nonnull)session contentKeyRequest:(AVContentKeyRequest * _Nonnull)keyRequest didFailWithError:(NSError * _Nonnull)err;
- (void)contentKeySession:(AVContentKeySession * _Nonnull)session didProvidePersistableContentKeyRequest:(AVPersistableContentKeyRequest * _Nonnull)keyRequest;
@end

@class AVAggregateAssetDownloadTask;
@class NSValue;
@class AVAssetDownloadTask;
@class AVAssetVariant;

@interface BCOVOfflineVideoManager (SWIFT_EXTENSION(BrightcovePlayerSDK)) <AVAssetDownloadDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session aggregateAssetDownloadTask:(AVAggregateAssetDownloadTask * _Nonnull)aggregateAssetDownloadTask willDownloadToURL:(NSURL * _Nonnull)location;
- (void)URLSession:(NSURLSession * _Nonnull)session aggregateAssetDownloadTask:(AVAggregateAssetDownloadTask * _Nonnull)aggregateAssetDownloadTask didCompleteForMediaSelection:(AVMediaSelection * _Nonnull)mediaSelection;
- (void)URLSession:(NSURLSession * _Nonnull)session aggregateAssetDownloadTask:(AVAggregateAssetDownloadTask * _Nonnull)aggregateAssetDownloadTask didLoadTimeRange:(CMTimeRange)timeRange totalTimeRangesLoaded:(NSArray<NSValue *> * _Nonnull)loadedTimeRanges timeRangeExpectedToLoad:(CMTimeRange)timeRangeExpectedToLoad forMediaSelection:(AVMediaSelection * _Nonnull)mediaSelection;
- (void)URLSession:(NSURLSession * _Nonnull)session assetDownloadTask:(AVAssetDownloadTask * _Nonnull)assetDownloadTask didFinishDownloadingToURL:(NSURL * _Nonnull)location;
- (void)URLSession:(NSURLSession * _Nonnull)session assetDownloadTask:(AVAssetDownloadTask * _Nonnull)assetDownloadTask didLoadTimeRange:(CMTimeRange)timeRange totalTimeRangesLoaded:(NSArray<NSValue *> * _Nonnull)loadedTimeRanges timeRangeExpectedToLoad:(CMTimeRange)timeRangeExpectedToLoad;
- (void)URLSession:(NSURLSession * _Nonnull)session assetDownloadTask:(AVAssetDownloadTask * _Nonnull)assetDownloadTask willDownloadVariants:(NSArray<AVAssetVariant *> * _Nonnull)variants SWIFT_AVAILABILITY(ios,introduced=15.0);
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)session;
@end

@class NSURLSessionConfiguration;
@class BCOVPlaybackService;

/// Conform to this protocol to receive information about each video and
/// video track download.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK31BCOVOfflineVideoManagerDelegate_")
@protocol BCOVOfflineVideoManagerDelegate <NSObject>
@optional
/// This method is called after the background URLSessionConfiguration object
/// is created, and before it’s used to create the shared AVAssetDownloadURLSession
/// object that’s used to download videos.
/// You can use this configuration object to set various options specified for the
/// URLSessionConfiguration, such as the <code>discretionary</code> flag, or
/// the <code>HTTPMaximumConnectionsPerHost</code> setting.
/// You should <em>not</em> set the <code>allowsCellularAccess</code> property; that is set in the individual
/// download tasks.
/// \param backgroundSessionConfiguration the background session configuration
///
- (void)didCreateSharedBackgroundSesssionConfiguration:(NSURLSessionConfiguration * _Nonnull)backgroundSessionConfiguration;
/// Receive progress notification about track downloads in progress for a downloaded video.
/// If you want to pause/resume/cancel the task, you should use the methods available
/// in the BCOVOfflineVideoManager to perform those actions.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
/// \param aggregateDownloadTask The AVAggregateAssetDownloadTask for this set of video track downloads
///
/// \param progressPercent How far along the download has progressed, expressed as a percentage,
/// for this individual AVMediaSelection.
///
/// \param mediaSelection The AVMediaSelection for which this progress is reported.
///
- (void)offlineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken aggregateDownloadTask:(AVAggregateAssetDownloadTask * _Nonnull)aggregateDownloadTask didProgressTo:(NSTimeInterval)progressPercent forMediaSelection:(AVMediaSelection * _Nonnull)mediaSelection;
/// Receive progress notification about track downloads in progress for a downloaded video.
/// If you want to pause/resume/cancel the task, you should use the methods available
/// in the BCOVOfflineVideoManager to perform those actions. This delegate method will called when
/// downloading with an AVAssetDownloadConfiguration.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
/// \param assetDownloadTask The AVAssetDownloadTask for this set of video track downloads
///
/// \param progressPercent How far along the download has progressed, expressed as a percentage,
/// for this individual AVMediaSelection.
///
- (void)offlineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken assetDownloadTask:(AVAssetDownloadTask * _Nonnull)assetDownloadTask didProgressTo:(NSTimeInterval)progressPercent SWIFT_AVAILABILITY(ios,introduced=15.0);
/// Receive confirmation of which AVAssetVariants will be downloaded.
/// This delegate method will called when downloading with an AVAssetDownloadConfiguration.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
/// \param assetDownloadTask The AVAssetDownloadTask for this set of video track downloads
///
/// \param variants An array of AVAssetVariant objects that will be downloaded.
///
- (void)offlineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken assetDownloadTask:(AVAssetDownloadTask * _Nonnull)assetDownloadTask willDownloadVariants:(NSArray<AVAssetVariant *> * _Nonnull)variants SWIFT_AVAILABILITY(ios,introduced=15.0);
/// This method is called when an individual track download is complete.
/// \param offlineVideoToken Offline video token used to identify the offline video
/// for which tracks are being downloaded.
///
/// \param mediaSelection The AVMediaSelection that has finished downloading.
///
- (void)offlineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken didFinishMediaSelectionDownload:(AVMediaSelection * _Nonnull)mediaSelection;
/// This method is called when a download is complete.
/// If an error occurred during the download, error will be non-nil.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
/// \param error NSError encountered during the download process. nil if no error.
///
- (void)offlineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken didFinishDownloadWithError:(NSError * _Nullable)error;
/// This method is called when a download is paused.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
- (void)downloadWasPausedForOfflineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken;
/// This method is called when the static images (thumbnail and poster) associated
/// with a video are downloaded to storage.
/// File URLs for the downloaded images are stored as properties on a BCOVVideo
/// created from the offline video token using <code>BCOVOfflineVideoManager/videoObject(fromOfflineVideoToken:)</code>
/// The properties are retrieved using the <code>BCOVOfflineVideo/ThumbnailFilePathPropertyKey</code> and
/// <code>BCOVOfflineVideo/PosterFilePathPropertyKey</code> keys.
/// This method will be called even if no images could be retrieved, so be sure to
/// check the UIImage you create from the poster and thumbnail paths. The file
/// paths will be present, but there may be no images stored at those locations.
/// \param offlineVideoToken Offline video token used to identify the downloaded video.
///
- (void)didDownloadStaticImagesWithOfflineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken;
/// This method is called when cleaning up stranded downloads.
/// Downloads can be stranded if you force-quit an app during a download,
/// or reboot while the app is suspended.
/// You do not need to implement this method unless you are starting your own
/// video downloads outside the Brightcove SDK and don’t want your videos deleted.
/// This method is called when a video package is flagged for deletion, meaning
/// there is no record of it in the Brightcove SDK.
/// \param videoPackagePath Path to video package directory that is flagged as stranded.
///
///
/// returns:
/// If the file is one you recognize, you should return <code>false</code>.
/// Otherwise, returning <code>true</code> will cause the video package to be deleted.
/// If you do not implement this method, stranded downloads will
/// be deleted by default.
- (BOOL)shouldDeleteVideoPackage:(NSString * _Nonnull)videoPackagePath SWIFT_WARN_UNUSED_RESULT;
/// This method is called when the app is activated and offline video
/// storage changed while the app was not running or was in the background, for
/// example when the user deletes downloaded videos via the device Storage settings
/// in the General settings of the Settings app.
/// When called, you should update your UI to reflect the changes in
/// offline storage.
/// Detecting changes to offline video storage occurs whenever the app becomes active.
/// This method is called on the main thread.
- (void)offlineVideoStorageDidChange;
/// Called when the TTL token for the current source’s manifest has expired and needs to be refreshed.
/// You will want to implement this delegate method if you are using a BCOVPlaybackService with
/// a custom URL.
/// If you are using the default initilaizer for BCOVPlaybackService, <code>BCOVPlaybackService/init(withAccountId:policyKey:)</code>
/// you do not need to implement this delegate method.
/// If you return <code>nil</code>, or do not implement this method, an instance of BCOVPlaybackService will be
/// created internally with the <code>BCOVPlaybackService/init(withAccountId:policyKey:)</code> initializer.
/// \param video The video that requires a TTL token refresh.
///
///
/// returns:
/// An instance of BCOVPlaybackService that will be used to update the manifest TTL token.
- (BCOVPlaybackService * _Nullable)playbackServiceForManifestURLTTLUpdateForVideo:(BCOVVideo * _Nonnull)video SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, BCOVOfflineVideoManagerErrorCode, open) {
  BCOVOfflineVideoManagerErrorCodeInvalidParameter = 69300,
  BCOVOfflineVideoManagerErrorCodeUnsupported = 69301,
  BCOVOfflineVideoManagerErrorCodeDownloadFailure = 69302,
  BCOVOfflineVideoManagerErrorCodeExpiredLicense = 69303,
  BCOVOfflineVideoManagerErrorCodeInvalidLicense = 69304,
};


/// BCOVOfflineVideoStatus
/// This object keeps track of various pieces of information related
/// to video downloads.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK22BCOVOfflineVideoStatus")
@interface BCOVOfflineVideoStatus : NSObject <NSCopying>
/// Offline video token used to identify the downloaded video
@property (nonatomic, readonly, strong) BCOVOfflineVideoToken _Nullable offlineVideoToken;
/// The state of the current download
@property (nonatomic, readonly) BCOVOfflineVideoDownloadState downloadState;
/// The NSDate that this download was requested (not when it started)
@property (nonatomic, readonly, copy) NSDate * _Nullable downloadStartTime;
/// The NSDate that this download finished (successfully, cancelled, or with an error)
@property (nonatomic, readonly, copy) NSDate * _Nullable downloadEndTime;
/// The progress of the download, expressed as a percentage
@property (nonatomic, readonly) double downloadPercent;
/// The AVAggregateAssetDownloadTask associated with the download.
/// Will be set to nil once the download has completed.
@property (nonatomic, readonly, strong) AVAggregateAssetDownloadTask * _Nullable aggregateDownloadTask;
/// The AVAssetDownloadTask associated with the download.
/// Will be set to nil once the download has completed.
@property (nonatomic, readonly, strong) AVAssetDownloadTask * _Nullable assetDownloadTask;
/// The error associated with this download if a failure occurs.
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)initWithOfflineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken downloadTask:(AVAssetDownloadTask * _Nullable)downloadTask licenseRequestTime:(NSDate * _Nonnull)licenseRequestTime startTime:(NSDate * _Nullable)startTime OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (BCOVOfflineVideoStatus * _Nullable)createFromOfflineVideoToken:(BCOVOfflineVideoToken _Nonnull)offlineVideoToken SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@protocol BCOVPUIButtonAccessibilityDelegate;

/// A subclass of UIButton that contains two titles,
/// a primary and a secondary title.
/// This is used for buttons that change titles when they
/// toggle between two different states, like the play/pause button.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK13BCOVPUIButton")
@interface BCOVPUIButton : UIButton
/// The primary title is the default title; e.g. the “play” icon for the play button.
@property (nonatomic, copy) NSString * _Nullable primaryTitle;
/// The secondary title is the alternate title; e.g. “pause” for the play button.
@property (nonatomic, copy) NSString * _Nullable secondaryTitle;
@property (nonatomic, strong) id <BCOVPUIButtonAccessibilityDelegate> _Nullable accessibilityDelegate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)addTarget:(id _Nullable)target action:(SEL _Nonnull)action forControlEvents:(UIControlEvents)controlEvents;
/// Show the primary or secondary button title text.
/// \param primary <code>true</code> displays the primary button title; otherwise the secondary title.
///
- (void)showPrimaryTitle:(BOOL)primary;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


/// A protocol that allows for users to easily override
/// the defeault values of OOTB control buttons’ accessibility labels
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK34BCOVPUIButtonAccessibilityDelegate_")
@protocol BCOVPUIButtonAccessibilityDelegate <NSObject>
- (NSString * _Nullable)accessibilityLabelForButton:(BCOVPUIButton * _Nonnull)button isPrimaryState:(BOOL)isPrimaryState SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImage;

SWIFT_CLASS("_TtC19BrightcovePlayerSDK13BCOVPUICommon")
@interface BCOVPUICommon : NSObject
/// Icon font used by the PlayerUI.
+ (UIFont * _Nullable)iconFont SWIFT_WARN_UNUSED_RESULT;
/// Icon font used by the PlayerUI at specified font size.
/// \param fontSize Size of font to return.
///
///
/// returns:
/// Font at specified size.
+ (UIFont * _Nullable)iconFontWithSize:(CGFloat)fontSize SWIFT_WARN_UNUSED_RESULT;
/// Returns the unicode to be used with +iconFont or +iconFontWithSize:
/// for the given icon.
/// \param buttonIcon The icon to return unicode for.
///
///
/// returns:
/// Unicode string for the icon.
+ (NSString * _Nullable)fontUnicodeForButtonIcon:(BCOVPUIButtonIcon)buttonIcon SWIFT_WARN_UNUSED_RESULT;
/// Color used by the playback controls in their normal state, UIControlStateNormal.
/// Red:255.0/255.0 green:255/255.0 blue:255.0/255.0 alpha:1.0
+ (UIColor * _Nonnull)controlColorForNormalState SWIFT_WARN_UNUSED_RESULT;
/// Color used by the playback controls in their normal state, UIControlStateSelected.
/// Red:255.0/255.0 green:255/255.0 blue:255.0/255.0 alpha:1.0
+ (UIColor * _Nonnull)controlColorForSelectedState SWIFT_WARN_UNUSED_RESULT;
/// Color used by the playback controls in their normal state, UIControlStateHighlighted.
/// Red:128.0/255.0 green:128/255.0 blue:128.0/255.0 alpha:1.0
+ (UIColor * _Nonnull)controlColorForHighlightedState SWIFT_WARN_UNUSED_RESULT;
/// Color used by the playback controls in their normal state, UIControlStateDisabled.
/// Red:128.0/255.0 green:128/255.0 blue:128.0/255.0 alpha:0.8
+ (UIColor * _Nonnull)controlColorForDisabledState SWIFT_WARN_UNUSED_RESULT;
/// Color used by the Live button to indicate the stream is currently live.
/// Red:85.0/255.0 green:154.0/255.0 blue:66.0/255.0 alpha:1.0
+ (UIColor * _Nonnull)liveViewTitleColorForLive SWIFT_WARN_UNUSED_RESULT;
/// Color used by the progress slider maximum track tint.
/// Red:140.0/255.0 green:143.0/255.0 blue:140.0/255.0 alpha:1.0
+ (UIColor * _Nonnull)progressSliderMaximumTrackTintColor SWIFT_WARN_UNUSED_RESULT;
/// Color used by the progress slider minimum track tint.
/// Red:214.0/255.0 green:36.0/255.0 blue:133.0/255.0 alpha:1.0
+ (UIColor * _Nonnull)progressSliderMinimumTrackTintColor SWIFT_WARN_UNUSED_RESULT;
/// Color used by the progress slider buffered tint.
/// Red:255.0/255.0 green:255.0/255.0 blue:255.0/255.0 alpha:1.0
+ (UIColor * _Nonnull)progressSliderBufferProgressTintColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the default image for the volume view.
/// \param fontSize The size of the font to create the image with.
///
/// \param color The color to use.
///
///
/// returns:
/// The image.
+ (UIImage * _Nullable)imageForVolumeViewWithFontSize:(CGFloat)fontSize color:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
/// Default font size used by labels.
/// 16.
+ (CGFloat)defaultFontSizeForLabel SWIFT_WARN_UNUSED_RESULT;
/// Default font size used by buttons.
/// 22.
+ (CGFloat)defaultFontSizeForButton SWIFT_WARN_UNUSED_RESULT;
+ (UIView * _Nonnull)createContainerViewWithSuperview:(UIView * _Nonnull)superview SWIFT_WARN_UNUSED_RESULT;
+ (UIView * _Nonnull)createOverlayViewWithSuperview:(UIView * _Nonnull)superview SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)formatTimeForDisplay:(CMTime)time SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)imageForString:(NSString * _Nonnull)string font:(UIFont * _Nonnull)font color:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
+ (SEL _Nullable)actionSelectorFrom:(UIControlEvents)controlEvent SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// BCOVPUILayoutView view objects are used to lay out controls in a
/// BCOVPUIBasicControlView. Layout views are typically created with
/// BCOVPUIBasicControlView’s +layoutViewWithControlFromTag:width:elasticity:
/// method, and contain a standard Player UI element such as a play button,
/// time code label, or progress slider.
/// You can also create empty layout views in which to add your own subviews.
/// The layout view properties determine exactly how the views are positioned
/// with respect to each other in variable-width layouts.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK17BCOVPUILayoutView")
@interface BCOVPUILayoutView : UIView
/// The smallest width that will be set for the view when resized for layout.
/// If elasticity is set to zero, this will be the exact width of the view.
@property (nonatomic) float minimumWidth;
/// Elasticity determines how much each view is resized to fill the available
/// width of the Player UI’s control bar relative to all other views.
/// If there are two layout views in a control bar, and one has an elasticity
/// of 1.0, and the other has an elasticity of 2.0, the latter will grow twice
/// as much when the view is resized.
/// Each row of a control layout should typically contain at least one layout
/// view with an elasticity greater than zero.
/// A view with an elasticity of zero will remain at its minimum width.
@property (nonatomic) float elasticity;
/// The “isRemoved” property can be set to <code>true</code> or <code>false</code> to quickly hide or show
/// a particular layout view. This is more efficient than setting an entirely
/// new BCOVPUIControlLayout with a removed or added view.
/// Call -setNeedsLayout on the BCOVPUIBasicControlView after setting
/// this property to show the new layout.
@property (nonatomic) BOOL isRemoved;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A subclass of UISlider that provides a “buffered” track
/// with markers for advertising or generic use, plus an
/// “advertising mode” used to display progress of an ad.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK13BCOVPUISlider")
@interface BCOVPUISlider : UISlider
/// Height of the track area
/// Default value is 5.
@property (nonatomic) CGFloat trackHeight;
/// The amount of buffer. This value will be pinned to min/max.
@property (nonatomic) float bufferProgress;
/// Set to YES to change the slider’s UI to the bumper mode.
/// In bumper mode this hides the buffering indicator,
/// hides markers, and sets the min/max track colors to
/// bumperMinimumTrackTintColor and bumperMaximumTrackTintColor.
@property (nonatomic) BOOL bumperModeActive;
/// Set to YES to change the slider’s UI to the advertising mode.
/// In advertising mode this hides the buffering indicator,
/// hides markers, and sets the min/max track colors to
/// advertisingMinimumTrackTintColor and advertisingMaximumTrackTintColor.
@property (nonatomic) BOOL advertisingMode;
/// The tint color to be used for the buffered area.
@property (nonatomic, strong) UIColor * _Nullable bufferProgressTintColor;
/// The tint color used for the minimum track area when in bumper mode.
/// The default bumper minimum track color is purple.
@property (nonatomic, strong) UIColor * _Nullable bumperMinimumTrackTintColor;
/// The tint color used for the maximum track area when in bumper mode.
/// The default bumper minimum track color is dark gray.
@property (nonatomic, strong) UIColor * _Nullable bumperMaximumTrackTintColor;
/// The tint color used for the minimum track area when in advertising mode.
/// This color is also used for ad ticks marks in normal mode.
/// The default advertising minimum track color is yellow.
@property (nonatomic, strong) UIColor * _Nullable advertisingMinimumTrackTintColor;
/// The tint color used for the maximum track area when in advertising mode.
/// The default advertising minimum track color is dark gray.
@property (nonatomic, strong) UIColor * _Nullable advertisingMaximumTrackTintColor;
/// The color used for the generic markers drawn in the track area
/// when no custom marker images are supplied.
/// The default generic marker color is white.
/// Set to nil to restore the default color.
@property (nonatomic, strong) UIColor * _Nullable markerTickColor;
/// The duration (in seconds) represented by the range of the slider.
/// Used for positioning markers.
/// The default value is 30, but should be set to the length of its associated video.
/// The duration will be set automatically for the progress slider installed into
/// the PlayerUI at playerView.controlsView.progressSlider.
@property (nonatomic) double duration;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Add a marker that will be displayed on the slider at a specific location.
/// \param position The location (in seconds) on the slider where the marker should be placed. See the “duration” property for related details.
///
/// \param duration The duration represented by the tick mark; can be set to zero to draw the smallest size marker (2 pixels wide).
///
/// \param isAd <code>true</code> indicates this marker represents an ad (drawn in yellow by default). <code>false</code> indicates this is a generic marker (drawn in white by default).
///
/// \param image An optional image that will be drawn in place of the default marker indicator. Can be set to nil.
///
- (void)addMarkerAt:(double)position duration:(double)duration isAd:(BOOL)isAd image:(UIImage * _Nullable)image;
/// Set a custom minimum track image to be used in normal (non-advertising) mode.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     image The image to be used on the minimum end of the track (typically the left side of the thumb). The image should be a resizeable UIImage, ‘trackHeight’ pixels high. When a custom image is set, markers will no longer be displayed. Set to nil to restore the default track images.
///   </li>
///   <li>
///     state The UIControlState for which this image will be active.
///   </li>
/// </ul>
- (void)setCustomMinimumTrackImage:(UIImage * _Nullable)image forState:(UIControlState)state;
/// Set a custom maximum track image to be used in normal (non-advertising) mode.
/// \param image The image to be used on the maximum end of the track (typically the left side of the thumb). The image should be a resizeable UIImage, ‘trackHeight’ pixels high. When a custom image is set, markers will no longer be displayed. Set to nil to restore the default track images.
///
/// \param state The UIControlState for which this image will be active.
///
- (void)setCustomMaximumTrackImage:(UIImage * _Nullable)image forState:(UIControlState)state;
- (void)drawRect:(CGRect)rect;
- (CGRect)trackRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, strong) UIColor * _Nullable minimumTrackTintColor;
@property (nonatomic, strong) UIColor * _Nullable maximumTrackTintColor;
- (void)addTarget:(id _Nullable)target action:(SEL _Nonnull)action forControlEvents:(UIControlEvents)controlEvents;
/// Remove all markers at the specified position.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     position The location on the slider (in seconds) of the marker to be removed.
///   </li>
/// </ul>
- (void)removeMarkerAtPosition:(double)position;
/// Remove all markers from the slider.
- (void)removeAllMarkers;
/// Remove all generic markers from the slider.
- (void)removeGenericMarkers;
/// Remove all ad markers from the slider.
- (void)removeAdMarkers;
- (void)setThumbImage:(UIImage * _Nullable)image forState:(UIControlState)state;
@property (nonatomic, strong) UIColor * _Nullable thumbTintColor;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


/// Conform to this protocol to receive basic ad information for each session.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK33BCOVPlaybackControllerAdsDelegate_")
@protocol BCOVPlaybackControllerAdsDelegate <NSObject>
@optional
/// Called when playback enters a new ad sequence within a playback session.
/// \param controller The playback controller in which this transition occurred.
///
/// \param session The playback session within which the ad transition occurred.
///
/// \param adSequence The ad sequence being entered.
///
- (void)playbackController:(id <BCOVPlaybackController> _Nonnull)controller playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didEnterAdSequence:(BCOVAdSequence * _Nonnull)adSequence;
/// Called when playback exits an ad sequence within a playback session.
/// \param controller The playback controller in which this transition occurred.
///
/// \param session The playback session within which the ad transition occurred.
///
/// \param adSequence The ad sequence being exited.
///
- (void)playbackController:(id <BCOVPlaybackController> _Nonnull)controller playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didExitAdSequence:(BCOVAdSequence * _Nonnull)adSequence;
/// Called when playback enters a new ad within a playback session.
/// \param controller The playback controller in which this transition occurred.
///
/// \param session The playback session within which the ad transition occurred.
///
/// \param ad The ad being entered.
///
- (void)playbackController:(id <BCOVPlaybackController> _Nonnull)controller playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didEnterAd:(BCOVAd * _Nonnull)ad;
/// Called when playback exits an ad within a playback session.
/// \param controller The playback controller in which this transition occurred.
///
/// \param session The playback session within which the ad transition occurred.
///
/// \param ad The ad being exited.
///
- (void)playbackController:(id <BCOVPlaybackController> _Nonnull)controller playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didExitAd:(BCOVAd * _Nonnull)ad;
/// Called with the playback session’s ad playback progress.
/// \param controller The playback controller in which an ad is progressing.
///
/// \param session The playback session within which the ad transition occurred.
///
/// \param ad The ad that is progressing.
///
/// \param progress The progress time of the ad.
///
- (void)playbackController:(id <BCOVPlaybackController> _Nonnull)controller playbackSession:(id <BCOVPlaybackSession> _Nonnull)session ad:(BCOVAd * _Nonnull)ad didProgressTo:(NSTimeInterval)progress;
/// Called when an ad paused.
/// \param controller The playback controller in which this transition occurred.
///
/// \param session The playback session within which the ad transition occurred.
///
/// \param ad The ad being paused.
///
- (void)playbackController:(id <BCOVPlaybackController> _Nonnull)controller playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didPauseAd:(BCOVAd * _Nonnull)ad;
/// Called when an ad resumed.
/// – Parameters:
/// <ul>
///   <li>
///     controller The playback controller in which this transition occurred.
///   </li>
///   <li>
///     session The playback session within which the ad transition occurred.
///   </li>
///   <li>
///     ad The ad being resumed.
///   </li>
/// </ul>
- (void)playbackController:(id <BCOVPlaybackController> _Nonnull)controller playbackSession:(id <BCOVPlaybackSession> _Nonnull)session didResumeAd:(BCOVAd * _Nonnull)ad;
@end


/// Conform to this protocol to receive basic playback information for each video in
/// addition to advertising.
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK30BCOVPlaybackControllerDelegate_")
@protocol BCOVPlaybackControllerDelegate <BCOVPlaybackControllerAdsDelegate, BCOVPlaybackControllerBasicDelegate, BCOVPlaybackControllerBumperDelegate>
@end

@class BCOVPlaybackServiceRequestFactory;

/// The BCOVPlaybackService class provides asynchronous methods for retrieving
/// information about videos from Brightcove’s Playback API.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK19BCOVPlaybackService")
@interface BCOVPlaybackService : NSObject
/// Error domain for BCOVPlaybackService.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorDomain;)
+ (NSString * _Nonnull)ErrorDomain SWIFT_WARN_UNUSED_RESULT;
/// Key for NSError.userInfo for errors with domain BCOVPlaybackService.ErrorDomain
/// and errorCode BCOVPlaybackServiceErrorCode.JSONDeserializationError. This is the
/// raw response data. This may not exist in error.userInfo.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorKeyRawResponseData;)
+ (NSString * _Nonnull)ErrorKeyRawResponseData SWIFT_WARN_UNUSED_RESULT;
/// Key for NSError.userInfo for errors with domain BCOVPlaybackService.ErrorDomain
/// and errorCode BCOVPlaybackServiceError.CodeAPIError. This is an NSArray of errors
/// returned by the Playback API.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorKeyAPIErrors;)
+ (NSString * _Nonnull)ErrorKeyAPIErrors SWIFT_WARN_UNUSED_RESULT;
/// Key for NSError.userInfo for errors with domain BCOVPlaybackService.ErrorDomain
/// and errorCode BCOVPlaybackServiceErrorCode.APIError. This is the HTTP status code
/// returned by the API request.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ErrorKeyAPIHTTPStatusCode;)
+ (NSString * _Nonnull)ErrorKeyAPIHTTPStatusCode SWIFT_WARN_UNUSED_RESULT;
/// Parameter dictionary key for BCOVPlaybackService methods that return a playlist.
/// This key sets the maximum number of videos returned in a playlist.
/// This constant can be used in place of the string value “limit”.
/// Playlist Paging dictionary keys
/// For BCOVPlaybackService methods that return a playlist, you can request a
/// partial playlist, or “pages” from the playlist by specifying a limit and offset.
/// For example, if you have a playlist with 100 videos, you can request
/// only 6 videos starting at video number 10 with the following parameters
/// dictionary:
/// \code
/// let parameters =
/// [
///     "limit": 6,
///     "offset": 10
/// ]
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ParameterKeyLimit;)
+ (NSString * _Nonnull)ParameterKeyLimit SWIFT_WARN_UNUSED_RESULT;
/// Parameter dictionary key for BCOVPlaybackService methods that return a playlist.
/// This key sets the starting index into the playlist at which videos will be returned.
/// This constant can be used in place of the string value “offset”.
/// Playlist Paging dictionary keys
/// For BCOVPlaybackService methods that return a playlist, you can request a
/// partial playlist, or “pages” from the playlist by specifying a limit and offset.
/// For example, if you have a playlist with 100 videos, you can request
/// only 6 videos starting at video number 10 with the following parameters
/// dictionary:
/// \code
/// let parameters =
/// [
///     "limit": 6,
///     "offset": 10
/// ]
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ParameterKeyOffset;)
+ (NSString * _Nonnull)ParameterKeyOffset SWIFT_WARN_UNUSED_RESULT;
/// Parameter dictionary key for BCOVPlaybackService methods that return a playlist or video.
/// This key sets the SSAI ad config ID.
/// This constant can be used in place of the string value “ad_config_id”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ParamaterKeyAdConfigId;)
+ (NSString * _Nonnull)ParamaterKeyAdConfigId SWIFT_WARN_UNUSED_RESULT;
/// Parameter dictionary key for BCOVPlaybackService methods that return a playlist or video.
/// This key sets the Live Playback Token value.
/// This constant can be used in place of the string value “livePlaybackToken”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ParameterKeyLivePlaybackToken;)
+ (NSString * _Nonnull)ParameterKeyLivePlaybackToken SWIFT_WARN_UNUSED_RESULT;
/// Parameter dictionary key for BCOVPlaybackService methods that return a playlist or video.
/// This key enables Dynamic Delivery Rules for just-in-time manifest generation.
/// This constant can be used in place of the string value “config_id”.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ParameterKeyDeliveryConfigId;)
+ (NSString * _Nonnull)ParameterKeyDeliveryConfigId SWIFT_WARN_UNUSED_RESULT;
/// Configuration dictionary key for BCOVPlaybackService’s <code>findVideoWithConfiguration:parameters:completion:</code>
/// and <code>findPlaylistWithConfiguration:parameters:completion:</code> methods.
/// The value for this key will be used to fetch a playlist using a playlist ID or a video using a video ID.
/// Takes presedence over <code>ConfigurationKeyAssetReferenceID</code> if these
/// keys are used together.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ConfigurationKeyAssetID;)
+ (NSString * _Nonnull)ConfigurationKeyAssetID SWIFT_WARN_UNUSED_RESULT;
/// Configuration dictionary key for BCOVPlaybackService’s <code>findVideoWithConfiguration:parameters:completion:</code>
/// and <code>findPlaylistWithConfiguration:parameters:completion:</code> methods.
/// The value for this key will be used to fetch a playlist using a playlist reference ID or a video using a video reference ID.
/// Is ignored in favor of <code>ConfigurationKeyAssetID</code> if these
/// keys are used together.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ConfigurationKeyAssetReferenceID;)
+ (NSString * _Nonnull)ConfigurationKeyAssetReferenceID SWIFT_WARN_UNUSED_RESULT;
/// Configuration dictionary key for BCOVPlaybackService’s <code>findVideoWithConfiguration:parameters:completion:</code>
/// and <code>findPlaylistWithConfiguration:parameters:completion:</code> methods.
/// The value for this key will be used to fetch a video or playlist using an auth token.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ConfigurationKeyAuthToken;)
+ (NSString * _Nonnull)ConfigurationKeyAuthToken SWIFT_WARN_UNUSED_RESULT;
/// Configuration dictionary key for BCOVPlaybackService’s <code>findVideoWithConfiguration:parameters:completion:</code>
/// and <code>findPlaylistWithConfiguration:parameters:completion:</code> methods.
/// The value for this key will be used to fetch a bumper video for video or playlist using a video ID.
/// Takes presedence over <code>ConfigurationKeyBumperReferenceID</code> if these
/// keys are used together.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ConfigurationKeyBumperID;)
+ (NSString * _Nonnull)ConfigurationKeyBumperID SWIFT_WARN_UNUSED_RESULT;
/// Configuration dictionary key for BCOVPlaybackService’s <code>findVideoWithConfiguration:parameters:completion:</code>
/// and <code>findPlaylistWithConfiguration:parameters:completion:</code> methods.
/// The value for this key will be used to fetch a bumper video for video or playlist using a video reference ID.
/// Is ignored in favor of <code>ConfigurationKeyBumperID</code> if these
/// keys are used together.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ConfigurationKeyBumperReferenceID;)
+ (NSString * _Nonnull)ConfigurationKeyBumperReferenceID SWIFT_WARN_UNUSED_RESULT;
/// NSURLSession shared across all network calls to the BCOVPlaybackService.
/// This object is created when the Playback Service is initialized.
/// If you wish to use your own NSURLSession you can set it here.
/// If set to nil, the default NSURLSession will be re-created.
@property (nonatomic, strong) NSURLSession * _Nonnull sharedURLSession;
/// The watermarking token for use with Forensic Watermarking
@property (nonatomic, copy) NSString * _Nullable watermarkingToken;
/// Initializes a BCOVPlaybackService. It uses the accountId and policyKey
/// to create a BCOVPlaybackServiceRequestFactory internally.
/// If using the Edge Playback Service, the policyKey value should be nil
/// \param accountId Account Id to be used for each request. Must not be nil.
///
/// \param policyKey PolicyKey to be used for each request. May be nil.
///
///
/// returns:
/// An initialized instance.
- (nonnull instancetype)initWithAccountId:(NSString * _Nonnull)accountId policyKey:(NSString * _Nullable)policyKey;
/// Initializes a BCOVPlaybackService with a required BCOVPlaybackServiceRequestFactory.
/// \param requestFactory Request Factory to use for creating URL requests.
///
///
/// returns:
/// An initialized instance.
- (nonnull instancetype)initWithRequestFactory:(BCOVPlaybackServiceRequestFactory * _Nonnull)requestFactory OBJC_DESIGNATED_INITIALIZER;
/// Retrieves a BCOVPlaylist from the Playback API service by its playlist ID on a
/// background queue.
/// If the completionHandler provides an error, the BCOVPlaylist will be nil.
/// Valid parameters are:
/// <ul>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAssetID</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAssetReferenceID</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAuthToken</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyBumperID</code>
///   </li>
/// </ul>
/// \param configuration NSDictionary of configuration options used in this catalog request.
///
/// \param queryParameters Additional NSString query parameters to add to the Playback API requests. These values will override the default values if they conflict. Can use the <code>ParameterKeyOffset</code> and <code>ParameterKeyLimit</code> parameters. See “Playlist Paging” above.
///
/// \param completion Closure which will be invoked when the request finishes. Execution of the closure will occur on the main thread.
///
- (void)findPlaylistWithConfiguration:(NSDictionary<NSString *, id> * _Nonnull)configuration queryParameters:(NSDictionary<NSString *, id> * _Nullable)queryParameters completion:(void (^ _Nonnull)(BCOVPlaylist * _Nullable, id _Nullable, NSError * _Nullable))completion;
/// Retrieves a BCOVVideo from the Playback API service by its video ID on a background
/// queue.
/// If the completionHandler provides an NSError, the BCOVVideo will be nil.
/// Valid parameters are:
/// <ul>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAssetID</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAssetReferenceID</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAuthToken</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyBumperID</code>
///   </li>
/// </ul>
/// \param configuration NSDictionary of configuration options used in this catalog request.
///
/// \param queryParameters Additional NSString query parameters to add to the Playback API requests. These values will override the default values if they conflict.
///
/// \param completion Closure which will be invoked when the request finishes. Execution of the closure will occur on the main thread.
///
- (void)findVideoWithConfiguration:(NSDictionary<NSString *, id> * _Nonnull)configuration queryParameters:(NSDictionary<NSString *, id> * _Nullable)queryParameters completion:(void (^ _Nonnull)(BCOVVideo * _Nullable, id _Nullable, NSError * _Nullable))completion;
/// Initializes a source from the JSON dictionary. Properties that don’t map to
/// first class properties on the source are added to the properties dictionary.
/// \param json Dictionary representing the deserialized source.
///
///
/// returns:
/// The initialized source.
+ (BCOVSource * _Nullable)sourceFromJSONDictionary:(id _Nullable)json SWIFT_WARN_UNUSED_RESULT;
/// Initializes a cue point from the JSON dictionary. Properties that don’t
/// map to first class properties on cue point are added to the properties
/// dictionary.
/// \param json Dictionary representing the deserialized cuepoint.
///
///
/// returns:
/// The initialized cue point.
+ (BCOVCuePoint * _Nullable)cuePointFromJSONDictionary:(NSDictionary<NSString *, id> * _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
/// Initializes a playlist from the JSON dictionary. Properties that don’t
/// map to first class properties on playlist are added to the properties
/// dictionary.
/// \param json Dictionary representing the deserialized playlist.
///
///
/// returns:
/// The initialized playlist.
+ (BCOVPlaylist * _Nullable)playlistFromJSONDictionary:(id _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
/// Initializes a video from the JSON dictionary. Properties that don’t
/// map to first class properties on video are added to the properties
/// dictionary.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     json: Dictionary representing the deserialized video.
///   </li>
/// </ul>
///
/// returns:
/// The initialized video.
+ (BCOVVideo * _Nullable)videoFromJSONDictionary:(id _Nonnull)json SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Errors associated with Playback API requests.
typedef SWIFT_ENUM(NSInteger, BCOVPlaybackServiceErrorCode, open) {
/// No error.
  BCOVPlaybackServiceErrorCodeNoError = 0,
/// Error Code that indicates there was an error connecting to the Playback
/// API. Check the error.userInfo key NSUnderlyingErrorKey for the actual
/// connection error.
  BCOVPlaybackServiceErrorCodeConnectionError = 1,
/// Error Code that indicates there was an error parsing the response as JSON.
/// If the request returned any data, that raw NSData will be included in the
/// userInfo by key BCOVPlaybackService.ErrorKeyRawResponseData. Check the
/// error.userInfo key NSUnderlyingErrorKey for the actual JSON deserialization error.
  BCOVPlaybackServiceErrorCodeJSONDeserializationError = 2,
/// Error Code that indicates there was an error returned by the API. Check the
/// error.userInfo key BCOVPlaybackService.ErrorKeyAPIErrors for an NSArray
/// of errors returned by the API and key BCOVPlaybackService.ErrorKeyAPIHTTPStatusCode
/// to find the status code returned.
  BCOVPlaybackServiceErrorCodeAPIError = 3,
};

@class NSURLRequest;

/// The BCOVPlaybackServiceRequestFactory class provides methods for creating requests for videos from Brightcove’s Playback API.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK33BCOVPlaybackServiceRequestFactory")
@interface BCOVPlaybackServiceRequestFactory : NSObject
/// Videocloud Account Id.
@property (nonatomic, readonly, copy) NSString * _Nullable accountId;
/// Videocloud Policy Key
@property (nonatomic, readonly, copy) NSString * _Nullable policyKey;
/// Auth Token for EPA/PAS
@property (nonatomic, readonly, copy) NSString * _Nullable authToken;
/// Base URL for Generic Stream Concurrency
@property (nonatomic, readonly, copy) NSString * _Nonnull gscBaseURLStr;
/// NSDictionary of additional HTTP request headers set on each NSURLRequest.
/// The dictionary key defines the header field name.
/// Header field names are case-insensitive.
/// Both keys and values should be NSStrings.
/// Defaults to nil.
@property (nonatomic, copy) NSDictionary * _Nullable additionalHTTPRequestHeaders;
/// Returns an initialized instance with the specified policy. The base URL
/// string used by the returned instance is https://edge.api.brightcove.com/playback/v1 .
/// If using the Edge Playback Service, the policyKey value should be nil
/// \param accountId A Video Cloud account. Must not be nil.
///
/// \param policyKey A Video Cloud CMS policy..
///
///
/// returns:
/// The initialized BCOVPlaybackServiceRequestFactory.
- (nonnull instancetype)initWithAccountId:(NSString * _Nonnull)accountId policyKey:(NSString * _Nullable)policyKey;
/// Returns an initialized instance with the specified token, account, and base URL string.
/// If using the Edge Playback Service, the policyKey value should be nil
/// \param accountId A Video Cloud account. Must not be nil.
///
/// \param policyKey A Video Cloud CMS policy.
///
/// \param baseURLStr A string URL to the API.
///
///
/// returns:
/// The initialized BCOVPlaybackServiceRequestFactory.
- (nonnull instancetype)initWithAccountId:(NSString * _Nonnull)accountId policyKey:(NSString * _Nullable)policyKey baseURLStr:(NSString * _Nullable)baseURLStr;
/// Returns an initialized instance with the specified token, account, base URL string, and auth base URL string
/// If using the Edge Playback Service, the policyKey value should be nil
/// \param accountId A Video Cloud account. Must not be nil.
///
/// \param policyKey A Video Cloud CMS policy.
///
/// \param baseURLStr A string URL to the API.
///
/// \param authBaseURLStr A string URL to the API that will be used for EPA/PAS requests.
///
///
/// returns:
/// The initialized BCOVPlaybackServiceRequestFactory.
- (nonnull instancetype)initWithAccountId:(NSString * _Nonnull)accountId policyKey:(NSString * _Nullable)policyKey baseURLStr:(NSString * _Nullable)baseURLStr authBaseURLStr:(NSString * _Nullable)authBaseURLStr;
/// Returns an initialized instance with the specified token, account, base URL string, auth base URL string and GSC base URL string
/// If using the Edge Playback Service, the policyKey value should be nil
/// \param accountId A Video Cloud account. Must not be nil.
///
/// \param policyKey A Video Cloud CMS policy.
///
/// \param baseURLStr A string URL to the API.
///
/// \param authBaseURLStr A string URL to the API that will be used for EPA/PAS requests.
///
/// \param gscBaseURLStr A String URL to the API that will be used for Generic Stream Concurrency requests.
///
///
/// returns:
/// The initialized BCOVPlaybackServiceRequestFactory.
- (nonnull instancetype)initWithAccountId:(NSString * _Nonnull)accountId policyKey:(NSString * _Nullable)policyKey baseURLStr:(NSString * _Nullable)baseURLStr authBaseURLStr:(NSString * _Nullable)authBaseURLStr gscBaseURLStr:(NSString * _Nullable)gscBaseURLStr OBJC_DESIGNATED_INITIALIZER;
/// Constructs a request for a playlist.
/// Valid parameters are:
/// <ul>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAssetID</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAssetReferenceID</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAuthToken</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyBumperID</code>
///   </li>
/// </ul>
/// \param configuration Dictionary of configuration options used in this catalog request.
///
/// \param parameters parameters that will be added as URL parameters to the request. These parameters will override any default parameters that had been set.
///
///
/// returns:
/// Built URLRequest that can be used to fetch the playlist.
- (NSURLRequest * _Nullable)requestForPlaylistWithConfiguration:(NSDictionary<NSString *, id> * _Nonnull)configuration parameters:(NSDictionary<NSString *, id> * _Nullable)parameters SWIFT_WARN_UNUSED_RESULT;
/// Constructs a request for a video.
/// Valid parameters are:
/// <ul>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAssetID</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAssetReferenceID</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyAuthToken</code>
///   </li>
///   <li>
///     <code>BCOVPlaybackService.ConfigurationKeyBumperID</code>
///   </li>
/// </ul>
/// \param configuration Dictionary of configuration options used in this catalog request.
///
/// \param parameters parameters that will be added as URL parameters to the request. These parameters will override any default parameters that had been set.
///
///
/// returns:
/// Built URLRequest that can be used to fetch the playlist.
- (NSURLRequest * _Nullable)requestForVideoWithConfiguration:(NSDictionary<NSString *, id> * _Nonnull)configuration parameters:(NSDictionary<NSString *, id> * _Nullable)parameters SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVQueuePlayer;
@class AVPlayerLayer;
@class BCOVSessionProviderExtension;

/// A playback session represents the playback of a single video. The session
/// provides a single point of access for everything related to the playback
/// experience for that video: the video and source selected for playback, the
/// player within which the playback occurs, and events that occur during the
/// playback session. Playback sessions are never reused for multiple videos
/// (even separate enqueueings of the same video).
SWIFT_PROTOCOL("_TtP19BrightcovePlayerSDK19BCOVPlaybackSession_")
@protocol BCOVPlaybackSession <NSObject>
/// The video whose playback this session represents.
@property (nonatomic, readonly, strong) BCOVVideo * _Nullable video;
/// The source in <code>self.video</code> this session uses to load content.
@property (nonatomic, readonly, strong) BCOVSource * _Nullable source;
/// The player this session uses to present content.
@property (nonatomic, readonly, strong) AVQueuePlayer * _Nullable player;
/// The layer that hosts the visible video output.
@property (nonatomic, readonly, strong) AVPlayerLayer * _Nonnull playerLayer;
/// The AVMediaSelectionGroup of audible media selection options of the AVAsset of
/// the AVPlayerItem of the AVPlayer of the current BCOVPlaybackSession.
/// The AVMediaSelectionGroup is unsorted and can contain un-playable options. Use the
/// +playableMediaSelectionOptionsFromArray: class method of AVMediaSeledtionGroup
/// to return the list of playable media options. AVMediaSelectionGroup provides filtering
/// methods to, for example, order the list of options according to the user’s
/// language preferences.
@property (nonatomic, readonly, strong) AVMediaSelectionGroup * _Nullable audibleMediaSelectionGroup;
/// The selected audible media option. When setting this property, if
/// selectedAudibleMediaOption is not a member of the AVMediaSelectionGroup of the
/// current BCOVPlaybackSession’s AVPlayer, no change in presentation state will
/// occur.
@property (nonatomic, strong) AVMediaSelectionOption * _Nullable selectedAudibleMediaOption;
/// The AVMediaSelectionGroup of legible media selection options of the AVAsset of
/// the AVPlayerItem of the AVPlayer of the current BCOVPlaybackSession.
/// The AVMediaSelectionGroup is unsorted and can contain un-playable options. Use the
/// +playableMediaSelectionOptionsFromArray: class method of AVMediaSelectionGroup
/// to return the list of playable media options. AVMediaSelectionOption provides filtering
/// methods to, for example, exclude forced subtitles from the legible options that are
/// suitable to offer in a selection UI.
@property (nonatomic, readonly, strong) AVMediaSelectionGroup * _Nullable legibleMediaSelectionGroup;
/// The selected legible media option. When setting this property, if
/// selectedLegibleMediaOption is not a member of the AVMediaSelectionGroup of the
/// current BCOVPlaybackSession’s AVPlayer, no change in presentation state will
/// occur. If selectedLegibleMediaOption is set to nil and the allowsEmptySelecton
/// property of the AVMediaSelectionGroup of the current BCOVPlaybackSession’s
/// AVPlayer is YES, all media selection options in the group will be deselected.
@property (nonatomic, strong) AVMediaSelectionOption * _Nullable selectedLegibleMediaOption;
/// The session provider extension for this session. The default value is nil.
/// If a BCOVPlaybackSessionProvider is used that needs to expose plugin specific functionality,
/// this property will return a BCOVSessionProviderExtension.
@property (nonatomic, readonly, strong) BCOVSessionProviderExtension * _Nullable providerExtension;
/// Selects the audible media option in the audible media selection group that
/// best matches the current AVPlayerItem’s automatic selection criteria.
- (void)selectAudibleMediaOptionAutomatically;
/// Selects the legible media option in the legible media selection group which
/// best matches the current AVPlayerItem’s automatic selection criteria.
- (void)selectLegibleMediaOptionAutomatically;
/// Returns a descriptive display string for the audible selection option. The
/// display name string is the stringValue of the option appended with the option
/// locale if the locale differs from the stringValue.
/// \param option A specific audio media selection option from the AVMediaSelectionGroup
///
- (NSString * _Nullable)displayNameFromAudibleMediaSelectionOption:(AVMediaSelectionOption * _Nonnull)option SWIFT_WARN_UNUSED_RESULT;
/// Returns a descriptive display string for the legible selection option. The
/// display name string is the stringValue of the option appended with the option
/// locale if the locale differs from the stringValue. Legible option names are
/// further appended with “SDH” when accessibility characteristics are present.
/// \param option A specific legible media selection option from the AVMediaSelectionGroup
///
- (NSString * _Nullable)displayNameFromLegibleMediaSelectionOption:(AVMediaSelectionOption * _Nonnull)option SWIFT_WARN_UNUSED_RESULT;
/// Terminates this playback session, indicating readiness for a new session to
/// be dequeued. A terminated playback session should be discarded immediately.
/// In a typical configuration using a BCOVPlaybackController, there is no need
/// to call this method directly. Methods on the controller are the preferred
/// mechanism for advancing to the next playback session. However, playback
/// session provider configurations which do not use a BCOVPlaybackController
/// may need to invoke this method to advance the queue.
- (void)terminate;
@end




/// A lifecycle event for a playback session.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK33BCOVPlaybackSessionLifecycleEvent")
@interface BCOVPlaybackSessionLifecycleEvent : NSObject <NSCopying>
/// This lifecycle event’s type.
@property (nonatomic, readonly, copy) NSString * _Nonnull eventType;
/// Contextual information related to this event instance.
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull properties;
/// Designated initializer. Returns an event with the specified type and properties.
/// \param eventType Type of the event.
///
/// \param properties Properties of the event
///
///
/// returns:
/// Initialized event.
- (nonnull instancetype)initWithEventType:(NSString * _Nonnull)eventType properties:(NSDictionary * _Nullable)properties OBJC_DESIGNATED_INITIALIZER;
/// Determines the equality of the events.
/// \param event Event to check against.
///
///
/// returns:
/// <code>true</code> if the events are equal and <code>false</code> if the events are no equal.
- (BOOL)isEqualToPlaybackSessionLifecycleEvent:(BCOVPlaybackSessionLifecycleEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// Returns a playback session lifecycle event of the specified type with no
/// properties.
/// \param eventType The event type of the lifecycle event to return.
///
///
/// returns:
/// The playback session lifecycle event of the specified type.
+ (BCOVPlaybackSessionLifecycleEvent * _Nonnull)eventWithType:(NSString * _Nonnull)eventType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) NSUInteger hash;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The Player SDK Manager is a singleton instance that acts as a factory,
/// central registry, and diagnostics center in the Brightcove Player SDK for
/// iOS. After obtaining an instance of the Manager, use it to obtain instances
/// of other objects from the Player SDK ecosystem.
SWIFT_CLASS("_TtC19BrightcovePlayerSDK20BCOVPlayerSDKManager")
@interface BCOVPlayerSDKManager : NSObject
/// Returns the Player SDK Manager singleton.
///
/// returns:
/// The Player SDK Manager singleton.
+ (BCOVPlayerSDKManager * _Nonnull)sharedManager SWIFT_WARN_UNUSED_RESULT;
/// Returns the Player SDK Manager singleton.
/// \param options Set to nil. Reserved for future use.
///
///
/// returns:
/// The Player SDK Manager singleton.
+ (BCOVPlayerSDKManager * _Nonnull)sharedManagerWithOptions:(NSDictionary * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
/// Returns the SDK version.
///
/// returns:
/// The SDK version
+ (NSString * _Nonnull)SDKVersion SWIFT_WARN_UNUSED_RESULT;
/// sessionID is a unique identifier associated with this instance
/// of the application. This identifier is sent along with other
/// analytics data to the Brightcove metrics servers.
/// The sessionID can be useful when trying to track down problems with
/// particular playback issues. For example, if you detect playback issues,
/// you can send the sessionID and the video ID to your own error tracking
/// server, and then report those two values to Brightcove service engineers
/// to track down the source of the problem in the server logs.
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionID;
/// Creates and returns a playback controller configured with a basic session
/// provider and a default view strategy (equivalent to calling <code>BCOVPlayerSDKManager.createPlaybackController(withViewStrategy: nil)</code>).
///
/// returns:
/// A playback controller.
- (id <BCOVPlaybackController> _Nonnull)createPlaybackController SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a playback controller configured with a basic session
/// provider and the specified view strategy. Passing <code>nil</code> as the view strategy
/// will configure the returned playback controller’s <code>view</code> property as a basic
/// unadorned video view.
/// \param viewStrategy A view strategy that determines the view for the returned playback controller.
///
///
/// returns:
/// A playback controller configured with the specified strategy.
- (id <BCOVPlaybackController> _Nonnull)createPlaybackControllerWithViewStrategy:(BCOVPlaybackControllerViewStrategy _Nullable)viewStrategy SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a playback controller configured with the specified
/// session provider and view strategy.
/// \param provider A session provider that sends playback sessions to the returned playback controller.
///
/// \param viewStrategy A view strategy that determines the view for the returned playback controller.
///
///
/// returns:
/// A playback controller configured with the specified parameters.
- (id <BCOVPlaybackController> _Nonnull)createPlaybackControllerWithSessionProvider:(id <BCOVPlaybackSessionProvider> _Nullable)provider viewStrategy:(BCOVPlaybackControllerViewStrategy _Nullable)viewStrategy SWIFT_WARN_UNUSED_RESULT;
/// Returns a basic playback session provider with the specified options.
/// \param options The options for the session provider to return.
///
///
/// returns:
/// A basic playback session provider configured with the specified options.
- (id <BCOVPlaybackSessionProvider> _Nonnull)createBasicSessionProviderWithOptions:(BCOVBasicSessionProviderOptions * _Nullable)options SWIFT_WARN_UNUSED_RESULT;
/// Registers the specified component object with the BCOVPlayerSDKManager. The
/// component should implement the methods in the <code>BCOVComponent</code> protocol.
/// Registering a component “activates it” for use, enabling its functionality.
/// \param component The object to be registered with the BCOVPlayerSDKManager.
///
- (void)registerComponent:(id <BCOVComponent> _Nonnull)component;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface BCOVPlayerSDKManager (SWIFT_EXTENSION(BrightcovePlayerSDK))
/// Creates and returns a new playback controller configured for sidecar subtitles
/// with the specified view strategy.
/// \param viewStrategy A view strategy that determines the view for the returned playback controller.
///
///
/// returns:
/// A new playback controller configured for sidecar subtitles playbacksessions.
- (id <BCOVPlaybackController> _Nonnull)createSidecarSubtitlesPlaybackControllerWithViewStrategy:(BCOVPlaybackControllerViewStrategy _Nullable)viewStrategy SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a new sidecar subtitle session provider with the
/// specified parameters.
/// \param provider Optional upstream session provider.
///
///
/// returns:
/// A new session provider with the specified parameters.
- (id <BCOVPlaybackSessionProvider> _Nonnull)createSidecarSubtitlesSessionProviderWithUpstreamSessionProvider:(id <BCOVPlaybackSessionProvider> _Nullable)provider SWIFT_WARN_UNUSED_RESULT;
@end


@interface BCOVPlayerSDKManager (SWIFT_EXTENSION(BrightcovePlayerSDK))
/// Creates and returns a FairPlay enabled playback controller.
/// If you are using Video Cloud Dynamic Delivery, a Fairplay application certificate will
/// automatically be retrieved from the BCOVVideo when you play a playlist.
/// You can still supply an application certificate separately by calling
/// <code>BCOVBasicPlaybackController addApplicationCertificate:identifier:</code>.
/// \param proxy The BCOVFPSAuthorizationProxy to use for this session provider. Must not be nil.
///
///
/// returns:
/// A playback controller.
- (id <BCOVPlaybackController> _Nonnull)createFairPlayPlaybackControllerWithAuthorizationProxy:(id <BCOVFPSAuthorizationProxy> _Nonnull)proxy SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a FairPlay session provider with the specified parameters.
/// If you are using Video Cloud Dynamic Delivery, a Fairplay application certificate will
/// automatically be retrieved from the BCOVVideo when you play a playlist.
/// You can still supply an application certificate separately by calling
/// <code>BCOVBasicPlaybackController addApplicationCertificate:identifier:</code>.
/// \param proxy The BCOVFPSAuthorizationProxy to use for this session provider. Must not be nil.
///
/// \param provider And upstream session provider to link to. If nil, a BCOVBasicSessionProvider will be used.
///
///
/// returns:
/// A session provider.
- (id <BCOVPlaybackSessionProvider> _Nonnull)createFairPlaySessionProviderWithAuthorizationProxy:(id <BCOVFPSAuthorizationProxy> _Nonnull)proxy upstreamSessionProvider:(id <BCOVPlaybackSessionProvider> _Nullable)provider SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a FairPlay enabled playback controller.
/// \param appCert The Fairplay Application Certificate for this session provider. If using Brightcove FPS Server, this can retrieved by BCOVFPSBrightcoveAuthProxy. Can be nil.
///
/// \param proxy The BCOVFPSAuthorizationProxy to use for this session provider. Must not be nil.
///
/// \param viewStrategy The view strategy to use.
///
///
/// returns:
/// A playback controller.
- (id <BCOVPlaybackController> _Nonnull)createFairPlayPlaybackControllerWithApplicationCertificate:(NSData * _Nullable)appCert authorizationProxy:(id <BCOVFPSAuthorizationProxy> _Nonnull)proxy viewStrategy:(BCOVPlaybackControllerViewStrategy _Nullable)viewStrategy SWIFT_WARN_UNUSED_RESULT;
/// Creates and returns a FairPlay session provider with the specified parameters.
/// \param appCert The FairPlay Application Certificate for this session provider. If using Brightcove FPS Server, this can retrieved by BCOVFPSBrightcoveAuthProxy. Can be nil.
///
/// \param proxy The BCOVFPSAuthorizationProxy to use for this session provider. Must not be nil.
///
/// \param provider And upstream session provider to link to. If nil, a BCOVBasicSessionProvider will be used.
///
///
/// returns:
/// A session provider.
- (id <BCOVPlaybackSessionProvider> _Nonnull)createFairPlaySessionProviderWithApplicationCertificate:(NSData * _Nullable)appCert authorizationProxy:(id <BCOVFPSAuthorizationProxy> _Nonnull)proxy upstreamSessionProvider:(id <BCOVPlaybackSessionProvider> _Nullable)provider SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC19BrightcovePlayerSDK15BCOVSSConstants")
@interface BCOVSSConstants : NSObject
/// The key for an aray of text track dictionaries.
/// If videos are retreieved through the BCOVPlaybackService and those
/// videos have text tracks assosiated with them, the plugin will handle those
/// automatically.
/// If you are generating your BCOVVideos manually, you will need to construct
/// a text track dictionary that should includes the following key value
/// pairs <code>TextTracksKeySource</code>,<code>TextTracksKeySourceLanguage</code>,
/// <code>TextTracksKeyLabel</code>, <code>TextTracksKeyDuration, </code>TextTracksKeyKind<code>, </code>TextTracksKeyDefault<code>,</code>
/// <code>TextTracksKeyMIMEType</code>.
/// Example:
/// \code
/// BCOVSSConstants.VideoPropertiesKeyTextTracks [
///     [
///         BCOVSSConstants.TextTracksKeySource: ..., // required
///         BCOVSSConstants.TextTracksKeySourceLanguage: ..., // required
///         BCOVSSConstants.TextTracksKeyLabel: ..., // required
///         BCOVSSConstants.TextTracksKeyDuration: ..., // required/optional
///         BCOVSSConstants.TextTracksKeyKind: BCOVSSConstants.TextTracksKindSubtitles or BCOVSSConstants.TextTracksKindCaptions, // required
///         BCOVSSConstants.TextTracksKeyDefault: ..., // optional
///         BCOVSSConstants.TextTracksKeyMIMEType: ..., // optional
///     ]
/// ]
///
/// \endcode
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VideoPropertiesKeyTextTracks;)
+ (NSString * _Nonnull)VideoPropertiesKeyTextTracks SWIFT_WARN_UNUSED_RESULT;
/// The key for the NSString URL to the text track.
/// This key is required. Text track source can be either an M3U8
/// subtitle playlist or a WebVTT file. WebVTT URLs should have a “.vtt”
/// extension, and M3U8 playlist files should have an “m3u8” extension.
/// If your URL cannot follow this convention, you need to specify the
/// format of the file referenced by your URL with the
/// <code>TextTracksKeySourceType</code> key.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeySource;)
+ (NSString * _Nonnull)TextTracksKeySource SWIFT_WARN_UNUSED_RESULT;
/// The key for the NSString language of the text track.
/// This key is required.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeySourceLanguage;)
+ (NSString * _Nonnull)TextTracksKeySourceLanguage SWIFT_WARN_UNUSED_RESULT;
/// The key for the NSString name of the text track.
/// This key is required.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeyLabel;)
+ (NSString * _Nonnull)TextTracksKeyLabel SWIFT_WARN_UNUSED_RESULT;
/// The key for the NSNumber of Integer value for duration of the text_track.
/// If the text track source is a .vtt file, the duration of the .vtt file
/// is required in order for subtitles to be displayed. If the video and
/// .vtt file were retrieved through BCOVPlaybackService, the plugin will
/// the attempt to use the video properties value keyed by “duration” to satisfy
/// this requirement. If building videos manually, this key is required. If text
/// track is .m3u8, this key will be ignored.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeyDuration;)
+ (NSString * _Nonnull)TextTracksKeyDuration SWIFT_WARN_UNUSED_RESULT;
/// The key for the NSNumber of BOOL that indicates if the text track is the default.
/// This key is optional.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeyDefault;)
+ (NSString * _Nonnull)TextTracksKeyDefault SWIFT_WARN_UNUSED_RESULT;
/// The key for the NSString mime type of the text track.
/// This key is optional.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeyMIMEType;)
+ (NSString * _Nonnull)TextTracksKeyMIMEType SWIFT_WARN_UNUSED_RESULT;
/// The key for the NSString kind of the text track.
/// This key is required. The value of this key should be either
/// <code>TextTracksKindSubtitles</code> or <code>TextTrackKindCaptions</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeyKind;)
+ (NSString * _Nonnull)TextTracksKeyKind SWIFT_WARN_UNUSED_RESULT;
/// A text track kind value that indicates that a text track kind is subtitles.
/// Also see <code>TextTracksKeyKind</code> and <code>TextTracksKindCaptions</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKindSubtitles;)
+ (NSString * _Nonnull)TextTracksKindSubtitles SWIFT_WARN_UNUSED_RESULT;
/// A text track kind value that indicates that a text track kind is closed captions.
/// Also see <code>TextTracksKeyKind</code> and <code>TextTracksKindSubtitles</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKindCaptions;)
+ (NSString * _Nonnull)TextTracksKindCaptions SWIFT_WARN_UNUSED_RESULT;
/// An NSDictionary key used to specify the type of file
/// referred to by the TextTracksKeySource URL.
/// This NSDictionary key can take one of two values:
/// TracksKeySourceTypeWebVTTURL to indicate that the
/// TracksKeySourceType URL refers to a WebVTT file, or
/// TracksKeySourceTypeM3U8URL to indicate that the
/// TracksKeySourceType URL refers to an M3U8 file.
/// This key/value pair is only necessary if the source URL does not
/// use a “.vtt” or “.m3u8” extension.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeySourceType;)
+ (NSString * _Nonnull)TextTracksKeySourceType SWIFT_WARN_UNUSED_RESULT;
/// An NSDictionary value used to indicate that the
/// source URL refers to a WebVTT file.
/// This key/value pair is only necessary if the
/// source URL refers to a WebVTT file, but does not use
/// a “.vtt” extension.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeySourceTypeWebVTTURL;)
+ (NSString * _Nonnull)TextTracksKeySourceTypeWebVTTURL SWIFT_WARN_UNUSED_RESULT;
/// An NSDictionary value used to indicate that the
/// source URL refers to an M3U8 file.
/// This key/value pair is only necessary if the
/// source URL refers to an M3U8 file, but does not use
/// an “.m3u8” extension.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TextTracksKeySourceTypeM3U8URL;)
+ (NSString * _Nonnull)TextTracksKeySourceTypeM3U8URL SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// BCOVUILabel
/// The BCOVUILabel is a subclass of UILabel which has
/// an extra NSString property that will be read by VoiceOver
/// as a prefix to the labels value. For example the duration
/// abel can be read by VO as “Duration 03:47” and still only
/// visibly read as “03:47”
SWIFT_CLASS("_TtC19BrightcovePlayerSDK11BCOVUILabel")
@interface BCOVUILabel : UILabel
/// accessibilityLabelPrefix is the string that will be
/// read by VoiceOver before the text value of the label itself
@property (nonatomic, copy) NSString * _Nullable accessibilityLabelPrefix;
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC19BrightcovePlayerSDK18BCOVVideoErrorCode")
@interface BCOVVideoErrorCode : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BadRequest;)
+ (NSString * _Nonnull)BadRequest SWIFT_WARN_UNUSED_RESULT;
/// The same parameter name was provided more than once in the request.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DuplicateParameters;)
+ (NSString * _Nonnull)DuplicateParameters SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AccessDenied;)
+ (NSString * _Nonnull)AccessDenied SWIFT_WARN_UNUSED_RESULT;
/// A JWT is required by the Playback Rights but was not provided.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TokenRequired;)
+ (NSString * _Nonnull)TokenRequired SWIFT_WARN_UNUSED_RESULT;
/// The JWT provided did not pass validation.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TokenValidation;)
+ (NSString * _Nonnull)TokenValidation SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Forbidden;)
+ (NSString * _Nonnull)Forbidden SWIFT_WARN_UNUSED_RESULT;
/// The account id in the policy key does not match the account in the api request.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AccountID;)
+ (NSString * _Nonnull)AccountID SWIFT_WARN_UNUSED_RESULT;
/// The video is restricted from playing in the current geo region; the message will contain additional information about the specific issue.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ClientGeo;)
+ (NSString * _Nonnull)ClientGeo SWIFT_WARN_UNUSED_RESULT;
/// The video is restricted at the current IP address.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ClientIP;)
+ (NSString * _Nonnull)ClientIP SWIFT_WARN_UNUSED_RESULT;
/// The video is restricted from playing on the current domain.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Domain;)
+ (NSString * _Nonnull)Domain SWIFT_WARN_UNUSED_RESULT;
/// The JWT does not allow for playback based on offers available in the video.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Offers;)
+ (NSString * _Nonnull)Offers SWIFT_WARN_UNUSED_RESULT;
/// The JWT does not allow for playback based on tags available in the video.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Tags;)
+ (NSString * _Nonnull)Tags SWIFT_WARN_UNUSED_RESULT;
/// For a single video request, the video exists, but is not allowed to be played now.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VideoNotPlayable;)
+ (NSString * _Nonnull)VideoNotPlayable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NotFound;)
+ (NSString * _Nonnull)NotFound SWIFT_WARN_UNUSED_RESULT;
/// The requested video is not available.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VideoNotFound;)
+ (NSString * _Nonnull)VideoNotFound SWIFT_WARN_UNUSED_RESULT;
/// The requested playlist is not available.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PlaylistNotFound;)
+ (NSString * _Nonnull)PlaylistNotFound SWIFT_WARN_UNUSED_RESULT;
/// Only GET, HEAD and OPTIONS are allowed for this api.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MethodNotAllowed;)
+ (NSString * _Nonnull)MethodNotAllowed SWIFT_WARN_UNUSED_RESULT;
/// Internal server error.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ServerError;)
+ (NSString * _Nonnull)ServerError SWIFT_WARN_UNUSED_RESULT;
/// Got a bad response from a backend server.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AccountRetrieveFailure;)
+ (NSString * _Nonnull)AccountRetrieveFailure SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VideoRetieveFailure;)
+ (NSString * _Nonnull)VideoRetieveFailure SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VideoUrlsRetrieveFailure;)
+ (NSString * _Nonnull)VideoUrlsRetrieveFailure SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PlaylistRetrieveFailure;)
+ (NSString * _Nonnull)PlaylistRetrieveFailure SWIFT_WARN_UNUSED_RESULT;
/// Cannot retrive playback right from cloudfront
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PlaybackRightRetrieveFailure;)
+ (NSString * _Nonnull)PlaybackRightRetrieveFailure SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PlaylistVideosRetrieveFailure;)
+ (NSString * _Nonnull)PlaylistVideosRetrieveFailure SWIFT_WARN_UNUSED_RESULT;
/// Failed to get license from Fabric License Server for this video.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LicenseRetreiveFailure;)
+ (NSString * _Nonnull)LicenseRetreiveFailure SWIFT_WARN_UNUSED_RESULT;
/// Failed to get offers from Adamas API for this video.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull OffersRetreiveFailure;)
+ (NSString * _Nonnull)OffersRetreiveFailure SWIFT_WARN_UNUSED_RESULT;
/// Failed to retrieve Playback Rights for this video.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull RightsRetrieveFailure;)
+ (NSString * _Nonnull)RightsRetrieveFailure SWIFT_WARN_UNUSED_RESULT;
/// Returned this response from a backend server.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ServiceUnavailable;)
+ (NSString * _Nonnull)ServiceUnavailable SWIFT_WARN_UNUSED_RESULT;
/// Either a backend server or one of the servers they rely on timed out.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ServerTimeout;)
+ (NSString * _Nonnull)ServerTimeout SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@interface NSDictionary<KeyType, ObjectType> (SWIFT_EXTENSION(BrightcovePlayerSDK))
/// Constructs a string of key/value pairs that have been UTF-8 encoded for aURL.
///
/// returns:
/// The URL encoded string form of this dictionary.
- (NSString * _Nonnull)bcov_UTF8EncodedRequestParameterString SWIFT_WARN_UNUSED_RESULT;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
